--- ./src/app/chat-widget/text-show-more-less/text-show-more-less.component.ts
+++ ./src/app/chat-widget/text-show-more-less/text-show-more-less.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { LinkifyPipe } from '../linkifyPipe/linkify.pipe';

\1
  standalone: true,
  selector: 'app-text-show-more-less',
  templateUrl: './text-show-more-less.component.html',
  styleUrls: ['./text-show-more-less.component.css'],
  providers: [LinkifyPipe]
})
export class TextShowMoreLessComponent {
  @Input() text: string = '';
  showMore: boolean = false;
  wordLimit = 130;
  constructor(
    private linkify: LinkifyPipe,
    private sanitizer: DomSanitizer,
  ) { }


  toggleShowMore() {
    this.showMore = !this.showMore;
  }

  get linkifiedText(): SafeHtml {
    return this.sanitizer.bypassSecurityTrustHtml(this.linkify.transform(this.text));
  }

  get truncatedText(): SafeHtml {
    const truncated = this.text.substring(0, this.wordLimit) + '...';
    return this.sanitizer.bypassSecurityTrustHtml(this.linkify.transform(truncated));
  }
}

--- ./src/app/forgotpasswordcheckout/forgotpasswordcheckout.component.ts
+++ ./src/app/forgotpasswordcheckout/forgotpasswordcheckout.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, ElementRef, OnInit, QueryList, ViewChildren } from '@angular/core';
import { BusinessSettingService } from '../service/business-setting.service';
import { SucessmsgPopupComponent } from '../sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from '../notifacation-message/notifacation-message.component';
import { MatDialog } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-forgotpasswordcheckout',
  templateUrl: './forgotpasswordcheckout.component.html',
  styleUrls: ['./forgotpasswordcheckout.component.css']
})
export class ForgotpasswordcheckoutComponent implements OnInit {


  mobileOtpCode: string[] = ['', '', '', '', '', ''];
  hidenewpassword: boolean = true;
  hideconfirmpassword: boolean = true;
  email: string = '';
  emailInvalid: boolean = false;
  otpGenerated: boolean = false;
  @ViewChildren('otpInput') otpInputs!: QueryList<ElementRef<HTMLInputElement>>;
  correctOTP = '123456';
  otp = ['', '', '', '', '', ''];
  receivedResponse: boolean = false;
  otpCalled = false;
  otpNotValid: boolean = false;
  emailVerified: boolean = false;
  verifyTokenNotValid: boolean = false;
  newPassword: string = '';
  confirmPassword: string = '';
  passwordMismatch: boolean = false;
  token: string = '';
  errorMessage: any;
  showErrors: boolean = false;
  changedPassword: boolean = false;
  successMessageShow: boolean = false;

  constructor(private businessService: BusinessSettingService, public dialog: MatDialog) { }

  ngOnInit() {
  }

  handleInput(event: Event, index: number, isLast: boolean): void {
    const inputValue = (event.target as HTMLInputElement).value;
    if (/^[0-9]$/.test(inputValue)) {
      this.otp[index] = inputValue;
      if (isLast && this.otp.join('') === this.correctOTP) {

      } else if (inputValue && index < this.otpInputs.length - 1) {
        const nextInput = this.otpInputs.toArray()[index + 1].nativeElement;
        nextInput.focus();
      }
    }
  }
  handleKeydown(event: KeyboardEvent, index: number): void {
    const allowedKeys = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight'];
    if (!/^[0-9]$/.test(event.key) && !allowedKeys.includes(event.key)) {
      event.preventDefault();
    }
  }

  verifyEmail() {
    this.emailInvalid = false;
    if(!this.email || !this.email.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,10}$/)){
       this.emailInvalid = true;
       return;
    }
    this.businessService.verifyEmailForResetPassword(this.email).subscribe(
      data => {
        if (data?.data?.forgotPassword != null) {
          this.otpGenerated = true;
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'VERIFY_EMAIL_SUCCESS' } });
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: data.errors[0].errorMessage }
          });
        }
      }
    );
  }

  checkValid() {
    this.businessService.checkToken(this.token).subscribe(
      data => {
        if (data?.data?.verifyResetToken) {
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'VERIFY_TOKEN' } });
          this.otpGenerated = false;
          this.emailVerified = true;
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: data.errors[0].errorMessage }
          });
        }
      }
    );
  }

  checkPasswords(confirmpwd: any) {
    if (confirmpwd === '' || confirmpwd === null) {
      this.passwordMismatch = false;
    } else {
      this.passwordMismatch = this.newPassword !== this.confirmPassword;
    }
  }

  validateAndResetPassword() {
    this.showErrors = true;
    if (!this.newPassword || !this.confirmPassword || this.passwordMismatch) {
      return;
    }
    if (this.newPassword.match(/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&]).{8,}/) && this.confirmPassword.match(this.newPassword)) {
      this.resetPassword();
    }
  }

  resetPassword() {
    this.businessService.resetPassword(this.token, this.newPassword).subscribe(
      data => {
        if (data?.data?.resetPassword) {
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'CHANGED_PASSWORD_SUCCESS' } });
          this.changedPassword = true;
          this.successMessageShow = true;
        } else {
          const error = data.errors[0];  // Assuming errors is an array and you need to access the first element
          if (error.errorCode == 'PROVIDE_NEW_PASS') {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: 'NEW_PASSWORD_CANNOT_BE_AN_USED_PASSWORD' }
            });
          } else {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: error.errorMessage }
            });
          }

        }
      }
    );
  }

}

--- ./src/app/site-themes/four-theme/four-theme.component.ts
+++ ./src/app/site-themes/four-theme/four-theme.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { Component, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { TranslateService } from '@ngx-translate/core';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { PdpContent } from 'src/app/models/PdpContent';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { FaviconService } from 'src/app/service/fav-icon.service';
import { ThemeService } from 'src/app/service/theme.service';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { environment } from 'src/environments/environment';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';


\1
  standalone: true,
  selector: 'app-four-theme',
  templateUrl: './four-theme.component.html',
  styleUrls: ['./four-theme.component.scss']
})
export class FourThemeComponent implements OnInit, OnDestroy  {

  hideHeaderFooter: boolean = false;
  routerSubscription !: Subscription;

  footerMenuItems:  { text: string; item: string; list: any[] }[]=
  [{ text: "LOGO_SECTION", item: "logo",list:["../../../assets/img/items/footerlogo.svg",""]},
  { text: "USEFULL_LINKS", item: "links",list:["SIGNIN_ABOUTUS", "TERMS_CONDITIONS", "END_USER_LICENSE_AGREEMENT", "COOKIES_POLICY", "RETURN_POLICY", "TERMS_OF_USE"] },
  { text: "CATEGORY_ONLY", item: "category",list:[{id: 1, catName: 'Men'}, {id: 1, catName: 'Women'}] },
  { text: "MY_ACCOUNT", item: "account",list:["CONTACT_US", "PICK_A_PLAN_SUBSCRIBE", "UNSUBSCRIBE", "ORDER_TRACKING_ONLY"] }];

  footer:any={
    copyright:{
      text:'©Copyright 2023 Fazealbusiness',
      style:'LEFT_TO_RIGHT'
    },
    menu:this.footerMenuItems,
    textColor:'',
    bgColor:'',
    design:''
  }
  categories: CategoryResponse[] = [];
  dashboardContent!: ThemeDashboardContent;
  pdpResponse!: PdpContent;
  subdomain: string = '';
  private themeElement!: HTMLLinkElement;
  themeNameCSS: string = '';
  themeName: string = 'FourthTheme';
  awsURL = environment.awsKey;
  assetsAwsUrl = environment.assetsAwsKey;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private themeService: ThemeService,
    public translate: TranslateService,
    private renderer: Renderer2,
    public translateSiteService:TranslateSiteService,
    private catalogService: CatalogServiceService,
    private tokenStorage: TokenStorageService,
    private favIconService: FaviconService,private cookieDate: CookieDataServiceService,
    ) { }

  async ngOnInit(): Promise<void> {
    this.checkRoute();
    this.routerSubscription = this.router.events.subscribe(event => {
      if (event instanceof NavigationEnd) {
        this.checkRoute();
      }
    });
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      const path = window.location.pathname;
      this.subdomain = path.split('/')[1];
    }

    this.themeService.getThemeDashboardContentBySiteUrl(this.subdomain).subscribe(
      data => {
        if(data?.errors) return
        if(data?.data?.getThemeDashboardContentBySiteUrl){
          this.dashboardContent = data?.data?.getThemeDashboardContentBySiteUrl;
          this.favIconService.setFavicon(this.assetsAwsUrl + this.dashboardContent?.favIcon)
          this.tokenStorage.saveThemeDashboard(this.dashboardContent);
          this.loadThemeColors();
          this.loadCategories();
          this.footer.copyright.text = this.dashboardContent?.copyrights?.text;
          this.footer.copyright.style = this.dashboardContent?.copyrights?.textDirection;

          let footerImage = '';
          if(this.dashboardContent?.footer?.footerLogoImage){
            footerImage = this.awsURL + this.dashboardContent?.footer?.footerLogoImage;
          } else{
            footerImage = this.assetsAwsUrl + this.dashboardContent?.footer?.logoImage;
          }

          this.footerMenuItems[0].list = [footerImage, this.dashboardContent?.footer?.description]
          this.footer.menu = this.footerMenuItems;
          this.footer.textColor = this.dashboardContent?.footer?.textColor;
          this.footer.bgColor = this.dashboardContent?.footer?.backgroundColor;
          this.footer.design = this.dashboardContent?.footer?.footerDesign;
        }
      }
    );
    this.getThemeName();

  }

  ngOnDestroy() {
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
  }

  loadPdp(siteUrl: string){
    this.themeService.getPdpContentBySiteUrl(siteUrl).subscribe(
      data => {
        if(data.data.getPdpContentBySiteUrl){
          this.pdpResponse = data.data.getPdpContentBySiteUrl;
          this.tokenStorage.savePdp(this.pdpResponse);
        }
      }
    );
  }



  loadThemeColors(){
      this.renderer.addClass(document.body, `theme-color-${this.dashboardContent.themeColorsResponse.name}`);
  }


  loadThemeCSS() {
    // Get the theme name
    console.log(this.dashboardContent.themeName,"checking theme name")
    this.themeNameCSS = this.dashboardContent.themeName;
    const url = `https://fazeal-ui-assets.s3.amazonaws.com/themes/${this.themeNameCSS}.css`;

    // Check if a theme is already loaded and remove it
    if (this.themeElement) {
      document.head.removeChild(this.themeElement);
    }

    // Create a new link element
    this.themeElement = document.createElement('link');
    this.themeElement.rel = 'stylesheet';
    this.themeElement.href = url;

    // Append the link element to the document head
    document.head.appendChild(this.themeElement);
  }

  loadCategories(){
    this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
      data => {
        this.categories = data.data.findAllCategoryBySiteUrl;
        this.footerMenuItems[2].list = [];
        this.categories?.forEach(cat => {
          this.footerMenuItems[2].list.push({id: cat.id, catName: cat.name});
        });
      }
    );
  }

  checkRoute() {
    let subdomain = this.route.snapshot.params['subdomain'];
    if (environment.env !== 'local') {
      subdomain = '';
    }
    const expectedUrl = `/${subdomain}/print-order-summary`;

    if (this.router.url === expectedUrl) {
      this.hideHeaderFooter = true;
    } else {
      this.hideHeaderFooter = false;
    }
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

}

--- ./src/app/site-themes/four-theme/four-new-product-listing-page/four-new-product-listing-page.component.ts
+++ ./src/app/site-themes/four-theme/four-new-product-listing-page/four-new-product-listing-page.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { PlpResponse } from 'src/app/models/PlpResponse';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-new-product-listing-page',
  templateUrl: './four-new-product-listing-page.component.html',
  styleUrls: ['./four-new-product-listing-page.component.scss']
})
export class FourNewProductListingPageComponent implements OnInit {
  plpResponse!: PlpResponse;
  loading: boolean = true;
  private routeSub!: Subscription;
  subdomain: string = '';
  skeletonArray = new Array(9);

  constructor(
    private route: ActivatedRoute,
    private themeService: ThemeService,
    private tokenStorage: TokenStorageService,
    private router: Router,
    ) { }

    async ngOnInit() {
      if(environment.env !== 'local'){
        this.subdomain = window.location.hostname;
      } else {
        this.subdomain = this.route.snapshot.params['subdomain'];
      }
      this.routeSub = this.route.params.subscribe(async routeParam => {
        const businessURL = await this.tokenStorage.getBusinessURL();
        if (this.subdomain && !businessURL) {
          this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
        }
        await this.loadPlp(this.subdomain, routeParam['id']);
      });
    }

  loadPlp(siteUrl: string, id: number){
    if (id)
      this.themeService.getBusinessProductListingPageContentBySiteUrl(siteUrl, id).subscribe(
        data => {
          if (data?.data?.getBusinessProductListingPageContentBySiteUrl) {
            this.plpResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
          }
        }
      );
  }

  ngOnDestroy() {
    if (this.routeSub) {
      this.routeSub.unsubscribe();
    }
  }

}

--- ./src/app/site-themes/four-theme/four-new-product-listing-page/four-breadcrums/four-breadcrums.component.ts
+++ ./src/app/site-themes/four-theme/four-new-product-listing-page/four-breadcrums/four-breadcrums.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { ActivatedRoute } from '@angular/router';
import { CategoryPath } from 'src/app/models/CategoryPath';

\1
  standalone: true,
  selector: 'app-four-breadcrums',
  templateUrl: './four-breadcrums.component.html',
  styleUrls: ['./four-breadcrums.component.scss']
})
export class FourBreadcrumsComponent implements OnInit {
    @Input() data:any;
    @Input() product:any;
    // @Input() activeTheme:string=''
    @Input() categoryPath: CategoryPath[] = [];
    subdomain = '';
    hideL2 = false;
    hideL3 = false;
  constructor(private route: ActivatedRoute) { }

  ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    if(this.product && this.product.categoryL1 && this.product.categoryL1.id == this.data.categoryDTO.id){
      this.hideL2 = true;
      this.hideL3 = true;
    }
    if(this.product && this.product.categoryL2 && this.product.categoryL2.id == this.data.categoryDTO.id){
      this.hideL3 = true;
    }
  }

}

--- ./src/app/site-themes/four-theme/four-new-product-listing-page/four-content-area/four-content-area.component.ts
+++ ./src/app/site-themes/four-theme/four-new-product-listing-page/four-content-area/four-content-area.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Options } from '@angular-slider/ngx-slider';
import { environment } from 'src/environments/environment';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { BrandResponse } from 'src/app/models/BrandResponse';
import { ActivatedRoute, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { firstValueFrom } from 'rxjs';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { DataService } from 'src/app/service/data.service';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { PageEvent } from '@angular/material/paginator';
import { PdpQuickViewComponent } from '../../pdp-quick-view/pdp-quick-view.component';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';

\1
  standalone: true,
  selector: 'app-four-content-area',
  templateUrl: './four-content-area.component.html',
  styleUrls: ['./four-content-area.component.scss']
})
export class FourContentAreaComponent implements OnInit, OnChanges {
  @Input() data: any
  isShowList: boolean = false;
  awsUrl = environment.awsKey;
  categories: CategoryResponse[] = [];
  brands: BrandResponse[] = [];
  products: ProductResponse[] = [];
  subdomain = '';
  currency = this.tokenStorage.getCurrency()?.symbol;
  gta: any = null;
  lte: any = null;
  attributes: AttributeResponse[] = [];
  attributeName: string = '';
  attributeValueName = '';
  from = 0;
  size = 12;
  category!: CategoryResponse;
  rating!: number|null;
  selectedbrands: string[] = [];
  businessId = Number(this.tokenStorage.getBusinessID()!);
  productLoaded = false;
  queryParams: string[] = []
  rangeValues: number[] = [];
  selectedAttributeValue: string[] = [];
  tempSelectedBrands: string[] = [];
  firstTime: boolean = true;
  userWishlists: WishListResponse[] = [];
  visibleBrands: any[] = [];
  maxVisibleBrands: number = 6;
  currentPage: number = 0;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  totalPages!: number;
  totalPagesArray!: number[];
  totalResponses!: number;
  view: string = 'grid';
  isLoading: boolean = false;
  allproductsLoaded: boolean = false;
  plpSearchData: any;
  minPrice: any;
  maxPrice: any;
  avgRating!: number;
  options: Options = {
    floor: 0,
    ceil: 100
  };
  @ViewChild('slider', { static: false }) sliderElement!: ElementRef;
  totalCounts!: number;
  min: number|any;
  max: number|any;
  attrValue: string[] = [];
  selectedBrands: string[] = [];
  filtersOnMobile: boolean = true;
  pageEvent!: PageEvent;
  sessionResponse!: SessionResponse;
  isFirstResponse: boolean = true;
  currentUrl!: string;
  firstGta: any;
  firstLta: any;
  brandsNames: string[] = [];
  skeletonArray = new Array(9);


  constructor(
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private tokenStorage: TokenStorageService,
    private router: Router,
    private wishlistService: WhishlistService,
    public dialog: MatDialog,
    private dataService: DataService,
    private cdr: ChangeDetectorRef,private cookieDate: CookieDataServiceService
  ) {
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }
  }

  async ngOnInit() {
    this.isLoading = true;
    this.currentUrl = this.router.url;
    this.products = [];
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    await Promise.all([this.loadCategories(), this.loadProducts()]);
    this.readQueryParams();
    this.checkingFiltersHide();
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  private async loadProducts() {
    this.allproductsLoaded = false;
    const queryParamsExist = Object.keys(this.route.snapshot.queryParams).length > 0;
    if (queryParamsExist) {
      await this.searchProductsByFilters();
    } else {
      if (!this.field || this.field != 'PRICE' && this.field != 'REVIEWS') {
        this.field = 'PRICE'
      }
      this.selectedbrands = [];
    }
    this.allproductsLoaded = true;
}


  readQueryParams() {
    const queryParams = this.route.snapshot.queryParams;
    if (queryParams['rating']) {
      this.rating = Number(queryParams['rating']);
    }
    if (queryParams['brands']) {
      this.selectedbrands = queryParams['brands'].split(',');
      this.brands.forEach(brand => {
        brand.checked = this.selectedbrands.includes(brand.name);
      });
    }
    this.gta = queryParams['start'] ? Number(queryParams['start']) : null;
    this.lte = queryParams['end'] ? Number(queryParams['end']) : null;
    this.rangeValues = [this.gta, this.lte];

    if (queryParams['variants']) {
      this.selectedAttributeValue = queryParams['variants'].split(',');
    }
  }

  async loadCategories() {
    const data = await firstValueFrom(this.catalogService.findAllCategoryBySiteUrl(this.subdomain));
    if (data?.data?.findAllCategoryBySiteUrl) {
      this.categories = data?.data?.findAllCategoryBySiteUrl;
    }
  }

  loadAttributes() {
    this.category = this.data?.categoryDTO;
    this.catalogService.listAttributesByCategory(this.businessId, this.category.name).subscribe(
      data => {
        if (data?.data?.listAttributesForPlp) {
          this.attributes = data?.data?.listAttributesForPlp;
          console.log(this.attributes,"checking colors")
        }
      }
    );
  }

  handlePageEvent(event: PageEvent) {
    this.currentPage = event.pageIndex;
    this.size = event.pageSize;
    this.from = this.currentPage * this.size;
    this.searchProductsByFilters();
  }

  getCurrentRange(): string {
    const start = this.from + 1;
    const end = Math.min(this.from + this.size, this.totalResponses);
    return `${start}-${end}`;
  }

  onPageSizeChange() {
    this.allproductsLoaded = false;
    this.from = 0;
    this.products = [];
    this.searchProductsByFilters();
    this.cdr.detectChanges();
}

  sort(field: string, order: string) {
    this.field = field;
    this.order = order;
    this.searchProductsByFilters();
    this.cdr.detectChanges();
  }

  updateOptions() {
    this.options = {
      floor: this.gta,
      ceil: this.lte
    };
  }

  nextPage() {
    this.currentPage++;
    this.sort(this.field, this.order);
  }

  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.sort(this.field, this.order);
    }
  }

  goToPage(page: number) {
    this.currentPage = page;
    this.sort(this.field, this.order);
  }

  async ngOnChanges(changes: SimpleChanges) {
    if (changes['data'] && this.currentUrl !== this.router.url) {
      this.currentUrl = this.router.url;
      this.subdomain = this.route.snapshot.params['subdomain'];
      if (this.subdomain !== this.tokenStorage.getBusinessURL()?.split('/')[0]) {
        await this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
        this.businessId = Number(this.tokenStorage.getBusinessID());
      }
      this.loadAttributes();
      this.resetFilters();
      await this.searchProductsByFilters();
    }
  }

  private resetFilters() {
    this.rating = null;
    this.min = null;
    this.max = null;
    this.attrValue = [];
    this.selectedBrands = [];
    this.selectedbrands = [];
    this.gta = null;
    this.lte = null;
    this.rangeValues = [];
    this.selectedAttributeValue = [];
    localStorage.removeItem('filter-attrs');
  }

  updateSliderFromInput() {
    const queryParams: any = { ...this.route.snapshot.queryParams };
    queryParams.start = this.gta;
    queryParams.end = this.lte;
    this.router.navigate([], {
      relativeTo: this.route,
      queryParams: queryParams,
      queryParamsHandling: 'merge',
    });

    if (this.firstTime) {
      this.firstTime = false
      this.rangeValues = [this.gta, this.lte];
    }
  }

  onSliderChange() {
    this.gta = this.rangeValues[0]
    this.lte = this.rangeValues[1]
    this.updateFromToInQueryParam();
  }

  private updateFromToInQueryParam() {
    if (!this.firstTime) {
      const queryParams: any = { ...this.route.snapshot.queryParams };

      queryParams.start = this.gta;
      queryParams.end = this.lte;

      this.router.navigate([], {
        relativeTo: this.route,
        queryParams: queryParams,
        queryParamsHandling: 'merge',
      });
    }
    if (this.firstTime) this.firstTime = false;
  }


  searchProductsByFilters() {
    this.isLoading = true;
    this.catalogService.filterProductsOnPLP(
      this.businessId, this.category.name, this.from, this.size, this.field, this.order,
      this.rating ? this.rating : null, this.min ? this.min : null, this.max ? this.max : null, this.selectedBrands, this.attrValue
    ).subscribe(data => {
      if (data?.errors) return;
      if (data?.data?.plpSearch) {
        const uniqueProductIds = new Set(this.products?.map(product => product.id));
        this.products = [
          ...this.products?.filter(product => !uniqueProductIds.has(product.id)),
          ...data?.data?.plpSearch?.products
        ];

        if (this.products.length > 0) this.totalResponses = data?.data?.plpSearch?.totalCount;
        this.totalPages = Math.ceil(this.products[0]?.totalResponses / this.size);
        this.totalPagesArray = Array.from({ length: this.totalPages }, (_, i) => i + 1);

        this.plpSearchData = data?.data?.plpSearch;
        this.avgRating = this.plpSearchData?.avgRating;
        this.brandsNames = this.plpSearchData?.brandNames;

        this.updateVisibleBrands();

        if (this.isFirstResponse) {
          this.gta = this.plpSearchData?.minPrice;
          this.lte = this.plpSearchData?.maxPrice;
          this.firstGta = this.plpSearchData?.minPrice;
          this.firstLta = this.plpSearchData?.maxPrice;
          this.updateOptions();
          this.isFirstResponse = false;
          this.cdr.detectChanges();
        }

        this.minPrice = this.plpSearchData?.minPrice;
        this.maxPrice = this.plpSearchData?.maxPrice;
        this.totalCounts = this.plpSearchData?.totalCount;
        this.cdr.detectChanges();

        if (this.sessionResponse?.userType !== "GENERIC" || this.sessionResponse?.userType !== undefined) {
          this.setFavItems();
        }
      }

      this.isLoading = false;
      this.allproductsLoaded = true;
    });
  }

  updateVisibleBrands() {
    this.visibleBrands = this.brandsNames.slice(0, this.maxVisibleBrands);
  }

  showMoreBrandFilters() {
    this.maxVisibleBrands += 6;
    this.updateVisibleBrands();
  }


  setselectedBrands(value: string, event: any){
    if(event.checked){
      this.selectedBrands.push(value);
    }else{
      this.selectedBrands= this.selectedBrands?.filter(brand => brand != value);
    }
    this.searchProductsByFilters();
    this.cdr.detectChanges();
  }

  isSelected(brandName: string) {
    return this.selectedBrands.includes(brandName);
  }

  clearSelectedBrands() {
    this.selectedBrands = [];
    this.searchProductsByFilters();
  }

  setPriceValue(min: number, max: number){
    this.min = min;
    this.max = max;
    this.searchProductsByFilters();
  }

  clearPriceValue(){
    this.gta = this.firstGta;
    this.lte = this.firstLta;
    this.min = null;
    this.max = null;
    this.isFirstResponse = true;
    this.searchProductsByFilters();
  }

  setAttrValue(value: string){
    if(this.attrValue?.includes(value)){
      this.attrValue = this.attrValue?.filter(val => val != value);
    }else{
      this.attrValue.push(value);
    }
    localStorage.removeItem('filter-attrs');
    this.searchProductsByFilters();
  }

  clearAttrValue(){
    this.attrValue = [];
    localStorage.removeItem('filter-attrs');
    this.searchProductsByFilters();
  }

  async setFavItems() {
      (await this.wishlistService.getCustomerWishList()).subscribe(
        data => {
          this.userWishlists = data?.data?.getCustomerWishList;
          this.products?.forEach(product => {
            if (this.userWishlists?.map(fav => fav.itemId)?.includes(product.id)) {
              product.addedToWishlist = true;
            }
          })
        }
      );
  }

  async addItemToFovarite(product: ProductResponse) {
    (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
      data => {
        if (data?.data?.addItemToWishList != null) {
          product.addedToWishlist = true;
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
          this.dataService.notifyOther({ refresh: true });
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
  }

  async removeItemFromFovarite(product: ProductResponse) {
    (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
      data => {
        if (data?.data?.removeItemFromWishList != null) {
          product.addedToWishlist = false;
          this.dataService.reset();
          this.dataService.changeCount(-1);
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
  }

  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
}

  toggleView(view: string) {
    if (view === 'grid') {
      this.view = 'grid'
    } else if (view === 'list') {
      this.view = 'list'
    }
  }


  checkingFiltersHide(): void {
    if (window.innerWidth < 992) {
      this.filtersOnMobile = false
    } else {
      this.filtersOnMobile = true
    }
  }

  toggleFiltersMobile(){
    this.filtersOnMobile = !this.filtersOnMobile;
  }

}

--- ./src/app/site-themes/four-theme/four-new-product-listing-page/four-releated-products/four-releated-products.component.ts
+++ ./src/app/site-themes/four-theme/four-new-product-listing-page/four-releated-products/four-releated-products.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit ,SimpleChanges} from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { ActivatedRoute, Router } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { PlpResponse } from 'src/app/models/PlpResponse';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import { environment } from 'src/environments/environment';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../../pdp-quick-view/pdp-quick-view.component';
import { PdpContent } from 'src/app/models/PdpContent';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { DataService } from 'src/app/service/data.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';

\1
  standalone: true,
  selector: 'app-four-releated-products',
  templateUrl: './four-releated-products.component.html',
  styleUrls: ['./four-releated-products.component.scss']
})
export class FourReleatedProductsComponent implements OnInit {
  @Input() data:any
  @Input() categoryId:any
  themeName: string = 'FourthTheme';
  awsUrl = environment.awsKey;
  currency = this.tokenStorage.getCurrency().symbol;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  sliderStyle:string = 'DOTS';
  arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
  arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';
  @Input() pageType!:string;
  plpResponse!: PlpResponse;
  loading: boolean = true;
  errorMessage:string='';
  subdomain = '';
  productResponse: any = {
    relatedProductsEnabled: false,
    relatedProducts : [],
};
pdpContent!: PdpContent;
productPdpResponse: any = {
  relatedProductsEnabled: false,
  relatedProducts: [],
};
userWishlists: WishListResponse[] = [];
sessionResponse!: SessionResponse;
  id: any;
  AlwaysShow: boolean = true;

  constructor(
    private route: ActivatedRoute,
    private themeService: ThemeService,
    private tokenStorage: TokenStorageService,
    private router: Router,private wishlistService: WhishlistService,private dataService: DataService,
    public dialog: MatDialog,private cookieDate: CookieDataServiceService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }
    async ngOnInit() {
      if(environment.env !== 'local'){
        this.subdomain = window.location.hostname;
      } else {
        this.subdomain = this.route.snapshot.params['subdomain'];
      }
      this.route.params.subscribe(async routeParam => {
        const businessURL = await this.tokenStorage.getBusinessURL();
        if (this.subdomain && !businessURL) {
          this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
        }
        const currentUrl = this.router.url;
        if (currentUrl.includes('product')) {
          this.id = this.categoryId;
        } else {
          this.id = routeParam['id']
        }
        await this.loadPlp(this.subdomain, this.id);
        this.getPdpContent(this.subdomain);
      });
      this.getThemeName();
    }

  customOptions: OwlOptions = {
    loop: true,
    margin: 20,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 2
      },
      400: {
        items: 2
      },
      740: {
        items: 3
      },
      940: {
        items: 4
      }
    },
  }

  loadPlp(siteUrl: string, id: number){
    if (id)
      this.themeService.getBusinessProductListingPageContentBySiteUrl(siteUrl, id).subscribe(
        data => {
          if (data?.data?.getBusinessProductListingPageContentBySiteUrl) {
            this.plpResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
            this.productResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
             if(this.sessionResponse?.userType !== "GENERIC" || this.sessionResponse?.userType !== undefined){
              this.setFavItems();
            }
          }
        }
      );
  }

  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
}




  private handleDataError(errors: any[]) {
    if (errors && errors[0] && errors[0]?.errorMessage) {
      this.errorMessage = errors[0]?.errorMessage;
    } else {
      this.errorMessage = "An unknown error occurred.";
    }
  }


  getPdpContent(siteUrl: string) {
    this.themeService.getPdpContentBySiteUrl(siteUrl)
      .subscribe(
        ({ data, errors }) => {
          if (!data || !data.getPdpContent) {
            this.handleDataError(errors)
          }
          if (data && data?.getPdpContentBySiteUrl) {
            this.pdpContent = data?.getPdpContentBySiteUrl;
            this.productPdpResponse = data?.getPdpContentBySiteUrl;
             if(this.sessionResponse?.userType !== "GENERIC" || this.sessionResponse?.userType !== undefined){
              this.setFavItems();
            }
          }
        }
      );
  }

  async setFavItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      data => {
        this.userWishlists = data?.data?.getCustomerWishList;
        this.productResponse?.relatedProducts?.forEach((product: any) => {
          if (this.userWishlists?.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        })
        this.productPdpResponse?.relatedProducts?.forEach((product: any) => {
          if (this.userWishlists.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        })
      }
    );
  }

  async addItemToFovarite(product: ProductResponse) {
  (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
    data => {
      if (data?.data?.addItemToWishList != null) {
        product.addedToWishlist = true;
        this.dataService.reset();
        this.dataService.changeCount(1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
        this.dataService.notifyOther({ refresh: true });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }

  async removeItemFromFovarite(product: ProductResponse) {
  (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
    data => {
      if (data?.data?.removeItemFromWishList != null) {
        product.addedToWishlist = false;
        this.dataService.reset();
        this.dataService.changeCount(-1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }



}

--- ./src/app/site-themes/four-theme/four-new-product-listing-page/four-footer-banner/four-footer-banner.component.ts
+++ ./src/app/site-themes/four-theme/four-new-product-listing-page/four-footer-banner/four-footer-banner.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';

\1
  standalone: true,
  selector: 'app-four-footer-banner',
  templateUrl: './four-footer-banner.component.html',
  styleUrls: ['./four-footer-banner.component.scss']
})
export class FourFooterBannerComponent implements OnInit {
  @Input() data:any
  @Input() activeTheme:string=''
  constructor() { }

  ngOnInit() {
  }

}

--- ./src/app/site-themes/four-theme/four-new-product-listing-page/four-best-selling-products/four-best-selling-products.component.ts
+++ ./src/app/site-themes/four-theme/four-new-product-listing-page/four-best-selling-products/four-best-selling-products.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { ActivatedRoute, Router } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { PlpResponse } from 'src/app/models/PlpResponse';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import { environment } from 'src/environments/environment';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../../pdp-quick-view/pdp-quick-view.component';
import { PdpContent } from 'src/app/models/PdpContent';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';

\1
  standalone: true,
  selector: 'app-four-best-selling-products',
  templateUrl: './four-best-selling-products.component.html',
  styleUrls: ['./four-best-selling-products.component.scss']
})
export class FourBestSellingProductsComponent implements OnInit {
  @Input() data:any
  @Input() categoryId:any
  themeName: string = 'FourthTheme';
  awsUrl = environment.awsKey;
  currency = this.tokenStorage.getCurrency().symbol;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  @Input() pageType!:string;

  plpResponse!: PlpResponse;
  loading: boolean = true;
  errorMessage:string='';
  subdomain = '';
  productResponse: any = {
    bestsellerProductsEnabled: false,
    bestSellerProducts: [],

};
  pdpContent!: PdpContent;
  productPdpResponse: any = {
    bestsellerProductsEnabled: false,
    bestSellerProducts: [],
  };

sliderStyle:string = 'DOTS';
arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';
userWishlists: WishListResponse[] = [];
sessionResponse!: SessionResponse;
AlwaysShow: boolean = true;
  id: any;



  customOptions: OwlOptions = {
    loop: false,
    margin: 20,
    nav: true,
    dots: true,
    navSpeed: 700,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`, `<img src="${this.arrowright}" alt="RIGHT">`],
    responsive: {
      0: {
        items: 2
      },
      400: {
        items: 2
      },
      740: {
        items: 3
      },
      940: {
        items: 4
      }
    },
  }






  constructor(
    private route: ActivatedRoute,
    private themeService: ThemeService,
    private tokenStorage: TokenStorageService,
    private router: Router,private wishlistService: WhishlistService,private dataService: DataService,
    public dialog: MatDialog,private cookieDate: CookieDataServiceService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }
    async ngOnInit() {
      if(environment.env !== 'local'){
        this.subdomain = window.location.hostname;
      } else {
        this.subdomain = this.route.snapshot.params['subdomain'];
      }
      this.route.params.subscribe(async routeParam => {
        const businessURL = await this.tokenStorage.getBusinessURL();
        if (this.subdomain && !businessURL) {
          this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
        }
        const currentUrl = this.router.url;
        if (currentUrl.includes('product')) {
          this.id = this.categoryId;
        } else {
          this.id = routeParam['id']
        }
        await this.loadPlp(this.subdomain, this.id);
        this.getPdpContent(this.subdomain)
      });
      this.getThemeName();
    }




  loadPlp(siteUrl: string, id: number){
    if(id)
      this.themeService.getBusinessProductListingPageContentBySiteUrl(siteUrl, id).subscribe(
        data => {
          if(data?.data?.getBusinessProductListingPageContentBySiteUrl){
            this.plpResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
            this.productResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
            console.log(this.productResponse,"checking plp best selling")
             if(this.sessionResponse?.userType !== "GENERIC" || this.sessionResponse?.userType !== undefined){
              this.setFavItems();
            }
          }
        }
      );
  }


  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
}

  private handleDataError(errors: any[]) {
    if (errors && errors[0] && errors[0]?.errorMessage) {
      this.errorMessage = errors[0]?.errorMessage;
    } else {
      this.errorMessage = "An unknown error occurred.";
    }
  }

  getPdpContent(siteUrl: string) {
    this.themeService.getPdpContentBySiteUrl(siteUrl)
      .subscribe(
        ({ data, errors }) => {
          if (!data || !data?.getPdpContentBySiteUrl) {
            this.handleDataError(errors);
          }
          if (data && data?.getPdpContentBySiteUrl) {
            this.pdpContent = data?.getPdpContentBySiteUrl;
            this.productPdpResponse = data?.getPdpContentBySiteUrl;
             if(this.sessionResponse?.userType !== "GENERIC" || this.sessionResponse?.userType !== undefined){
              this.setFavItems();
            }
          }
        }
      );
  }

  async setFavItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      data => {
        this.userWishlists = data?.data?.getCustomerWishList;
        this.productResponse?.bestSellerProducts?.forEach((product: any) => {
          if (this.userWishlists?.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        })
        this.productPdpResponse?.bestSellerProducts?.forEach((product: any) => {
          if (this.userWishlists?.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        })
      }
    );
  }

  async addItemToFovarite(product: ProductResponse) {
  (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
    data => {
      if (data?.data?.addItemToWishList != null) {
        product.addedToWishlist = true;
        this.dataService.reset();
        this.dataService.changeCount(1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
        this.dataService.notifyOther({ refresh: true });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }

  async removeItemFromFovarite(product: ProductResponse) {
  (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
    data => {
      if (data?.data?.removeItemFromWishList != null) {
        product.addedToWishlist = false;
        this.dataService.reset();
        this.dataService.changeCount(-1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }


}

--- ./src/app/site-themes/four-theme/product-box-list/product-box-list.component.ts
+++ ./src/app/site-themes/four-theme/product-box-list/product-box-list.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { Component, Input, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ActivatedRoute, Router } from '@angular/router';
import { environment } from 'src/environments/environment';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../pdp-quick-view/pdp-quick-view.component';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { DataService } from 'src/app/service/data.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { TranslateService } from '@ngx-translate/core';
import { WishListResponse } from 'src/app/models/WishListResponse';

\1
  standalone: true,
  selector: 'app-product-box-list',
  templateUrl: './product-box-list.component.html',
  styleUrls: ['./product-box-list.component.css']
})
export class ProductBoxListComponent implements OnInit {

  @Input() attrValues!: string[];
  @Input() product: any;
  subdomain = '';
  awsUrl = environment.awsKey;
  businessId = Number(this.tokenStorage.getBusinessID());
  currency = this.tokenStorage.getCurrency()?.symbol;
  ratingValue : number = 0;
  @Input() activeTheme!: string;
  @Input() isQuickView!: boolean | undefined;
  firstTimeCalled = false;

  constructor(private catalogService: CatalogServiceService,
    private route: ActivatedRoute,private router: Router,
    private tokenStorage: TokenStorageService,
    public dialog: MatDialog, private wishlistService: WhishlistService,private dataService: DataService ) { }

  ngOnInit() {
    this.ratingValue = this.roundOffReview(this.product.averageReview);
    this.subdomain = this.route.snapshot.params['subdomain'];
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = '/'+this.subdomain;
    }
  }

  navigateTOProduct(){
    localStorage.setItem('filter-attrs', JSON.stringify(this.attrValues));
    if(environment.env !== 'local'){
      this.router.navigateByUrl('product/' +  this.product.url + '/' + this.product?.id || this.product?.productId);
    } else {
      this.router.navigateByUrl(this.subdomain, '/product/' + this.product.url + '/' + this.product?.id || this.product?.productId);
    }
  }

  // Validations Configurations & Null Pointers
  getProductName(): string {
    return this.product.name || this.product.productName;
  }
  getReviewCount(): number {
    return isNaN(this.product.reviewCount) || this.product.reviewCount === null ? 0 : this.product.reviewCount;
  }
  getReviewValidation() {
    if (isNaN(this.product.averageReview) || this.product.averageReview === null) {
      this.product.averageReview = 0;
    }
  }


  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain,
        attrValues: this.attrValues
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
  }


  async addItemToFovarite(product: ProductResponse) {
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
      data => {
        console.log(product, 'product')
        if (data.data.addItemToWishList != null) {
          console.log(product,"checking product data")
          console.log(data,"checking wishlist data")
          product.addedToWishlist = true;
          this.dataService.reset();
          this.dataService.changeCount(1);
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
          this.dataService.notifyOther({ refresh: true });
          this.firstTimeCalled = false;
        } else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data.errors[0].errorMessage }
          });
        }
      }
    );
    }

    async removeItemFromFovarite(product: ProductResponse) {
      this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
      data => {
        if (data.data.removeItemFromWishList != null) {
          product.addedToWishlist = false;
          this.dataService.reset();
          this.dataService.changeCount(-1);
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
          this.firstTimeCalled = false;
        } else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data.errors[0].errorMessage }
          });
        }
      }
    );
    }

    roundOffReview(review: number): number {
      return Math.round(review);
    }

}

--- ./src/app/site-themes/four-theme/four-theme-checkout/add-card-popup/add-card-popup.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-checkout/add-card-popup/add-card-popup.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';

\1
  standalone: true,
  selector: 'app-add-card-popup',
  templateUrl: './add-card-popup.component.html',
  styleUrls: ['./add-card-popup.component.css']
})
export class AddCardPopupComponent implements OnInit {

  cardType!: string | undefined;
  cardHolderName!: string;
  cardNumber: string = '';
  expiryDate: string = '';
  isDefault: boolean = false;
  expirationDateNotValid: boolean = true;
  cvvNotValid: boolean = false;
  cvv: string = '';
  ccErrorMessage: string = '';
  cardNameValidation: string = '';
  message: string = '';
  invalidCardNumber = false;
  paymentButton: boolean = false;
  constructor(private translate: TranslateService, private dialogRef: MatDialogRef<AddCardPopupComponent>) { }

  ngOnInit() {
  }

  addPayment() {
    this.ccErrorMessage = '';
    this.cardNameValidation = '';
    if(!this.expirationDateNotValid){
      return;
    }
    this.validateInputs();
    if (this.ccErrorMessage) {
      return;
    }
    if(this.cardNameValidation){
      return
    }
    if (this.invalidCardNumber) {
      return;
    }
    const cardNumberWithoutSpaces = this.cardNumber.replace(/\s+/g, '');
    this.paymentButton = true;
    let payment = {cardHolderName: this.cardHolderName, cardNumberWithoutSpaces: cardNumberWithoutSpaces, expiryDate: this.expiryDate,
      cardType: this.cardType!, isDefault: this.isDefault == undefined ? false : this.isDefault,
      cvv: this.cvv}
     this.dialogRef.close({ event: 'close', data: payment});
  }

  hasTwoWords(inputString: string): boolean {
    const pattern = /\b\w+\s\w+\b/;
    return pattern.test(inputString);
  }

  validateInputs() {
    this.ccErrorMessage = '';
    this.cardNameValidation = '';
    if ( !this.cardNumber || !this.expirationDateNotValid || this.cardType == 'no_value' || !this.cvv) {
      this.ccErrorMessage = 'PLEASE_FILL_IN_ALL_REQUIRED_FIELDS';
      return;
    }
    if (!this.hasTwoWords(this.cardHolderName) || this.cardHolderName === undefined) {
      this.cardNameValidation = 'CARD_HOLDER_NAME_SHOULD_BE_FULLNAME'
      return;
    }
    if (!this.validateExpirationDate(this.expiryDate)) {
      this.ccErrorMessage = this.translate.instant('EXPIRY_DATE_NOT_VALID')
      return;
    }
    if(this.cardNumber?.length === 0 || this.cardNumber?.length < 13 || this.cardNumber?.length > 19){
      this.invalidCardNumber = true;
      return;
    }
  }

  resetMessages() {
    setTimeout(() => {
      this.ccErrorMessage = '';
      this.message = '';
      this.cardNameValidation = '';
    }, 3000);
  }

  onExpirationDateInputChange(event: any) {
    let inputVal: string = event.target.value;
    inputVal = inputVal?.replace(/\D/g, '');
    if (inputVal.length > 6) {
      inputVal = inputVal?.substring(0, 6);
    }
    if (inputVal.length > 2) {
      inputVal = inputVal?.substring(0, 2) + '/' + inputVal?.substring(2);
    }
    this.expiryDate = inputVal;
    this.expirationDateNotValid = this.validateExpirationDate(inputVal);
  }

  validateExpirationDate(expirationDateString: string): boolean {
    const currentDate = new Date();
    const expirationDateComponents = expirationDateString.split('/');
    if (expirationDateComponents.length !== 2) {
      return false;
    }
    const expMonth = parseInt(expirationDateComponents[0], 10);
    let expYear = parseInt(expirationDateComponents[1], 10);

    if(expYear.toString().length < 4){
      return false;
    }
    if (isNaN(expMonth) || isNaN(expYear)) {
      return false;
    }
    if (expirationDateComponents[1].length === 2) {
      expYear = expYear + 2000;
    }
    if (expYear < currentDate.getFullYear()) {
      return false;
    }
    if (expYear === currentDate.getFullYear() && expMonth <= currentDate.getMonth()) {
      return false;
    }
    return true;
  }

  checkCardType(){
    this.cardType = creditCardType(this.cardNumber);
  }

  formatCardNumber(event: any) {
    let inputVal: string = event.target.value;
    inputVal = inputVal?.replace(/\D/g, '');
    inputVal = inputVal?.slice(0, 19);
    inputVal = inputVal?.replace(/(\d{4})(?=\d)/g, '$1 ');
    this.cardNumber = inputVal;
    this.checkCardType();
  }
}

export function creditCardType(cc: string) {
  cc = cc.replace(/\s/g, '');
  let amex = new RegExp('^3[47][0-9]{13}$');
  let visa = new RegExp('^4[0-9]{12}(?:[0-9]{3})?$');
  let cup = new RegExp('^62[0-9]{14}$');
  let mastercard = new RegExp('^5[1-5][0-9]{14}$');
  let mastercard2 = new RegExp('^2[2-7][0-9]{14}$');
  let disco1 = new RegExp('^6011[0-9]{12}$');
  let disco2 = new RegExp('^64[4-9][0-9]{13}$');
  let disco3 = new RegExp('^65[0-9]{14}$');
  let diners = new RegExp('^3(?:0[0-5]|[68][0-9])[0-9]{11}$');
  let jcb = new RegExp('^35(?:2[89]|[3-8][0-9])[0-9]{12}$');
  let elo = new RegExp('^((636368)|(438935)|(504175)|(451416)|(509048)|(509067)|(509049)|(509069)|(509050)|(509074)|(509068)|(509040)|(509045)|(509060)|(509057)|(509042)|(509046)|(509066)|(509047)|(509062)|(509040)|(509043)|(509064)|(509040))\\d{10,12}$');

  if (visa.test(cc)) {
    return 'VISA';
  }
  if (amex.test(cc)) {
    return 'AMEX';
  }
  if (mastercard.test(cc) || mastercard2.test(cc)) {
    return 'MASTERCARD';
  }
  if (disco1.test(cc) || disco2.test(cc) || disco3.test(cc)) {
    return 'DISCOVER';
  }
  if (diners.test(cc)) {
    return 'DINERS';
  }
  if (jcb.test(cc)) {
    return 'JCB';
  }
  if (cup.test(cc)) {
    return 'CHINA_UNION_PAY';
  }
  if (elo.test(cc)) {
    return 'ELO';
  }
  return undefined;
}

--- ./src/app/site-themes/four-theme/four-theme-checkout/AddBillingAddressPopup/AddBillingAddressPopup.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-checkout/AddBillingAddressPopup/AddBillingAddressPopup.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { AddressService } from 'src/app/service/Address.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-AddBillingAddressPopup',
  templateUrl: './AddBillingAddressPopup.component.html',
  styleUrls: ['./AddBillingAddressPopup.component.css']
})
export class AddBillingAddressPopupComponent implements OnInit {
  AddressInstructions: boolean = false;
  order!: OrderResponse;
  errorMessage: any;
  countries: any[] = [];
  cities: any[] = [];
  states: any[] = [];
  selectedState : any;
  selectedCountry: any;
  selectedCity: any;
  addAddressSuccessful: boolean = false;
  countryName: string = '';
  stateName: string = '';
  cityName: string = '';
  sessionResponse!: SessionResponse;
  isFazealUser: boolean = false;
  shortName: string = '';
  AddressOnMap: boolean = false;
  addressInstruction: string = '';
  addressLine1: string = '';
  addressLine2: string = '';
  addAddressFail: boolean = false;
  addressButton: boolean = false;
  address!: any;
  user = this.tokenStorageService.getUser();
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  postalCode: any;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog, private cdr: ChangeDetectorRef,
  private addressService: AddressService,private cookieService: CookieDataServiceService,
  private tokenStorageService: TokenStorageService, public dialogRef: MatDialogRef<AddBillingAddressPopupComponent>) {
    if(this.businessId &&  cookieService.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieService.getCookie(this.businessId!.toString()));
    }
  }

  async ngOnInit() {
    await this.loadCountries();
  }

  async loadCountries() {
    await this.addressService.getAllCountriesForBusiness().subscribe(data => {
       this.countries = data?.data?.getAllCountries;
       this.cdr.detectChanges();
     });
   }

   async loadStates(countryId: number) {
     await this.addressService.getAllStatesOfCountry(countryId).subscribe(data => {
        this.states = data?.data?.getAllStatesOfCountry;
        this.cdr.detectChanges();
      });
    }

    async loadCities(stateId: number) {
     await this.addressService.getAllCitiesOfState(stateId).subscribe(data => {
        this.cities = data?.data?.getAllCitiesOfState;
        this.cdr.detectChanges();
      });
    }

    onCountryChange(countryId: number) {
     this.selectedCountry = countryId;
     this.selectedState = null;
     this.selectedCity = null;
     this.stateName = '';
     this.cityName = '';
     this.states = [];
     this.cities = [];
     const country = this.countries.find(c => c.id === countryId);
     this.countryName = country ? country.name : '';
     this.shortName = country ? country.shortName : '';
     if (countryId) {
       this.loadStates(countryId);
     }
   }

   onStateChange(stateId: number) {
     this.selectedState = stateId;
     this.selectedCity = null;
     this.cityName = '';
     this.cities = [];
     const state = this.states.find(s => s.id === stateId);
     this.stateName = state ? state.name : '';
     if (stateId) {
       this.loadCities(stateId);
     }
   }

   onCityChange(cityId: any) {
     this.selectedCity = cityId.name;
     const city = this.cities.find(c => c.id === cityId.id);
     this.cityName = city ? city.name : '';
   }


  saveUserAddress() {
    console.log(this.stateName, this.selectedCity, this.countryName, this.shortName, this.postalCode, this.addressLine1)
    this.addressButton = true;
    const addressInstruction = this.addressInstruction ? this.addressInstruction?.trim() : '';
    const addressLine1 = this.addressLine1 ? this.addressLine1?.trim() : '';
    const addressLine2 = this.addressLine2 ? this.addressLine2?.trim() : '';
    const country = this.countryName ? this.countryName?.trim() : '';
    const shortName = this.shortName ? this.shortName?.trim() : '';
    const state = this.stateName ? this.stateName?.trim() : '';
    const city = this.cityName ? this.cityName?.trim() : '';
    const postalCode = this.postalCode ? this.postalCode?.trim() : '';
    if (
      (!country ||
      !addressLine1 ||
      !state ||
      !city ||
      !postalCode)
    ) {
      this.addAddressFail = true;
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: 'ALL_ADDRESS_INFO_REQUIRED' }
      });
      this.addressButton = false;
      return;
    }
    if(this.sessionResponse.userType === 'FAZEAL_REGISTERED'){
      this.isFazealUser = true;
    } else {
      this.isFazealUser = false;
    }
    this.addressButton = true;
    this.address = { addressDescription: 'description',addressLine1: addressLine1, addressLine2: addressLine2 !== undefined || addressLine2 !== null ? addressLine2 : '', shortName: shortName, country: country, state:state, city:city,
      zipCode: postalCode, defaultBilling: true, defaultShipping: false, userId: this.user ? this.user.id : null, businessId: this.businessId,
      fazealUserId: this.isFazealUser, addressInstruction }
    this.addAddressSuccessful = true;
    this.addAddressFail = false;
    this.dialogRef.close({ event: 'close', data: this.address });
    this.dialog.open(SucessmsgPopupComponent, {
      backdropClass: 'notificationmodal-popup-sucess',
        data: { title: 'SUCCESS', message: 'ADDRESS_SUCCESS_ONLY'
        }
    });
  }


}

--- ./src/app/site-themes/four-theme/four-theme-checkout/pick-order-person-popup/pick-order-person-popup.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-checkout/pick-order-person-popup/pick-order-person-popup.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Country } from 'src/app/models/country';
import { AddressService } from 'src/app/service/Address.service';
import { firstValueFrom } from 'rxjs/internal/firstValueFrom';
import { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatDialogRef } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-pick-order-person-popup',
  templateUrl: './pick-order-person-popup.component.html',
  styleUrls: ['./pick-order-person-popup.component.css']
})
export class PickOrderPersonPopupComponent implements OnInit {

  phoneCode: string = '1';
  searchText: string = '';
  countries: Country[] = [];
  pickupDetails!: FormGroup;

  constructor(public addressService: AddressService,private cdr: ChangeDetectorRef,private fb: FormBuilder,private dialogRef: MatDialogRef<PickOrderPersonPopupComponent>) { }

 async ngOnInit() {
  this.pickupDetails = this.fb.group({
    firstName: ['', [Validators.required]],
    lastName: ['', [Validators.required]],
    email: ['', [Validators.required]],
    phoneNumber: ['', [Validators.required]]
  });
  await this.loadCountries();
  }

  get getControl(): { [key: string]: AbstractControl; } {
    return this.pickupDetails.controls;
  }

  savePerson(){
    console.log(this.pickupDetails.valid, 'savePerson');
    if(this.pickupDetails.valid){
      const firstName = this.pickupDetails.get('firstName')!.value;
      const lastName = this.pickupDetails.get('lastName')!.value;
      const email = this.pickupDetails.get('email')!.value;
      const phoneNumber = this.pickupDetails.get('phoneNumber')!.value;
      let personDetails = {firstName: firstName, lastName: lastName, email: email, phoneNumber: phoneNumber}
      this.dialogRef.close({ event: 'close', data: personDetails });
    }

  }

  selectCode(code: string) {
    this.phoneCode = code;
  }

  onMenuClosedCountry() {
    this.searchText = '';
  }

  onMenuItemClick(event: MouseEvent): void {
    event.stopPropagation();
  }


  async loadCountries() {
    const response = await firstValueFrom(this.addressService.getAllCountriesForBusiness())
    this.countries = response?.data?.getAllCountries;
    this.cdr.detectChanges();
  }


}

--- ./src/app/site-themes/four-theme/four-theme-checkout/edit-shipping-address/edit-shipping-address.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-checkout/edit-shipping-address/edit-shipping-address.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { AddressService } from 'src/app/service/Address.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-edit-shipping-address',
  templateUrl: './edit-shipping-address.component.html',
  styleUrls: ['./edit-shipping-address.component.css']
})
export class EditShippingAddressComponent implements OnInit {
  userInfo: any = this.tokenStorageService.getUser();
  message: any;
  errormessage: any;
  addressDesc!: string;
  route!: string;
  addressLine2!: string;
  countryName: any;
  stateName: any;
  cityName: any;
  zipCode!: string;
  streetNumber!: string;
  addressId!:number
  addAddressSuccessful!: boolean;
  addAddressFail!: boolean;
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  addressButton: boolean = false;
  errorMessage: any;
  countries: any[] = [];
  cities: any[] = [];
  states: any[] = [];
  selectedState : any;
  selectedCountry: any;
  selectedCity: any;
  address: any;
  AddressInstructions: boolean = true;
  shortName: string = '';


  constructor(private dialog: MatDialog, private addressService: AddressService, private tokenStorageService: TokenStorageService,
    public dialogRef: MatDialogRef<EditShippingAddressComponent>,private cdr: ChangeDetectorRef, @Inject(MAT_DIALOG_DATA) public data: any) {

     }

  async ngOnInit() {
    this.address = this.data;
    await this.getAllCountries();
    this.selectedCountry = this.countries?.filter((e) => {
      return e.name == this.data?.country;
    })[0];
    await this.getAllStatesOfCountry(this.selectedCountry?.id);
    this.selectedState = this.states?.filter((e) => {
      return e.name == this.data?.state;
    })[0];
    await this.getAllCitiesOfState(this.selectedState?.id);
    this.selectedCity = this.cities?.filter((e) => {
      return e.name == this.data?.city;
    })[0];
  }

  updateAddress() {
    this.address = { addressDescription: '', addressLine1: this.address.addressLine1, addressLine2: this.address.addressLine2 !== undefined || this.address.addressLine2 !== null ? this.address.addressLine2 : '',
       country: this.selectedCountry.name, state:this.selectedState.name, city:this.selectedCity.name,
      zipCode: this.address.zipCode, defaultBilling: true, defaultShipping: false, userId: this.userInfo ? this.userInfo.id : null, businessId: this.businessId,
      fazealUserId: false, longitude: null, latitude: null, addressInstruction: this.address.addressInstruction }
      this.addAddressSuccessful = true;
      this.addAddressFail = false;
      this.dialogRef.close({ event: 'close', data: this.address });
      this.dialog.open(SucessmsgPopupComponent, {
        backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'ADDRESS_UPDATE_SUCCESS_ONLY'
          }
      });
  }

  public async getAllCountries() {
    await this.addressService.getAllCountriesForBusiness().toPromise().then(
      data => {
        if (data?.data?.getAllCountries == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.countries = data?.data?.getAllCountries;
      }
    )
  }

  private async getAllStatesOfCountry(id : number) {
    await this.addressService.getAllStatesOfCountry(id).toPromise().then(
      data => {
        if (data?.data?.getAllStatesOfCountry == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.states = data?.data?.getAllStatesOfCountry;
      }
    );
  }
  private async getAllCitiesOfState(id : number) {
    await this.addressService.getAllCitiesOfState(id).toPromise().then(
      data => {
        if (data?.data?.getAllCitiesOfState == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.cities = data?.data?.getAllCitiesOfState;
      }
    );
  }

 countrySelected(country: any) {
  this.selectedCountry = country;
  this.selectedState = null;
  this.selectedCity = null;

  this.countryName = country?.name || '';
  this.shortName = country?.shortName || '';

  if (country?.id) {
    this.getAllStatesOfCountry(country.id);
  }
}

 stateSelected(state: any) {
  this.selectedState = state;
  this.selectedCity = null;

  if (state?.id) {
    this.getAllCitiesOfState(state.id);
  }
}

}

--- ./src/app/site-themes/four-theme/four-theme-checkout/finix-payment-checkout/finix-payment-checkout.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-checkout/finix-payment-checkout/finix-payment-checkout.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit, AfterViewInit, ElementRef, ViewChild, Output, EventEmitter, Input } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { environment } from 'src/environments/environment';

declare var Finix: any; // Declare Finix for TypeScript

\1
  standalone: true,
  selector: 'app-finix-payment-checkout',
  templateUrl: './finix-payment-checkout.component.html',
  styleUrls: ['./finix-payment-checkout.component.css']
})
export class FinixPaymentCheckoutComponent implements OnInit, AfterViewInit {
  @ViewChild('finixFormContainer', { static: false }) finixFormContainer!: ElementRef;
  @Input() finixApplicationId!: string;
  @Input() merchantId!: string;
  @Output() tokenEmitter = new EventEmitter<any>();
  @Output() finixSessionKeyEmitter = new EventEmitter<any>();
  mode: string = '';

  constructor() { }

  ngOnInit() {}

  ngAfterViewInit() {
    if (typeof Finix === 'undefined') {
      console.error('Finix SDK not loaded. Ensure it is included in index.html');
      return;
    }
    if(environment.env === 'prod'){
      this.mode = 'live';
    } else {
      this.mode = 'sandbox';
    }
    const FinixAuth = Finix.Auth(this.mode, this.merchantId);
    const form = Finix.CardTokenForm('finix-form', {
      showAddress: true,
      onSubmit: () => {
        form.submit(this.mode, this.finixApplicationId, (err: any, res: any) => {
          if (err) {
            console.error('Error:', err);
            return;
          }
          const token = res?.data?.id;
          const sessionKey = FinixAuth.getSessionKey();
          this.tokenEmitter.emit(res.data);
          this.finixSessionKeyEmitter.emit(sessionKey);
          console.log(res,"checking response of token")
        });
      }
    });
  }
}

--- ./src/app/site-themes/four-theme/four-theme-checkout/BillingAddressPopup/BillingAddressPopup.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-checkout/BillingAddressPopup/BillingAddressPopup.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { AddBillingAddressPopupComponent } from '../AddBillingAddressPopup/AddBillingAddressPopup.component';

\1
  standalone: true,
  selector: 'app-BillingAddressPopup',
  templateUrl: './BillingAddressPopup.component.html',
  styleUrls: ['./BillingAddressPopup.component.css']
})
export class BillingAddressPopupComponent implements OnInit {

  constructor(public dialog: MatDialog) { }

  ngOnInit() {
  }

  addBillingAddressPopup() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open( AddBillingAddressPopupComponent, { panelClass: 'modal-x-medium-width' });
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.data && result?.data !== undefined) {
        console.log(result?.data, 'result?.data')
      }
    });
  }

}

--- ./src/app/site-themes/four-theme/four-theme-checkout/storehours/storehours.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-checkout/storehours/storehours.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-storehours',
  templateUrl: './storehours.component.html',
  styleUrls: ['./storehours.component.css']
})
export class StorehoursComponent implements OnInit {
  businessHours: any[] = [];

  constructor(@Inject(MAT_DIALOG_DATA) public data: any ) { }

  ngOnInit() {
    this.businessHours = this.data;
  }

  getFormattedTime(hours: string, minutes: string, amPm: string): string {
    const hour = parseInt(hours, 10);
    const minute = parseInt(minutes, 10);
    const formattedMinute = minute < 10 ? `0${minute}` : minute;
    return `${hour}:${formattedMinute} ${amPm}`;
  }

}

--- ./src/app/site-themes/four-theme/four-theme-checkout/add-shipping-address/add-shipping-address.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-checkout/add-shipping-address/add-shipping-address.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { Country } from 'src/app/models/country';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { Address } from 'src/app/models/user';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { AddressService } from 'src/app/service/Address.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-add-shipping-address',
  templateUrl: './add-shipping-address.component.html',
  styleUrls: ['./add-shipping-address.component.css']
})
export class AddShippingAddressComponent implements OnInit {


  AddressInstructions: boolean = false;
  AddressOnMap: boolean = false;
  addressInstruction: string = '';
  addressLine1: string = '';
  addressLine2: string = '';
  zipCode: string = '';
  addAddressFail: boolean = false;
  addAddressSuccessful: boolean = false;
  defaultBillingOnCreateAddress: boolean = false;
  defaultShippingOnCreateAddress: boolean = false;
  address!: any;
  user = this.tokenStorageService.getUser();
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  addressButton: boolean = false;
  countries: Country[] = [];
  states: any[] = [];
  cities: any[] = [];
  selectedCountry: number | null = null;
  selectedState: number | null = null;
  selectedCity: number | null = null;
  countryName: string = '';
  stateName: string = '';
  cityName: string = '';
  sessionResponse!: SessionResponse;
  isFazealUser: boolean = false;
  latitude: number = 0;
  longitude: number = 0;
  zoom: number = 5;
  // searchResults: google.maps.places.PlaceResult[] = [];
  markerLatitude: number = 0;
  markerLongitude: number = 0;
  mapClickListener: any
  mappp: any;
  searchText: string = '';
  shortName: string = '';


  constructor(private dialog: MatDialog, private addressService: AddressService, private tokenStorageService: TokenStorageService,
    public dialogRef: MatDialogRef<AddShippingAddressComponent>,private cdr: ChangeDetectorRef,private cookieService: CookieDataServiceService) {
      if(this.businessId &&  cookieService.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieService.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    await this.loadCountries();
  }

  async loadCountries() {
   await this.addressService.getAllCountriesForBusiness().subscribe(data => {
      this.countries = data?.data?.getAllCountries;
      this.cdr.detectChanges();
    });
  }

  async loadStates(countryId: number) {
    await this.addressService.getAllStatesOfCountry(countryId).subscribe(data => {
       this.states = data?.data?.getAllStatesOfCountry;
       this.cdr.detectChanges();
     });
   }

   async loadCities(stateId: number) {
    await this.addressService.getAllCitiesOfState(stateId).subscribe(data => {
       this.cities = data?.data?.getAllCitiesOfState;
       this.cdr.detectChanges();
     });
   }

   onCountryChange(countryId: number) {
    this.selectedCountry = countryId;
    this.selectedState = null;
    this.selectedCity = null;
    this.stateName = '';
    this.cityName = '';
    this.states = [];
    this.cities = [];
    const country = this.countries.find(c => c.id === countryId);
    this.countryName = country ? country.name : '';
    this.shortName = country ? country.shortName : '';
    if (countryId) {
      this.loadStates(countryId);
    }
  }

  onStateChange(stateId: number) {
    this.selectedState = stateId;
    this.selectedCity = null;
    this.cityName = '';
    this.cities = [];
    const state = this.states.find(s => s.id === stateId);
    this.stateName = state ? state.name : '';
    if (stateId) {
      this.loadCities(stateId);
    }
  }

  onCityChange(cityId: number) {
    this.selectedCity = cityId;
    const city = this.cities.find(c => c.id === cityId);
    this.cityName = city ? city.name : '';
  }

  saveUserAddress() {
    this.addressButton = true;
    const addressInstruction = this.addressInstruction ? this.addressInstruction?.trim() : '';
    const addressLine1 = this.addressLine1 ? this.addressLine1?.trim() : '';
    const addressLine2 = this.addressLine2 ? this.addressLine2?.trim() : '';
    const country = this.countryName ? this.countryName?.trim() : '';
    const shortName = this.shortName ? this.shortName?.trim() : '';
    const state = this.stateName ? this.stateName?.trim() : '';
    const city = this.cityName ? this.cityName?.trim() : '';
    const zipCode = this.zipCode ? this.zipCode?.trim() : '';
    if (
      (!country ||
      !addressLine1 ||
      !state ||
      !city ||
      !zipCode)
    ) {
      this.addAddressFail = true;
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: 'ALL_ADDRESS_INFO_REQUIRED' }
      });
      this.addressButton = false;
      return;
    }
    if(this.sessionResponse.userType === 'FAZEAL_REGISTERED'){
      this.isFazealUser = true;
    } else {
      this.isFazealUser = false;
    }
    this.addressButton = true;
    this.address = { addressDescription: 'description',addressLine1: addressLine1, addressLine2: addressLine2 !== undefined || addressLine2 !== null ? addressLine2 : '', shortName: shortName, country: country, state:state, city:city,
      zipCode: zipCode, defaultBilling: false, defaultShipping: true, userId: this.user ? this.user.id : null, businessId: this.businessId,
      fazealUserId: this.isFazealUser, longitude: this.longitude, latitude: this.latitude, addressInstruction }
    this.addAddressSuccessful = true;
    this.addAddressFail = false;
    this.dialogRef.close({ event: 'close', data: this.address });
    this.dialog.open(SucessmsgPopupComponent, {
      backdropClass: 'notificationmodal-popup-sucess',
        data: { title: 'SUCCESS', message: 'ADDRESS_SUCCESS_ONLY'
        }
    });
  }

}

--- ./src/app/site-themes/four-theme/four-theme-checkout/shipping-address-popup/shipping-address-popup.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-checkout/shipping-address-popup/shipping-address-popup.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { AddShippingAddressComponent } from '../add-shipping-address/add-shipping-address.component';

\1
  standalone: true,
  selector: 'app-shipping-address-popup',
  templateUrl: './shipping-address-popup.component.html',
  styleUrls: ['./shipping-address-popup.component.css']
})
export class ShippingAddressPopupComponent implements OnInit {

  constructor(public dialog: MatDialog) { }

  ngOnInit() {
  }

  addshippingAddressPopup() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(AddShippingAddressComponent, { panelClass: 'modal-x-medium-width' });
  }




}

--- ./src/app/site-themes/four-theme/four-theme-checkout/editbillingaddresspopup/editbillingaddresspopup.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-checkout/editbillingaddresspopup/editbillingaddresspopup.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { AddressService } from 'src/app/service/Address.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-editbillingaddresspopup',
  templateUrl: './editbillingaddresspopup.component.html',
  styleUrls: ['./editbillingaddresspopup.component.css']
})
export class EditbillingaddresspopupComponent implements OnInit {
  userInfo: any = this.tokenStorageService.getUser();
  message: any;
  errormessage: any;
  addressDesc!: string;
  route!: string;
  addressLine2!: string;
  countryName: any;
  stateName: any;
  cityName: any;
  zipCode!: string;
  streetNumber!: string;
  addressId!:number
  addAddressSuccessful!: boolean;
  addAddressFail!: boolean;
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  addressButton: boolean = false;
  errorMessage: any;
  countries: any[] = [];
  cities: any[] = [];
  states: any[] = [];
  selectedState : any;
  selectedCountry: any;
  selectedCity: any;
  address: any;


  constructor(private dialog: MatDialog, private addressService: AddressService, private tokenStorageService: TokenStorageService,
    public dialogRef: MatDialogRef<EditbillingaddresspopupComponent>,private cdr: ChangeDetectorRef, @Inject(MAT_DIALOG_DATA) public data: any) {

     }

  async ngOnInit() {
    this.address = this.data;
    await this.getAllCountries();
    this.selectedCountry = this.countries?.filter((e) => {
      return e.name == this.data?.country;
    })[0];
    await this.getAllStatesOfCountry(this.selectedCountry?.id);
    this.selectedState = this.states?.filter((e) => {
      return e.name == this.data?.state;
    })[0];
    await this.getAllCitiesOfState(this.selectedState?.id);
    this.selectedCity = this.cities?.filter((e) => {
      return e.name == this.data?.city;
    })[0];
  }

  updateAddress() {
    this.address = { addressDescription: '', addressLine1: this.address.addressLine1, addressLine2: this.address.addressLine2 !== undefined || this.address.addressLine2 !== null ? this.address.addressLine2 : '',
       country: this.selectedCountry.name, state:this.selectedState.name, city:this.selectedCity.name,
      zipCode: this.address.zipCode, defaultBilling: true, defaultShipping: false, userId: this.userInfo ? this.userInfo.id : null, businessId: this.businessId,
      fazealUserId: false, longitude: null, latitude: null, addressInstruction: this.address.addressInstruction }
      this.addAddressSuccessful = true;
      this.addAddressFail = false;
      this.dialogRef.close({ event: 'close', data: this.address });
      this.dialog.open(SucessmsgPopupComponent, {
        backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'ADDRESS_UPDATE_SUCCESS_ONLY'
          }
      });
  }

  public async getAllCountries() {
    await this.addressService.getAllCountriesForBusiness().toPromise().then(
      data => {
        if (data?.data?.getAllCountries == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.countries = data?.data?.getAllCountries;
      }
    )
  }

  private async getAllStatesOfCountry(id : number) {
    await this.addressService.getAllStatesOfCountry(id).toPromise().then(
      data => {
        if (data?.data?.getAllStatesOfCountry == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.states = data?.data?.getAllStatesOfCountry;
      }
    );
  }
  private async getAllCitiesOfState(id : number) {
    await this.addressService.getAllCitiesOfState(id).toPromise().then(
      data => {
        if (data?.data?.getAllCitiesOfState == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.cities = data?.data?.getAllCitiesOfState;
      }
    );
  }

  countrySelected(country: any) {
    if (country && country.id) {
      this.cdr.detectChanges();
      this.getAllStatesOfCountry(country.id);
    }
  }

  stateSelected(state : any){
    if(state && state.id){
      this.selectedState = state;
      this.getAllCitiesOfState(state.id);
      this.cdr.detectChanges();
    }
  }

}

--- ./src/app/site-themes/four-theme/four-theme-cancel-order/four-theme-cancel-order.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-cancel-order/four-theme-cancel-order.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Options } from '@angular-slider/ngx-slider';
\1
  standalone: true,
  selector: 'app-four-theme-cancel-order',
  templateUrl: './four-theme-cancel-order.component.html',
  styleUrls: ['./four-theme-cancel-order.component.scss']
})
export class FourThemeCancelOrderComponent implements OnInit {
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  constructor() { }

  ngOnInit(): void {
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

}

--- ./src/app/site-themes/four-theme/four-theme-write-edit-reviews/four-theme-write-edit-reviews.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-write-edit-reviews/four-theme-write-edit-reviews.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Options } from '@angular-slider/ngx-slider';

\1
  standalone: true,
  selector: 'app-four-theme-write-edit-reviews',
  templateUrl: './four-theme-write-edit-reviews.component.html',
  styleUrls: ['./four-theme-write-edit-reviews.component.scss']
})
export class FourThemeWriteEditReviewsComponent implements OnInit {
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  constructor() { }

  ngOnInit(): void {
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

}

--- ./src/app/site-themes/four-theme/track-order/track-order.component.ts
+++ ./src/app/site-themes/four-theme/track-order/track-order.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MatDialog } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-track-order',
  templateUrl: './track-order.component.html',
  styleUrls: ['./track-order.component.scss']
})
export class TrackOrderComponent implements OnInit {

  businessOrderId: string = '';
  email: string = '';
  subdomain: string = '';
  user = this.tokenStorage.getUser();
  businessId = Number(this.tokenStorage.getBusinessID()!);
  sessionResponse!: SessionResponse;

  constructor(public shoppingCart: ShoppingCartService,private drawerControlService: DrawerControlService, private route: ActivatedRoute, private router: Router, public dialog: MatDialog,
    private tokenStorage: TokenStorageService,private cookieDate: CookieDataServiceService,
  ) {
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }
  }

  ngOnInit(): void {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }


  async getOrderTracking(){
      (await this.shoppingCart.getOrderTracking(this.businessOrderId.trim(), this.email.trim())).subscribe(
        data => {
          if(data?.errors){
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: '', message: data?.errors[0]?.errorMessage}
            });
            return;
          }
          if(data?.data?.getOrderTracking){
            if(this.sessionResponse.userType !== 'FAZEAL_REGISTERED' && this.sessionResponse.userType !== 'STORE_REGISTERED'){
              this.sessionResponse = new SessionResponse();
              this.sessionResponse.id = 1;
              this.sessionResponse.userType = 'GUEST';
              this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
            }
            const order = data?.data?.getOrderTracking;
            const orderId = data?.data?.getOrderTracking.id;
            if (environment.env !== 'local') {
              this.subdomain = '';
            }
            const url = `/${this.subdomain}/order-details/${orderId}`;
            this.tokenStorage.saveOrderForOrderDetails(order);
            this.router.navigateByUrl(url, {state: {order: order, orderhistory: true}});
          }
        }
      )
  }

  openUserProfileDrawerAndDropdown() {
    this.drawerControlService.triggerOpenDrawer();
    this.drawerControlService.triggerOpenDropdown();
  }


}

--- ./src/app/site-themes/four-theme/no-domain/no-domain.component.ts
+++ ./src/app/site-themes/four-theme/no-domain/no-domain.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { environment } from 'src/environments/environment';
import { TranslateService } from '@ngx-translate/core';
import { TranslateSiteService } from 'src/app/service/translate-site.service';

\1
  standalone: true,
  selector: 'app-no-domain',
  templateUrl: './no-domain.component.html',
  styleUrls: ['./no-domain.component.css']
})
export class NoDomainComponent implements OnInit {

  businessUrl = environment.landingUrl;
  constructor(public translate: TranslateService,
    public translateSiteService:TranslateSiteService) { }

  ngOnInit() {

    if (!this.translate.currentLang) {
      this.translate.use('en');
    }

  }

}

--- ./src/app/site-themes/four-theme/four-theme-reviews/four-theme-reviews.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-reviews/four-theme-reviews.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Options } from '@angular-slider/ngx-slider';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { EditReviewModalComponent } from '../edit-review-modal/edit-review-modal.component';
import { Router } from '@angular/router';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { environment } from 'src/environments/environment';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';
import { ReviewService } from 'src/app/service/review.service';

\1
  standalone: true,
  selector: 'app-four-theme-reviews',
  templateUrl: './four-theme-reviews.component.html',
  styleUrls: ['./four-theme-reviews.component.scss']
})
export class FourThemeReviewsComponent implements OnInit {
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  order!: OrderResponse;
  awsUrl = environment.awsKey;
  currency = this.tokenstorage.getCurrency()?.symbol;
  orderPrefix = this.tokenstorage.getOrderFormat()?.prefix;
  orderSuffix = this.tokenstorage.getOrderFormat()?.suffix;
  subdomain = this.tokenstorage.getBusinessURL();
  storeName = this.tokenstorage.getBStoreName();

  constructor(
    private dialog:MatDialog,
    private router: Router,
    public tokenstorage: TokenStorageService,
    private reviewService : ReviewService
    ) {
    const navigation = this.router.getCurrentNavigation();
    if (navigation && navigation.extras.state) {
      this.order = navigation.extras.state['data'].order;
      if(this.order){
        this.order.orderDetails.forEach(async item => {
          (await this.reviewService.getReviewByProductAndCustomer(item.product.id)).subscribe(
            data => {
              if(data?.data?.getReviewByProductIdAndCustomerIdAndUserType != null){
                item.action='EDIT';
              }else{
                item.action='ADD';
              }
            }
          );
        });
      }
    }
  }
  ngOnInit(): void {

  }



  addreviewmodal(item: OrderDetailResponse){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'edit_review_modal';
    dialogConfig.data = {item: item, action: 'ADD'};
    this.dialog.open(EditReviewModalComponent, dialogConfig)
    .afterClosed().subscribe(
      data => {
        if(data){
          item.action = 'EDIT';
        }
      }
    );
  }

  editreviewmodal(item: OrderDetailResponse){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'edit_review_modal';
    dialogConfig.data = {item: item, action: 'EDIT'};
    this.dialog.open(EditReviewModalComponent, dialogConfig)
    .afterClosed().subscribe(
      data => {
        if(data){
          item.action = 'EDIT';
        }
      }
    );
  }

}

--- ./src/app/site-themes/four-theme/custom-paginator/custom-paginator.component.ts
+++ ./src/app/site-themes/four-theme/custom-paginator/custom-paginator.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { PageEvent } from '@angular/material/paginator';

\1
  standalone: true,
  selector: 'app-custom-paginator',
  templateUrl: './custom-paginator.component.html',
  styleUrls: ['./custom-paginator.component.css']
})
export class CustomPaginatorComponent implements OnInit, OnChanges {

  @Input() length: number = 0;
  @Input() pageSize: number = 10;
  @Input() pageIndex: number = 0;
  @Output() page = new EventEmitter<PageEvent>();
  pages: number[] = [];

  constructor() { }


  ngOnInit() {
  }

  ngOnChanges() {
    if (this.length && this.pageSize && this.pageSize > 0) {
      const totalPages = Math.ceil(this.length / this.pageSize);
      this.pages = Array(totalPages).fill(0).map((x, i) => i);
    } else {
      this.pages = [];
    }
  }

  hasPrevPage(): boolean {
    return this.pageIndex > 0;
  }

  hasNextPage(): boolean {
    return this.pageIndex < this.pages.length - 1;
  }

  goToPage(page: number) {
    this.pageIndex = page;
    this.emitPageEvent();
    window.scrollTo({
      top: 0,
      behavior: 'smooth' // Optional: Adds a smooth scrolling effect
    });
  }

  prevPage() {
    if (this.hasPrevPage()) {
      this.pageIndex--;
      this.emitPageEvent();
    }
  }

  nextPage() {
    if (this.hasNextPage()) {
      this.pageIndex++;
      this.emitPageEvent();
    }
  }

  isCurrentPage(page: number): boolean {
    return this.pageIndex === page;
  }

  emitPageEvent() {
    this.page.emit({ length: this.length, pageSize: this.pageSize, pageIndex: this.pageIndex });
  }


}

--- ./src/app/site-themes/four-theme/order-detail-print-modal/order-detail-print-modal.component.ts
+++ ./src/app/site-themes/four-theme/order-detail-print-modal/order-detail-print-modal.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';

\1
  standalone: true,
  selector: 'app-order-detail-print-modal',
  templateUrl: './order-detail-print-modal.component.html',
  styleUrls: ['./order-detail-print-modal.component.scss']
})
export class OrderDetailPrintModalComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}

--- ./src/app/site-themes/four-theme/four-customer-reviews/four-customer-reviews.component.ts
+++ ./src/app/site-themes/four-theme/four-customer-reviews/four-customer-reviews.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-customer-reviews',
  templateUrl: './four-customer-reviews.component.html',
  styleUrls: ['./four-customer-reviews.component.scss']
})
export class FourCustomerReviewsComponent implements OnInit {
  title='Customer Reviews'
  @Input()data:any;
  @Input()sliderStyle:any;
  design: any;
  awsUrl = environment.awsKey;

  arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
  arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';

  customOptions: OwlOptions = {
    loop: true,
    margin: 20,
    nav: true,
    dots: true,
    navSpeed: 700,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`, `<img src="${this.arrowright}" alt="RIGHT">`],
    responsive: {
      0: {
        items: 1
      },
      400: {
        items: 1
      },
      740: {
        items: 2
      },
      940: {
        items: 3
      }
    },
  }


  constructor() { }

  ngOnInit() {
    if(this.data.data && this.data.data.length > 0){
      this.design = this.data.data[0].customerReviewsDesign;

    }
    console.log(this.data,"checking customer")
  }

}

--- ./src/app/site-themes/four-theme/four-footer/four-footer.component.ts
+++ ./src/app/site-themes/four-theme/four-footer/four-footer.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { ActivatedRoute } from '@angular/router';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { environment } from 'src/environments/environment';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { SubscribeMarketingComponent } from '../subscribe-marketing/subscribe-marketing.component';
import { UnsubscribeMarketingComponent } from '../unsubscribe-marketing/unsubscribe-marketing.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';


\1
  standalone: true,
  selector: 'app-four-footer',
  templateUrl: './four-footer.component.html',
  styleUrls: ['./four-footer.component.scss']
})
export class FourFooterComponent implements OnInit {
  landUrl = environment.landingUrl;
  subdomain!: string;
  isLogo = false;
  logoImage : string = "../../../assets/img/logo.png";
  awsURL = environment.assetsAwsKey;
  @Input() data:any;
  businessId = Number(this.tokenStorage.getBusinessID())!;
  limit: number = 6;
  @Input() socialLinks: any;
  businessID = Number(this.tokenStorage.getBusinessID());
  businessPayments: string[] = [];
  isFazealPayEnabled: boolean = false;
  isPayPalEnabled: boolean = false;
  isCODEnabled: boolean = false;
  getOnBoardingForm: any;

  constructor(
    public dialog: MatDialog,
    private tokenStorage: TokenStorageService,
    private businessSetting : BusinessSettingService,
    private route: ActivatedRoute,private shoppingCart: ShoppingCartService,
    ) { }

  async ngOnInit(): Promise<void> {
    this.subdomain = this.route.snapshot.params['subdomain'];
    await this.loadPaymentMethods();
    await this.getOnboardingFormLink();
  }

  subscribeMarketing() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-xl-medium-width';
    this.dialog.open(SubscribeMarketingComponent, dialogConfig);
  }

  unsubscribeMarketing() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-xl-medium-width';
    this.dialog.open(UnsubscribeMarketingComponent, dialogConfig);
  }

  loadMoreCategories(): void {
    this.limit += 6; // Increase the limit by 6 or any number you prefer
  }


  loadPaymentMethods() {
    this.businessSetting.getBusinessPaymentMethodsForCustomerSide(this.businessID).subscribe(
      result => {
        console.log(result,"payment methods")
        this.businessPayments = result?.data?.getBusinessPaymentMethodsForCustomerSide;
        if(this.businessPayments?.includes('PAYPAL')){
          this.isPayPalEnabled = true;
        }
        if(this.businessPayments?.includes('CASH_ON_DELIVERY')){
          this.isCODEnabled = true;
        }
      }
    );

  }

  async getOnboardingFormLink(){
    (await this.shoppingCart.getOnboardingFormLink()).subscribe(
      data => {
        if(data?.errors){
          return;
        }
        if(data?.data?.getOnboardingFormLinkForCustomer){
          this.getOnBoardingForm = data?.data?.getOnboardingFormLinkForCustomer;
          if (this.getOnBoardingForm?.merchantId && this.getOnBoardingForm?.merchantId !== null && this.getOnBoardingForm?.status === 'APPROVED') {
            this.isFazealPayEnabled = true;
          }
        }
      }
    );
  }



}

--- ./src/app/site-themes/four-theme/thanks-forlogin-modal/thanks-forlogin-modal.component.ts
+++ ./src/app/site-themes/four-theme/thanks-forlogin-modal/thanks-forlogin-modal.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MatDialog } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-thanks-forlogin-modal',
  templateUrl: './thanks-forlogin-modal.component.html',
  styleUrls: ['./thanks-forlogin-modal.component.scss']
})
export class ThanksForloginModalComponent implements OnInit {

  constructor(public dialog: MatDialog,) { }

  ngOnInit(): void {
  }

  closemodal(){
    this.dialog.closeAll();
  }

}

--- ./src/app/site-themes/four-theme/four-theme-product-search/four-theme-product-search.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-product-search/four-theme-product-search.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component,  ElementRef,  OnInit, ViewChild  } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ActivatedRoute } from '@angular/router';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';
import { BrandResponse } from 'src/app/models/BrandResponse';
import { Options } from '@angular-slider/ngx-slider';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { PageEvent } from '@angular/material/paginator';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../pdp-quick-view/pdp-quick-view.component';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { DataService } from 'src/app/service/data.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { ThemeService } from 'src/app/service/theme.service';
import { SlpContent } from 'src/app/models/SlpContent';

\1
  standalone: true,
  selector: 'app-four-theme-product-search',
  templateUrl: './four-theme-product-search.component.html',
  styleUrls: ['./four-theme-product-search.component.scss']
})
export class FourThemeProductSearchComponent implements OnInit  {

  from = 0;
  size = 12;
  businessId = Number(this.tokenStorage.getBusinessID());
  currency = this.tokenStorage.getCurrency()?.symbol;
  products: ProductResponse[] = [];
  search = '';
  awsUrl = environment.awsKey;
  subdomain = '';
  rating!: number|null;
  skeletonArray = new Array(9);
  brandsNames: string[] = [];
  gta!: number|any;
  lte!: number|any;
  attributes: AttributeResponse[] = [];
  mainAttrValue = '';
  attrValue: string[] = [];
  selectedBrands: string[] = [];
  visibleBrands: any[] = [];
  maxVisibleBrands: number = 6;
  userWishlists: WishListResponse[] = [];
  view: string = 'grid';
  slpSearchData: any;
  minPrice: any;
  maxPrice: any;
  avgRating!: number;
  options: Options = {
    floor: 0,
    ceil: 100
  };
  @ViewChild('slider', { static: false }) sliderElement!: ElementRef;
  totalCounts!: number;
  min: number|any;
  max: number|any;
  filtersOnMobile: boolean = true;
  currentPage: number = 0;
  sessionResponse!: SessionResponse;
  currentUrl!: string;
  isFirstResponse: boolean = true;
  firstGta: any;
  firstLta: any;
  themeName: string = 'FourthTheme';
  slpContent!: SlpContent;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  pageEvent!: PageEvent;
  isLoading: boolean = false;


  constructor(
    private catalogService: CatalogServiceService,
    private route: ActivatedRoute,
    private tokenStorage: TokenStorageService,private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef,private themeService: ThemeService,
    public dialog: MatDialog, private wishlistService: WhishlistService,private dataService: DataService,
    ) {
      this.maxVisibleBrands = 6;
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
    }

  ngOnInit(): void {
    this.route.queryParams.subscribe(params => {
      this.search = params['searchTerm'];
      if(environment.env !== 'local'){
        this.subdomain = '';
      } else {
        this.subdomain = this.route.snapshot.params['subdomain'];
      }
      this.gta = 0;
      this.lte = 100;
      this.rating = null;
      this.min = null;
      this.max = null;
      this.attrValue = [];
      this.selectedBrands = [];
      this.isFirstResponse = true;
      this.searchProductsByCategoryAndBrand(this.search);
      this.loadAttributes();
      this.loadBusinessData();
    });
    this.getSlpContent(this.subdomain);
    this.checkingFiltersHide()
    this.getThemeName();
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  moveSlider() {
    if (this.sliderElement) {
      this.sliderElement.nativeElement.slider.update({ value: this.gta, highValue: this.lte });
    }
  }

  updateOptions() {
    this.options = {
      floor: this.gta,
      ceil: this.lte
    };
  }

  onPageSizeChange() {
    this.searchProductsByCategoryAndBrand(this.search);
    this.cdr.detectChanges();
  }


  loadBusinessData(){
    if(this.subdomain && !this.tokenStorage.getBusinessURL()){
      this.tokenStorage.saveBusinessData(this.subdomain , this.subdomain);
      window.setTimeout(() =>{
        this.currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency()?.symbol: '';
        this.businessId = Number(this.tokenStorage.getBusinessID());
        this.searchProductsByCategoryAndBrand(this.search);
        this.loadAttributes();
      }, 2000);
    }
  }

  loadAttributes(){
    if(this.search.trim().length > 0){
      this.catalogService.listAttributesBySearchQuery(this.businessId, this.search).subscribe(
        data => {
          if(data?.data?.listAttributesBySearchQuery){
            this.attributes = data?.data?.listAttributesBySearchQuery;
            console.log(this.attributes,"checking colors")
          }
        }
      );
    }
  }

  sort(field: string, order: string) {
    this.field = field;
    this.order = order;
    this.searchProductsByCategoryAndBrand(this.search);
    this.cdr.detectChanges();
  }

  searchProductsByCategoryAndBrand(query: string) {
    if (query.trim().length > 0) {
        this.isLoading = true;  // Show loading animation
        this.products = [];      // Clear old products to prevent flicker

        this.catalogService.searchProductsByAllFiltersForSlpByBusiness(
            query, this.businessId, this.from, this.size, this.selectedBrands, this.attrValue,
            this.rating ? this.rating : null, this.min ? this.min : null, this.max ? this.max : null, this.field, this.order
        ).subscribe(
            data => {
                if (data?.data?.slpSearch?.products) {
                    this.slpSearchData = data?.data?.slpSearch;
                    this.products = data?.data?.slpSearch?.products;
                    this.avgRating = this.slpSearchData?.avgRating;
                    this.brandsNames = this.slpSearchData?.brandNames;
                    this.updateVisibleBrands();

                    if (this.isFirstResponse) {
                        this.gta = this.slpSearchData?.minPrice;
                        this.lte = this.slpSearchData?.maxPrice;
                        this.firstGta = this.slpSearchData?.minPrice;
                        this.firstLta = this.slpSearchData?.maxPrice;
                        this.updateOptions();
                        this.isFirstResponse = false;
                        this.cdr.detectChanges();
                    }

                    this.minPrice = this.slpSearchData?.minPrice;
                    this.maxPrice = this.slpSearchData?.maxPrice;
                    this.totalCounts = this.slpSearchData?.totalCount;

                    if (this.sessionResponse?.userType !== "GENERIC") {
                        this.setFavItems();
                    }
                }
                this.isLoading = false;  // Hide loading animation once data is fetched
            },
            error => {
                this.isLoading = false;  // Hide loading animation if there's an error
            }
        );
    }
}


  setAttrValue(value: string) {
    if (this.attrValue.includes(value)) {
      this.attrValue = this.attrValue.filter(val => val !== value);
    } else {
      this.attrValue.push(value);
    }
    this.searchProductsByCategoryAndBrand(this.search);
  }

  setPriceValue(min: number, max: number){
    this.min = min;
    this.max = max;
    this.searchProductsByCategoryAndBrand(this.search);
  }

  clearPriceValue(){
    this.gta = this.firstGta;
    this.lte = this.firstLta;
    this.min = null;
    this.max = null;
    this.isFirstResponse = true;
    this.searchProductsByCategoryAndBrand(this.search);
  }

  setselectedBrands(value: string, event: any){
    if(event.checked){
      this.selectedBrands.push(value);
    }else{
      this.selectedBrands= this.selectedBrands.filter(brand => brand != value);
    }
    this.searchProductsByCategoryAndBrand(this.search);
  }

  isSelected(brandName: string) {
    return this.selectedBrands.includes(brandName);
  }

  clearSelectedBrands() {
    this.selectedBrands = [];
    this.searchProductsByCategoryAndBrand(this.search);
  }

  searchProductsByCategoryAndBrandPaginated(type: string){
    if(type == 'Next'){
      this.from = this.size;
      this.size = this.size + 12;
    }else if(type == 'Previous' && this.size > 20){
      this.from = this.from - 12;
      this.size = this.size - 12;
    }
    this.searchProductsByCategoryAndBrand(this.search);
  }

  updateVisibleBrands() {
    this.visibleBrands = this.brandsNames.slice(0, this.maxVisibleBrands);
  }

  showMoreBrandFilters() {
    this.maxVisibleBrands += 6;
    this.updateVisibleBrands();
  }


  handlePageEvent(event: PageEvent) {
    this.currentPage = event.pageIndex;
    this.size = event.pageSize;
    this.from = this.currentPage * this.size;
    this.searchProductsByCategoryAndBrand(this.search);
  }

  getCurrentRange(): string {
    const start = this.from + 1;
    const end = Math.min(this.from + this.size, this.totalCounts);
    return `${start}-${end}`;
  }


  async setFavItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      data => {
        this.userWishlists = data?.data?.getCustomerWishList;
        this.products?.forEach((product: any) => {
          if (this.userWishlists.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        });
      }
    );
  }

  async addItemToFovarite(product: ProductResponse) {
  (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
    data => {
      if(data?.data?.addItemToWishList != null) {
        product.addedToWishlist = true;
        this.dataService.reset();
        this.dataService.changeCount(1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
        this.dataService.notifyOther({ refresh: true });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }

  async removeItemFromFovarite(product: ProductResponse) {
  (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
    data => {
      if (data?.data?.removeItemFromWishList != null) {
        product.addedToWishlist = false;
        this.dataService.reset();
        this.dataService.changeCount(-1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }
  toggleView(view: string) {
    if (view === 'grid') {
      this.view = 'grid'
    } else if (view === 'list') {
      this.view = 'list'
    }
  }

  checkingFiltersHide(): void {
    if (window.innerWidth < 992) {
      this.filtersOnMobile = false
    } else {
      this.filtersOnMobile = true
    }
  }

  toggleFiltersMobile(){
    this.filtersOnMobile = !this.filtersOnMobile
  }


  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  getSlpContent(siteUrl: string){
    this.themeService.getSlpContentBySiteUrl(siteUrl).toPromise().then(
      data => {
        if(data?.data?.getSlpContentBySiteUrl){
          this.slpContent = data?.data?.getSlpContentBySiteUrl;
        }
      }
    );
  }

}

--- ./src/app/site-themes/four-theme/return-refund/return-refund.component.ts
+++ ./src/app/site-themes/four-theme/return-refund/return-refund.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Options } from '@angular-slider/ngx-slider';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ActivatedRoute, Router } from '@angular/router';
import { environment } from 'src/environments/environment';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { TrackpackageComponent } from '../four-theme-my-order/trackpackage/trackpackage.component';


\1
  standalone: true,
  selector: 'app-return-refund',
  templateUrl: './return-refund.component.html',
  styleUrls: ['./return-refund.component.scss']
})
export class ReturnRefundComponent implements OnInit {
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  subdomain: string = '';
  order!: OrderResponse;
  loadingOrders = false;
  noOrdersAvailable = false;
  orderId!: number;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  constructor(private router: Router, private route: ActivatedRoute, public dialog: MatDialog, public shoppingCart: ShoppingCartService, public tokenStorage: TokenStorageService,) { }

  ngOnInit(): void {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.orderId = this.route.snapshot.params['id'];
    this.getByOrderId();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  openReturnOrder(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    const url = `/${this.subdomain}/return-refund-process/${orderId}`;
    this.router.navigateByUrl(url, {state: {order: order}});
  }

  async getByOrderId() {
      this.loadingOrders = true;
      this.noOrdersAvailable = false;
        (await this.shoppingCart.getByOrderId(this.orderId, this.businessId)).subscribe(
            data => {
                if (data?.errors) {
                    this.loadingOrders = false;
                    return;
                }
                if (data?.data?.getOrdersByCustomerAndBusinessAndOrderId) {
                    this.order = data?.data?.getOrdersByCustomerAndBusinessAndOrderId;
                    this.loadingOrders = false;
                } else {
                    this.loadingOrders = false;
                    this.noOrdersAvailable = true;
                }
            },
            error => {
                this.loadingOrders = false;
                this.noOrdersAvailable = true;
            }
        );
}

 openTrackPackage(order: OrderResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = order;
    const dialogRef = this.dialog.open(TrackpackageComponent, dialogConfig);
  }


}

--- ./src/app/site-themes/four-theme/four-brand-logos-slider/four-brand-logos-slider.component.ts
+++ ./src/app/site-themes/four-theme/four-brand-logos-slider/four-brand-logos-slider.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-brand-logos-slider',
  templateUrl: './four-brand-logos-slider.component.html',
  styleUrls: ['./four-brand-logos-slider.component.scss']
})
export class FourBrandLogosSliderComponent implements OnInit {
  @Input() data:any=[];
  awsUrl = environment.awsKey;
  arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
  arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';


  constructor() { }
  customOptions: OwlOptions = {
    loop: true,
    margin: 20,
    nav: true, // Add this option to enable navigation arrows
    dots: true,
    navSpeed: 700,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`, `<img src="${this.arrowright}" alt="RIGHT">`],
    responsive: {
      0: {
        items: 2
      },
      400: {
        items: 3
      },
      740: {
        items: 5
      },
      940: {
        items: 5
      }
    },
  }
  ngOnInit() {

  }

}

--- ./src/app/site-themes/four-theme/signup-modal-checkout/signup-modal-checkout.component.ts
+++ ./src/app/site-themes/four-theme/signup-modal-checkout/signup-modal-checkout.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { AuthService } from 'src/app/service/auth.service';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';

import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { firstValueFrom } from 'rxjs/internal/firstValueFrom';
import { Country } from 'src/app/models/country';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { AddressService } from 'src/app/service/Address.service';
import { OtpEmailMobileService } from 'src/app/service/otp-email-mobile.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ActivatedRoute } from '@angular/router';

\1
  standalone: true,
  selector: 'app-signup-modal-checkout',
  templateUrl: './signup-modal-checkout.component.html',
  styleUrls: ['./signup-modal-checkout.component.scss']
})
export class SignupModalCheckoutComponent implements OnInit {
  signUpForm!: FormGroup;
  searchText: string = '';
  phoneCode: string = '1';
  verifyEmail: boolean = false;
  verifyNumber: boolean = false;
  phoneNumber!: number
  email: string = ''
  emailOtpCodeVerified: boolean = false
  phoneOtpCodeVerified: boolean = false
  countries: Country[] = [];
  errormessage: any;
  password: string = '';
  showPassword: boolean = false;
  prevEmail: string = '';
  prevPhoneNumber: string = '';
  prevPhoneCode: string = '';
  prevEmailOtpCodeVerified: boolean = false;
  prevPhoneOtpCodeVerified: boolean = false;
  businessId = Number(this.tokenStorage.getBusinessID());
  hidepasswordfield: boolean = true;
  hideconfirmpasswordfield: boolean = true;
  emailOtpCode: string[] = ['', '', '', '', '', ''];
  mobileOtpCode: string[] = ['', '', '', '', '', ''];

  constructor(
    private formBuilder: FormBuilder,
    public addressService: AddressService,
    private cdr: ChangeDetectorRef,
    private otpService: OtpEmailMobileService,
    public dialog: MatDialog,
    private translate: TranslateService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private route: ActivatedRoute, private dialogRef: MatDialogRef<SignupModalCheckoutComponent>
  ) { }

  async ngOnInit() {
    this.signUpForm = this.formBuilder.group({
      firstName: ['', [Validators.required, Validators.pattern(/^(?=.*[a-zA-Z])[a-zA-Z0-9]*$/), Validators.minLength(2), Validators.maxLength(12)]],
      lastName: ['', [Validators.required, Validators.pattern(/^(?=.*[a-zA-Z])[a-zA-Z0-9]*$/), Validators.minLength(2), Validators.maxLength(12)]],
      email: ['', [Validators.required, Validators.email]],
      phoneNumber: ['', [
        Validators.required,
        Validators.pattern(/^\d{9,15}$/),
        this.numbersOnlyValidator()
      ]],
      password: ['', [
        Validators.required,
        Validators.minLength(8),
        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/)
      ]],
      confirmPassword: ['', Validators.required],
      emailOtpNumber: ['', Validators.required]
    }, { validator: this.matchPasswords });
    await this.loadCountries();
    this.signUpForm.get('email')?.valueChanges.subscribe(value => {
      this.email = value;
      if (this.email !== this.prevEmail && this.emailOtpCodeVerified) {
        this.emailOtpCodeVerified = false;
        this.verifyEmail = false;
      }
    });
    this.signUpForm.get('phoneNumber')?.valueChanges.subscribe(value => {
      this.phoneNumber = value;
    });
    if(!this.businessId){
      const subdomain = this.route.snapshot.params['subdomain'];
      this.tokenStorage.saveBusinessData(subdomain, subdomain.substring(1));
    }
  }


onEmailOtpCodeChange(event: Event, index: number, otpInput: HTMLInputElement) {
  if (event.target instanceof HTMLInputElement) {
    const value = event.target.value;
    this.emailOtpCode[index] = value;
    if (value.length === 1 && index < 5) {
      const nextInput = document.querySelector(`input[data-index='${index + 1}']`) as HTMLInputElement;
      if (nextInput) {
        nextInput.focus();
      }
    }
  }
}


onEmailOtpCodeKeydown(event: KeyboardEvent, index: number, otpInput: HTMLInputElement) {
  const inputElement = event.target as HTMLInputElement;
  if (event.key === 'Backspace' && inputElement.value === '') {
    const previousInput = document.querySelector(`input[data-index='${index - 1}']`) as HTMLInputElement;
    if (previousInput) {
      previousInput.focus();
    }
  }
}


onMobileOtpCodeChange(event: any, index: number) {
  if (event.target instanceof HTMLInputElement) {
    if (event.target.value.length < 2) {
      this.mobileOtpCode[index - 1] = event.target.value;
    }
  }
}

  numbersOnlyValidator(): (control: AbstractControl) => ValidationErrors | null {
    return (control: AbstractControl): ValidationErrors | null => {
      const valid = /^\d+$/.test(control.value);
      return valid ? null : { numbersOnly: true };
    };
  }

  matchPasswords(group: AbstractControl): ValidationErrors | null {
    const password = group.get('password')?.value;
    const confirmPassword = group.get('confirmPassword')?.value;
    return password === confirmPassword ? null : { passwordMismatch: true };
  }

  onMenuItemClick(event: MouseEvent): void {
    event.stopPropagation();
  }
  onMenuClosedCountry() {
    this.searchText = '';
  }

  onSubmit(): void {
    if (this.signUpForm?.invalid || !this.emailOtpCodeVerified) {
      return;
    }
    const fName = this.signUpForm.get('firstName')?.value
    const lName = this.signUpForm.get('lastName')?.value
    const email = this.signUpForm.get('email')?.value
    const password = this.signUpForm.get('password')?.value
    if (!email || !this.emailOtpCodeVerified) {
      this.popupMessagenotefication(this.translate.instant('ERROR'), this.translate.instant('EMAIL_NOT_VERIFIED'));
      return;
    }
    this.authService.subscribeGuestUser(this.businessId, fName, lName, email,
      `${this.phoneNumber}`, this.phoneCode, password).subscribe(
      r => {
        if (r?.errors) {
          this.popupMessagenotefication('ERROR', r?.errors[0]?.errorCode)
          return;
        }
        this.sucessMessage('SUCCESS', r?.data?.subscribeGuestUser?.message);
        this.dialogRef.close({event: true, email: email, password: password});
      })
  }

  async loadCountries() {
    const response = await firstValueFrom(this.addressService.getAllCountriesForBusiness())
    this.countries = response?.data?.getAllCountries;
    this.cdr.detectChanges();
  }

  selectCode(code: string) {
    this.phoneCode = code;
    this.phoneOtpCodeVerified = false;
    this.verifyNumber = false;
  }

  createEmailOTP() {
    if (this.email.length === 0) {
      this.signUpForm.get('emailOtpNumber')?.setErrors({ 'required': true });
      return
    }
    this.signUpForm.get('emailOtpNumber')?.reset();
    this.signUpForm.get('emailOtpNumber')?.setErrors(null);
    this.otpService.generateStoreEmailVerificationCode(this.email, this.businessId).subscribe(
      data => {
        if (data?.errors) return;
        this.verifyEmail = true;
        this.emailOtpCodeVerified = false;
        this.prevEmail = '' + `${this.email}`;
        this.sucessMessage(this.translate.instant('SUCCESS'), this.translate.instant('PLEASE_CHECK_YOUR_EMAIL_FOR_OTP'));
      }
    )
  }

  verifyEmailOtpCode() {
    const code = this.emailOtpCode.join('');
    if (code || code.trim().length === 6) {
      this.otpService.verifyStoreEmail(this.email, code, this.businessId).subscribe(
        res => {
          if (res?.data?.verifyStoreEmail?.status == 'approved') {
            this.sucessMessage('SUCCESS', this.translate.instant('EMAIL_VERFIED'));
            this.emailOtpCodeVerified = true;
            this.prevEmailOtpCodeVerified = true;
            this.prevEmail = '' + `${this.email}`;
            this.cdr.detectChanges();
          } else {
            this.popupMessagenotefication(this.translate.instant('ERROR'), this.translate.instant('FILL_CORRECT_OTP'));
          }
        });
    }
  }

  createMobileOTP() {
    this.phoneNumber = this.signUpForm.get('phoneNumber')?.value
    if (!this.phoneNumber) {
      this.signUpForm.get('phoneNumber')?.setErrors({ 'required': true });
      return
    }
    let phone = +(this.phoneCode + this.phoneNumber)
    this.otpService.generateVerificationOTP(phone, "whatsapp").subscribe(
      data => {
        if (data?.errors) return;
        this.verifyNumber = true;
        this.phoneOtpCodeVerified = false;
        this.prevPhoneCode = `${this.phoneCode}`;
        this.prevPhoneNumber = `${this.phoneNumber}`;
        this.sucessMessage(this.translate.instant('SUCCESS'), this.translate.instant('CHECK_MOBILE_OTP'));
      }
    )
  }

  verifyPhoneOtpCode() {
    const mobileCode = this.mobileOtpCode.join('');
    if (mobileCode || mobileCode.length === 6) {
      this.otpService.verifyOTP(+(this.phoneCode + this.phoneNumber), mobileCode).subscribe(
        res => {
          if (res?.data?.verifyOTP?.status === 'approved') {
            this.phoneOtpCodeVerified = true;
            this.prevPhoneOtpCodeVerified = true;
            this.prevPhoneCode = `${this.phoneCode}`;
            this.prevPhoneNumber = `${this.phoneNumber}`;
            this.sucessMessage('SUCCESS', this.translate.instant('MOBILE_VERFIED'));
          } else {
            this.popupMessagenotefication('ERROR', this.translate.instant('FILL_CORRECT_OTP'));
          }
        });
    }
  }

  public sucessMessage(title: string, message: string) {
    this.dialog.open(SucessmsgPopupComponent, {
      backdropClass: 'notificationmodal-popup-sucess',
      width: '450px',
      data: { title: title, message: message },
    });
  }

  public popupMessagenotefication(title: string, message: string) {
    this.dialog.open(NotifacationMessageComponent, {
      backdropClass: 'notificationmodal-popup',
      width: '450px',
      data: { title: title, message: message },
    });
  }

  togglePasswordVisibility() {
    this.showPassword = !this.showPassword;
  }
}


export function numbersOnlyValidator(): ValidatorFn {
  return (control: AbstractControl): { [key: string]: any } | null => {
    const numericValue = control.value;
    if (numericValue && isNaN(numericValue)) {
      return { 'numbersOnly': true };
    }
    return null;
  };
}

--- ./src/app/site-themes/four-theme/four-theme-my-order/four-theme-my-order.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/four-theme-my-order.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { ChangeDetectorRef, Component, HostListener, OnInit } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';
import { ActivatedRoute, Router } from '@angular/router';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { EditReviewModalComponent } from '../edit-review-modal/edit-review-modal.component';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { environment } from 'src/environments/environment';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ReviewResponse } from 'src/app/models/ReviewResponse';
import { ConfirmOrderComponent } from './confirm-order/confirm-order.component';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ViewQrCodeComponent } from './view-qr-code/view-qr-code.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { TrackpackageComponent } from './trackpackage/trackpackage.component';
import { ProofofdeliveryComponent } from './proofofdelivery/proofofdelivery.component';
import { ProofofPickupComponent } from './ProofofPickup/ProofofPickup.component';
import { Subscription } from 'rxjs';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';


\1
  standalone: true,
  selector: 'app-four-theme-my-order',
  templateUrl: './four-theme-my-order.component.html',
  styleUrls: ['./four-theme-my-order.component.scss']
})
export class FourThemeMyOrderComponent implements OnInit {
  selectedStatus: string = 'ALL';
  selectedCheckoutType: string = 'ALL';
  returnStatus: string = null!;
  loadingOrders = false;
  noOrdersAvailable = false;
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  subdomain: string = '';
  businessId = Number(this.tokenStorage.getBusinessID()!);
  orders: OrderResponse[] = [];
  closedOrders: OrderResponse[] = [];
  user = this.tokenStorage.getUser();
  orderPrefix = this.tokenStorage.getOrderFormat()?.prefix;
  orderSuffix = this.tokenStorage.getOrderFormat()?.suffix;
  pageNum = 1;
  pageSize = 5;
  awsUrl = environment.awsKey;
  reviews: ReviewResponse[] = [];
  currency = this.tokenStorage.getCurrency()?.symbol;
  startDate = "";
  currentYear = new Date().getFullYear();
  canLoadMoreData = true;
  noOfPages!: number;
  private orderDataSubscription!: Subscription;
  differenceInDays!: number;
  isDateExceeded: boolean = false;
  updatedDate!: Date;
  endDate = "";
  firstOrderDate: string = '';
  orderYear: string = '';

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    public dialog: MatDialog,
    public tokenStorage: TokenStorageService,
    public shoppingCart: ShoppingCartService,private sharedService: SharedService,
    public catalogService: CatalogServiceService,private cdr: ChangeDetectorRef
    ) {}

  async ngOnInit(): Promise<void> {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    if(!this.user){
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    await this.firstOrderDateTime();
    this.onDateRangeChange('last-30-days');
    await this.getOrdersByCustomerAndBusiness();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  getUpdatedUserData() {
    this.orderDataSubscription = this.sharedService.getOrderData().subscribe(data => {
      if (data?.id) {
        this.orders = this.orders.map(order =>
          order.id === data.id ? { ...order, ...data } : order
        );
      }
    });
  }

  ngOnDestroy() {
    if (this.orderDataSubscription) {
      this.orderDataSubscription.unsubscribe();
    }
  }

  onDateRangeChange(value: string): void {
    const today = new Date();
    if (value === 'last-30-days') {
      const last30Days = new Date();
      last30Days.setDate(today.getDate() - 30);
      this.startDate = this.formatDate(last30Days);
      this.endDate = this.formatDate(today);
    } else if (value === 'last-3-months') {
      const last3Months = new Date();
      last3Months.setMonth(today.getMonth() - 3);
      this.startDate = this.formatDate(last3Months);
      this.endDate = this.formatDate(today);
    } else if (value.startsWith('year-')) {
      const selectedYear = parseInt(value.split('-')[1], 10);
      this.startDate = `${selectedYear}-01-01`;
      this.endDate = `${selectedYear}-12-31`;
    } else {
      this.startDate = '';
      this.endDate = '';
    }
  }

  getToday(): string {
    const today = new Date();
    return this.formatDate(today);
  }

  formatDate(date: Date): string {
    return date.toISOString().split('T')[0];
  }

  filterOrdersByOrderType(orderType: any){
    this.selectedCheckoutType = orderType;
    this.orders = [];
    this.getOrdersByCustomerAndBusiness();
  }

  filterOrdersByOrderStatus(orderStatus: any){
    if(orderStatus === 'RETURNED' || orderStatus === 'REFUNDED'){
      this.selectedStatus = null!;
      this.returnStatus = orderStatus;
    } else {
      this.returnStatus = null!;
      this.selectedStatus = orderStatus;
    }
    this.orders = [];
    this.getOrdersByCustomerAndBusiness();
  }

  filterOrdersByOrderDate(orderDate: any){
    this.onDateRangeChange(orderDate);
    this.orders = [];
    this.getOrdersByCustomerAndBusiness();
  }

  async firstOrderDateTime(){
    if(this.user){
      (await this.shoppingCart.firstOrderDateTime()).subscribe(
        data => {
          if(data?.errors){
            return;
          }
          if(data?.data?.firstOrderDateTime){
            this.firstOrderDate = data?.data?.firstOrderDateTime;
            if(this.firstOrderDate && this.firstOrderDate !== null){
              const dateStr = this.firstOrderDate;
              const year = dateStr.split('-')[0];
              this.orderYear = year;
            }
          }
        }
      );
    }
  }

  async getOrdersByCustomerAndBusiness() {
    if(this.selectedCheckoutType === 'ALL'){
      this.selectedCheckoutType = null!;
    }
    if(this.selectedStatus === 'ALL'){
      this.selectedStatus = null!;
    }
    if (this.user) {
        this.loadingOrders = true;
        this.noOrdersAvailable = false;
        this.pageNum = 1;
        this.canLoadMoreData = true;
        (await this.shoppingCart.getOrdersByBusinessByFilters(this.businessId, 1, 5, this.selectedCheckoutType, this.selectedStatus, this.returnStatus, this.startDate, this.endDate)).subscribe(
            data => {
                if (data?.errors) {
                    this.loadingOrders = false;
                    return;
                }
                if (data?.data?.getOrdersByBusinessByFilters) {
                    this.orders = data?.data?.getOrdersByBusinessByFilters;
                    this.closedOrders = this.orders?.filter(order => order?.status === 'DELIVERED' || order?.status === 'PICKED');
                    this.loadingOrders = false;
                    this.noOrdersAvailable = this.orders?.length === 0;
                } else {
                    this.loadingOrders = false;
                    this.noOrdersAvailable = true;
                }
            },
            error => {
                this.loadingOrders = false;
                this.noOrdersAvailable = true;
            }
        );
    }
}

  getTracks(order: OrderResponse): any[] {
    return order?.orderTracks?.map((track: any) => track?.status);
  }

  getOrderSales(order: OrderResponse): any[] {
    return order?.orderDetails?.filter((sale: any) => sale?.returnPolicyType === 'SALES_RETURN_ALLOWED');
  }

  getItemReturnBlocked(order: OrderResponse): any[] {
    return order?.orderDetails?.filter((item: OrderDetailResponse) => item?.noReturnAgain === true);
  }

  async listReviewsByCustomerIdAndBusiness(){
    if(this.user){
      (await this.catalogService.listReviewsByCustomerIdAndBusiness(this.user.id, this.businessId, this.pageNum, this.pageSize)).subscribe(
        data => {
          if(data?.errors){
            return;
          }
          if(data?.data?.listReviewsByCustomerIdAndBusinessAndUserType){
            this.reviews = data?.data?.listReviewsByCustomerIdAndBusinessAndUserType;
          }
        }
      );
    }
  }

  async actionOnPendingOrder(order: any, itemId: number, status: string){
    (await this.shoppingCart.actionOnPendingOrder(order.id, itemId, status)).subscribe(
      async data => {
        if(data?.data?.actionOnPendingOrder != null){
         this.getOrdersByCustomerAndBusiness();
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async cancelOrder(order: any){
    (await this.shoppingCart.cancelOrder(order.id)).subscribe(
      async data => {
        if(data?.data?.cancelOrder != null){
         this.getOrdersByCustomerAndBusiness();
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  calculateTimePeriodDifference(item: any, order: any): any {
    const deliverDateObj = new Date(order.deliverDate);
    deliverDateObj.setDate(deliverDateObj.getDate() + item.timePeriodReturn);
    const today = new Date();
    const differenceInTime = deliverDateObj.getTime() - today.getTime();
    const differenceInDays = Math.ceil(differenceInTime / (1000 * 60 * 60 * 24));
    this.isDateExceeded = differenceInDays < 0;
    this.updatedDate = deliverDateObj;
    this.differenceInDays = differenceInDays;
    return this.updatedDate;
}

  editreviewmodal(product: ProductResponse){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = {action: 'ADD', item: product};
    this.dialog.open(EditReviewModalComponent, dialogConfig);
  }

  openDialogConfirmOrder(order: OrderResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.disableClose = true;
    dialogConfig.autoFocus = false;
    dialogConfig.data = { 'order': order}
    const dialogRef = this.dialog.open(ConfirmOrderComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if(result == 'ACCEPTED'){
        order.status = 'ACCEPTED'
      }else if(result == 'CANCELLED'){
        order.status = 'CANCELLED';
      }
     });
   }

   openLinkInNewTab(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    this.tokenStorage.saveOrderForPrint(order);
    const url = `/${this.subdomain}/print-order-summary/${orderId}`;
    const fullUrl = this.router.serializeUrl(this.router.createUrlTree([url]));
    window.open(fullUrl, '_blank');
  }

  openOrderDetailsInNewTab(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    const url = `/${this.subdomain}/order-details/${orderId}`;
    this.tokenStorage.saveOrderForOrderDetails(order);
    this.router.navigateByUrl(url, {state: {order: order, orderhistory: false}});
  }

  openReturnOrder(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    const url = `/${this.subdomain}/return-refund/${orderId}`;
    this.router.navigateByUrl(url, {state: {order: order, orderhistory: false}});
  }

  openReturnOrderDetails(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.tokenStorage.saveReturnOrder(order);
    const url = `/${this.subdomain}/return-refund-details`;
    this.router.navigateByUrl(url);
  }

  viewQrCode(order: any) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = { qrCodeImage: order.qrCodeImage };
    this.dialog.open(ViewQrCodeComponent, dialogConfig);
  }

  async loadMoreOrders() {
    if (this.loadingOrders || this.pageNum === this.noOfPages) {
      return;
    }
    this.loadingOrders = true;
    (await this.shoppingCart.getOrdersByBusinessByFilters(this.businessId, this.pageNum + 1, this.pageSize, this.selectedCheckoutType, this.selectedStatus, this.returnStatus, this.startDate, this.endDate)).subscribe(
        (data: any) => {
          if (data && data?.data && data?.data?.getOrdersByBusinessByFilters) {
            const newAudits = data?.data?.getOrdersByBusinessByFilters;
            if (newAudits?.length > 0) {
              for (const audit of newAudits) {
                if (!this.orders?.some((existingAudit) => existingAudit.id === audit.id)) {
                  this.orders.push(audit);
                }
              }
              this.noOfPages = data?.data?.getOrdersByBusinessByFilters[0]?.noOfPages;
              this.pageNum++;
            } else {
              this.canLoadMoreData = false;
            }
            this.loadingOrders = false;
          } else {
            this.loadingOrders = false;
          }
        },
        (error: any) => {
          this.loadingOrders = false;
        }
      );
  }

  @HostListener('window:scroll', ['$event'])
  onScroll(event: any): void {
    const scrollPosition = window.pageYOffset + window.innerHeight;
    const pageHeight = document.documentElement.scrollHeight;
    const distanceToBottom = pageHeight - scrollPosition;
    if (distanceToBottom < 100 && this.canLoadMoreData) {
      this.loadMoreOrders();
    }
  }

  openTrackPackage(order: OrderResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = order;
    const dialogRef = this.dialog.open(TrackpackageComponent, dialogConfig);
  }

  seeProofofDelivery(order: OrderResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = order;
    const dialogRef = this.dialog.open(ProofofdeliveryComponent, dialogConfig);
  }

  seeProofofPickup(order: OrderResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = order;
    const dialogRef = this.dialog.open(ProofofPickupComponent, dialogConfig);
  }

}

--- ./src/app/site-themes/four-theme/four-theme-my-order/trackpackage/trackpackage.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/trackpackage/trackpackage.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { environment } from 'src/environments/environment';
import { ActivatedRoute } from '@angular/router';

\1
  standalone: true,
  selector: 'app-trackpackage',
  templateUrl: './trackpackage.component.html',
  styleUrls: ['./trackpackage.component.css']
})
export class TrackpackageComponent implements OnInit {
  order!: OrderResponse;
  awsUrl = environment.awsKey;
  orderTracking: any;
  loadingOrders = false;
  subdomain!: string;
  noOrdersAvailable = false;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public shoppingCart: ShoppingCartService, private route: ActivatedRoute) { }

  ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.order = this.data;
    this.getShipEngineOrderTrackingByTrackingNumberAndBusinessId();
  }

  convertUtcToLocal(utcDate: any): string {
    const date = new Date(utcDate);
    return date.toLocaleString();
  }

  async getShipEngineOrderTrackingByTrackingNumberAndBusinessId(){
    this.loadingOrders = true;
    this.noOrdersAvailable = false;
     (await this.shoppingCart.getShipEngineOrderTrackingByTrackingNumberAndBusinessId(this.order.trackingId)).subscribe(
        data => {
          console.log(data, 'dataaaaaa')
          if(data?.errors){
            this.loadingOrders = false;
            this.noOrdersAvailable = true;
            return;
          }
          if(data?.data?.getShipEngineOrderTrackingByTrackingNumberAndBusinessId){
            this.orderTracking = data?.data?.getShipEngineOrderTrackingByTrackingNumberAndBusinessId;
            this.loadingOrders = false;
            this.noOrdersAvailable = false;
          }
        }
      );
    }
}

--- ./src/app/site-themes/four-theme/four-theme-my-order/ProofofPickup/ProofofPickup.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/ProofofPickup/ProofofPickup.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-ProofofPickup',
  templateUrl: './ProofofPickup.component.html',
  styleUrls: ['./ProofofPickup.component.css']
})
export class ProofofPickupComponent implements OnInit {

  order!: OrderResponse;
  awsUrl = environment.awsKey;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }

  ngOnInit() {
    this.order = this.data;
  }

  convertUtcToLocal(utcDate: any): string {
    utcDate = utcDate + '.00Z'
    const date = new Date(utcDate);
    return date.toLocaleString();
}

}

--- ./src/app/site-themes/four-theme/four-theme-my-order/editordercustomerdetails/editordercustomerdetails.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/editordercustomerdetails/editordercustomerdetails.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-editordercustomerdetails',
  templateUrl: './editordercustomerdetails.component.html',
  styleUrls: ['./editordercustomerdetails.component.css']
})
export class EditordercustomerdetailsComponent implements OnInit {

  order!: OrderResponse;
  addCustomerInfo: boolean = false;
  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog,private translate: TranslateService,
  private shoppingCart: ShoppingCartService, public dialogRef: MatDialogRef<EditordercustomerdetailsComponent>) { }

  ngOnInit() {
    this.order = this.data;
  }

  async updateCustomerInfo() {
    if (
      !this.order.orderAddressResponse.firstName ||
      !this.order.orderAddressResponse.lastName
    ) {
      this.popupMessagenotefication(this.translate.instant('FNAME_LNAME_ERROR'));
      return;
    }
    if(!this.order.orderAddressResponse.email || !this.isValidEmail(this.order.orderAddressResponse.email)){
      this.popupMessagenotefication(this.translate.instant('EMAIL_ERROR'));
      return;
    }
    if(!this.order.orderAddressResponse.phoneNumber || !this.isValidPhoneNumber(this.order.orderAddressResponse.phoneNumber)){
      this.popupMessagenotefication(this.translate.instant('PHONE_ERROR'));
      return;
    }
    this.addCustomerInfo = true;
    (await this.shoppingCart.updateCustomerInfo(
      this.order.id,
      this.order.orderAddressResponse.firstName,
      this.order.orderAddressResponse.lastName,
      this.order.orderAddressResponse.phoneNumber,
      this.order.orderAddressResponse.email
    )).subscribe(
      (data) => {
        if (data?.errors) {
          this.addCustomerInfo = false;
          return;
        }
        if (data?.data?.updateCustomerInfo) {
          this.dialogRef.close({ event: 'close', data: data?.data?.updateCustomerInfo?.data });
          this.dialog.open(SucessmsgPopupComponent, {
            backdropClass: 'notificationmodal-popup-sucess',
            data: {
              title: 'SUCCESS',
              message: data?.data?.updateCustomerInfo?.message,
            },
          });
        }
      },
      (error) => {
        this.addCustomerInfo = false;
      }
    );
  }

  private isValidPhoneNumber(phoneNumber: string): boolean {
    const phoneRegex = /^[0-9]{0,15}$/;
    return phoneRegex.test(phoneNumber);
  }

  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  public popupMessagenotefication(message: string) {
    this.dialog.open(NotifacationMessageComponent, {
      backdropClass: 'notificationmodal-popup',
      width: '450px',
      data: { title: 'ERROR', message: message },
    });
  }
}

--- ./src/app/site-themes/four-theme/four-theme-my-order/proofofdelivery/proofofdelivery.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/proofofdelivery/proofofdelivery.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-proofofdelivery',
  templateUrl: './proofofdelivery.component.html',
  styleUrls: ['./proofofdelivery.component.css']
})
export class ProofofdeliveryComponent implements OnInit {
  order!: OrderResponse;
  awsUrl = environment.awsKey;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }

  ngOnInit() {
    this.order = this.data;
  }

}

--- ./src/app/site-themes/four-theme/four-theme-my-order/confirm-order/confirm-order.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/confirm-order/confirm-order.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA, MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-confirm-order',
  templateUrl: './confirm-order.component.html',
  styleUrls: ['./confirm-order.component.scss']
})
export class ConfirmOrderComponent implements OnInit {

  order!: OrderResponse;
  message!: string;
  errorMessage!: string;

  constructor(@Inject(MAT_DIALOG_DATA) public data: {order: any},
              private dialogRef: MatDialogRef<ConfirmOrderComponent>,
              public dialog: MatDialog,
              public shoppingCart: ShoppingCartService) { }

  ngOnInit() {
    this.order = this.data.order;
  }

  onClickAvailable(id: number){
    this.order.orderDetails.forEach(details => {
      if(details.id == id){
        if(details.available){
          details.available = false;
        }else{
          details.available = true;
        }
      }
    });
  }

  confirmOrder(status: string){
    this.shoppingCart.updateOrderStatus(this.order.id, status).subscribe(data => {
      console.log(data)
      if(data.data.updateOrderStatus != null){
        this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: 'Order Status Changed To ' + status}});
        setTimeout(() => {
          this.dialogRef.close(status);
           }, 2000);
      }
    });
  }


}

--- ./src/app/site-themes/four-theme/four-theme-my-order/editordershippingaddress/editordershippingaddress.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/editordershippingaddress/editordershippingaddress.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { AddressService } from 'src/app/service/Address.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-editordershippingaddress',
  templateUrl: './editordershippingaddress.component.html',
  styleUrls: ['./editordershippingaddress.component.css']
})

export class EditordershippingaddressComponent implements OnInit {

  AddressInstructions: boolean = false;
  order!: OrderResponse;
  errorMessage: any;
  countries: any[] = [];
  cities: any[] = [];
  states: any[] = [];
  selectedState : any;
  selectedCountry: any;
  selectedCity: any;
  addAddressSuccessful: boolean = false;
  isShippingEnabled: boolean = false;
  validateAddressMessages: any[] = [];

  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog, private cdr: ChangeDetectorRef,
  private addressService: AddressService,
  private shoppingCart: ShoppingCartService, public dialogRef: MatDialogRef<EditordershippingaddressComponent>) { }

  async ngOnInit() {
    this.order = this.data;
    this.isShipEngineEnabled();
    await this.getAllCountries();
    this.selectedCountry = this.countries?.filter((e) => {
      return e.name == this.order?.orderAddressResponse?.country || e.shortName == this.order?.orderAddressResponse?.country;
    })[0];
    await this.getAllStatesOfCountry(this.selectedCountry?.id);
    this.selectedState = this.states?.filter((e) => {
      return e.name == this.order?.orderAddressResponse?.state || e.shortName == this.order?.orderAddressResponse?.state;
    })[0];
    await this.getAllCitiesOfState(this.selectedState?.id);
    this.selectedCity = this.cities?.filter((e) => {
      return e.name == this.order?.orderAddressResponse?.city || e.name?.toUpperCase() == this.order?.orderAddressResponse?.city;
    })[0];
  }

  async isShipEngineEnabled(){
    (await this.shoppingCart.isShipEngineEnabled()).subscribe(
      data => {
        if(data?.data?.isShipEngineEnabled != null){
          this.isShippingEnabled = data?.data?.isShipEngineEnabled;
        }
      }
    );
   }


   async validateShipEngineAddress(shippingAddress: any): Promise<boolean> {
    this.validateAddressMessages = [];
    try {
        const response = await (await this.shoppingCart.validateShipEngineAddressForCst(
          `${shippingAddress.firstName} ${shippingAddress.lastName}`,
          shippingAddress.phoneNumber,
          shippingAddress.addressLine1,
          shippingAddress.addressLine2,
          this.selectedCity.name,
          this.selectedState.name,
          shippingAddress.postalCode,
          this.selectedCountry.name
        )).toPromise();
        if (response?.errors) {
          this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: response?.errors[0]?.errorMessage }
            });
            this.addAddressSuccessful = false;
            return false;
        }
        const validationResult = response?.data?.validateShipEngineAddressForCst[0];
        if (validationResult?.messages?.length > 0) {
            this.validateAddressMessages = validationResult.messages;
            this.addAddressSuccessful = false;
            return false;
        }
        if (validationResult?.matched_address) {
            const matchedAddress = validationResult.matched_address;
            this.order.orderAddressResponse.addressLine1 = matchedAddress.address_line1 || '';
            this.order.orderAddressResponse.addressLine2 = matchedAddress.address_line2 || '';
            this.selectedCity.name = matchedAddress.city_locality;
            this.selectedState.name = matchedAddress.state_province;
            this.selectedCountry.name = matchedAddress.country_code;
            this.order.orderAddressResponse.postalCode = matchedAddress.postal_code;
            this.order.orderAddressResponse.phoneNumber = matchedAddress.phone;
        }
        return true;
    } catch (error) {
        console.error('Validation error:', error);
        this.addAddressSuccessful = false;
        return false;
    }
}

async updateAddress() {
    this.addAddressSuccessful = true;
    this.order.orderAddressResponse.addressLine1 = this.order?.orderAddressResponse?.addressLine1 ?? '';
    this.order.orderAddressResponse.addressLine2 = this.order?.orderAddressResponse?.addressLine2 ?? '';
    try {
        if (this.isShippingEnabled) {
            const isValid = await this.validateShipEngineAddress(this.order.orderAddressResponse);
            if (!isValid || this.validateAddressMessages.length > 0) {
                return;
            }
        }
        const response = await (await this.shoppingCart.updateShippingAddress(
          this.order.id,
          this.order.orderAddressResponse.addressLine1,
          this.order.orderAddressResponse.addressLine2,
          this.selectedCountry.name,
          this.selectedCity.name,
          this.selectedState.name,
          this.order.orderAddressResponse.postalCode,
          this.order.orderAddressResponse.phoneNumber
        )).toPromise();
        if (response?.errors) {
            this.addAddressSuccessful = false;
            return;
        }
        if (response?.data?.updateShippingAddress) {
            this.dialogRef.close({ event: 'close', data: response?.data?.updateShippingAddress?.data });
            this.dialog.open(SucessmsgPopupComponent, {
                backdropClass: 'notificationmodal-popup-success',
                data: {
                    title: 'SUCCESS',
                    message: response?.data?.updateShippingAddress?.message
                }
            });
        }
    } catch (error) {
        console.error('Update error:', error);
        this.addAddressSuccessful = false;
    }
}

  public async getAllCountries() {
    await this.addressService.getAllCountriesForBusiness().toPromise().then(
      data => {
        if (data?.data?.getAllCountries == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.countries = data?.data?.getAllCountries;
      }
    )
  }

  private async getAllStatesOfCountry(id : number) {
    await this.addressService.getAllStatesOfCountry(id).toPromise().then(
      data => {
        if (data?.data?.getAllStatesOfCountry == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.states = data?.data?.getAllStatesOfCountry;
      }
    );
  }
  private async getAllCitiesOfState(id : number) {
    await this.addressService.getAllCitiesOfState(id).toPromise().then(
      data => {
        if (data?.data?.getAllCitiesOfState == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.cities = data?.data?.getAllCitiesOfState;
      }
    );
  }

  countrySelected(country: any) {
    if (country && country.id) {
      this.cdr.detectChanges();
      this.getAllStatesOfCountry(country.id);
    }
  }

  stateSelected(state : any){
    if(state && state.id){
      this.selectedState = state;
      this.getAllCitiesOfState(state.id);
      this.cdr.detectChanges();
    }
  }

}

--- ./src/app/site-themes/four-theme/four-theme-my-order/return-refund-details/return-refund-details.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/return-refund-details/return-refund-details.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { ActivatedRoute, Router } from '@angular/router';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-return-refund-details',
  templateUrl: './return-refund-details.component.html',
  styleUrls: ['./return-refund-details.component.css']
})
export class ReturnRefundDetailsComponent implements OnInit {
  subdomain: string = '';
  order!: OrderResponse;
  qrCodeImage: string = '';
  awsURL = environment.awsKey;
  businessDetail :any;
  currency = this.tokenService.getCurrency().symbol;
  returnOrderTracks: any[] = [];
  currentStatus: string = '';
  refundSubTotal: number = 0.0;
  shippingAndHandling: number = 0.0;
  totalEstimatedRefund: number = 0.0;
  taxRefund: number = 0.0;
  restockingFee: number = 0.0;

  constructor( private route: ActivatedRoute,
    private router: Router,private tokenService: TokenStorageService) { }


  ngOnInit() {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.order = this.tokenService.getReturnOrder();
    if(!this.order){
      this.router.navigate([this.subdomain+'/home']);
    }
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.returnPolicyType?.toString() !== 'SALES_ARE_FINAL');
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.returnQuantity > 0);
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.quantity > 0);
    this.returnOrderTracks = this.order?.returnOrderTracks?.map((track: any) => track?.status);
    this.currentStatus = this.returnOrderTracks[this.returnOrderTracks?.length - 1];
    this.order?.orderDetails?.forEach(order => this.calculateSummary(order));
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }


  calculateSummary(prod: OrderDetailResponse){
      let totalQuantity = prod.acceptedQuantity + prod.quantityDifference;
      if(prod.returnOrderStatus !== 'ITEM_REJECTED'){
        let returnQuantity = prod.returnQuantity;
        if(prod.acceptedReturnQuantity !== null){
           returnQuantity = prod.acceptedReturnQuantity;
        }
        prod.shippingAndHandling = (prod.surcharge / totalQuantity) * returnQuantity;
        if(this.order.orderType !== 'ORDER_ONLINE_SHIP_TO_HOME'){
          prod.shippingAndHandling = 0.0;
        }
        prod.refundSubTotal = (prod.salePrice * returnQuantity);
        if (prod.returnFeeType === 'FIXED'){
          prod.restockingFee = prod.returnFee * returnQuantity;
        }
        if (prod.returnFeeType === 'PERCENTAGE'){
          prod.restockingFee = (prod.returnFee/100.00) * prod.refundSubTotal;
        }
        const promoRefund = (prod.promotionDiscount / totalQuantity) * returnQuantity;
        prod.refundSubTotal -= promoRefund;
        const salesTax = (prod.tax / totalQuantity) * returnQuantity;
        const shippingCost = this.order.shippingCost;
        const newShippingCost = this.order.shippingCost - prod.shippingAndHandling;
        let shippingTaxRefund = 0.0;
        if(shippingCost && shippingCost !== null){
          const shippingDifference = shippingCost- newShippingCost;
          if(shippingDifference > 0) {
            shippingTaxRefund = (this.order.shippingTax / shippingCost) * shippingDifference;
          }
        }
        prod.taxRefund = shippingTaxRefund + salesTax;

        if(this.order.orderPromotionDiscounts !== null && this.order.orderPromotionDiscounts > 0) {
          const orderTotalWithoutPromotionApplied = this.order.total + this.order.orderPromotionDiscounts;
          const totalOrderPromotionRefund = ((this.order.orderPromotionDiscounts * (prod.refundSubTotal + salesTax)) / orderTotalWithoutPromotionApplied);
          prod.refundSubTotal = prod.refundSubTotal - totalOrderPromotionRefund;
        }

        prod.totalEstimatedRefund = prod.shippingAndHandling + shippingTaxRefund + salesTax + prod.refundSubTotal - prod.restockingFee;
        this.refundSubTotal += prod.refundSubTotal;
        this.shippingAndHandling += prod.shippingAndHandling;
        this.totalEstimatedRefund += prod.totalEstimatedRefund;
        this.taxRefund += prod.taxRefund;
        this.restockingFee += prod.restockingFee;
      }
  }

  openLinkInNewTab() {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.tokenService.saveReturnOrder(this.order);
    const url = `/${this.subdomain}/return-refund-slip`;
    const fullUrl = this.router.serializeUrl(this.router.createUrlTree([url]));
    window.open(fullUrl, '_blank');
  }

  openLabel() {
    const fullUrl = this.awsURL + this.order?.returnLabelUrl;
    window.open(fullUrl, '_blank');
  }


  getLabelUrl(): string {
    return this.awsURL + this.order?.returnLabelUrl; // Construct the URL
  }

  onOrderUpdated(orderData: OrderResponse){
    this.order = orderData;
    this.order.orderDetails = this.order?.orderDetails.filter(order => order?.returnPolicyType?.toString() !== 'SALES_ARE_FINAL');
    this.returnOrderTracks = this.order?.returnOrderTracks?.map((track: any) => track?.status);
    this.currentStatus = this.returnOrderTracks[this.returnOrderTracks?.length - 1];
    this.tokenService.saveReturnOrder(this.order);
  }


  viewAndDownloadFile(): void {
    const fileUrl = `${this.awsURL}${this.order?.returnLabelUrl}`; // Dynamic URL
    const fileName = 'return-label.png'; // Desired filename for download

    // Fetch the file
    fetch(fileUrl)
      .then(response => {
        if (!response.ok) {
          throw new Error('File fetch failed');
        }
        return response.blob();
      })
      .then(blob => {
        // Trigger file download
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click(); // Trigger the download
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url); // Clean up

        // Open the file in a new tab
        window.open(fileUrl, '_blank');
      })
      .catch(error => console.error('Error handling file:', error));
  }



}

--- ./src/app/site-themes/four-theme/four-theme-my-order/return-refund-details/return-reasons-box/return-reasons-box.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/return-refund-details/return-reasons-box/return-reasons-box.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { ViewReturnImagesComponent } from '../view-return-images/view-return-images.component';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { OrderResponse } from 'src/app/models/OrderResponse';

\1
  standalone: true,
  selector: 'app-return-reasons-box',
  templateUrl: './return-reasons-box.component.html',
  styleUrls: ['./return-reasons-box.component.css']
})
export class ReturnReasonsBoxComponent implements OnInit {

  @Input() prod!: OrderDetailResponse;
  @Input() order!: OrderResponse;
  @Input() orderId!: number;
  @Output() updatedOrder = new EventEmitter<OrderResponse>();
  awsURL = environment.awsKey;
  returnOrderTracks: any[] = [];
  firstTimeCalled: boolean = false;
  constructor(public dialog: MatDialog, private shoppingCart: ShoppingCartService) { }

  ngOnInit() {
    this.returnOrderTracks = this.order?.returnOrderTracks?.map((track: any) => track?.status);
  }

  async cancelItemReturn(){
    this.firstTimeCalled = true;
    (await this.shoppingCart.cancelItemReturn(this.orderId, this.prod.id)).subscribe(
      result => {
        if(result?.data?.cancelItemReturn == null){
          this.firstTimeCalled = false;
          return;
        }
        this.prod.returnOrderStatus = 'RETURN_CANCELLED';
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess',
          data: { title: '', message: result?.data?.cancelItemReturn?.message } });
          this.updatedOrder.emit(result?.data?.cancelItemReturn?.data);
          this.firstTimeCalled = false;
      }
    );
  }

  viewReturnImages(prod: OrderDetailResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    dialogConfig.data = prod;
    const dialogRef = this.dialog.open(ViewReturnImagesComponent, dialogConfig);
  }

}

--- ./src/app/site-themes/four-theme/four-theme-my-order/return-refund-details/return-refund-slip/return-refund-slip.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/return-refund-details/return-refund-slip/return-refund-slip.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Address } from 'src/app/models/address';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-return-refund-slip',
  templateUrl: './return-refund-slip.component.html',
  styleUrls: ['./return-refund-slip.component.css']
})
export class ReturnRefundSlipComponent implements OnInit {

  order!: OrderResponse;
  businessAddresses: Address[] = [];
  qrCodeImage!: string;
  currency = this.tokenService.getCurrency()?.symbol;
  businessDetails: any;
  awsURL = environment.awsKey;
  constructor(private tokenService: TokenStorageService, private businessSettingService: BusinessSettingService) { }

  ngOnInit() {
    this.order = this.tokenService.getReturnOrder();
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.returnPolicyType?.toString() !== 'SALES_ARE_FINAL');
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.returnQuantity > 0);
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.quantity > 0);
    this.qrCodeImage = this.generateQRCode(this.order.returnQrCode);
    this.getBusinessDetails();
    this.listBusinessAddresses();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  getBusinessDetails(){
    this.businessSettingService.getBusinessDetailsById(Number(this.tokenService.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessDetailsById){
        this.businessDetails = data?.data?.getBusinessDetailsById;
      }
    });
   }
  listBusinessAddresses(){
    this.businessSettingService.getBusinessAddressesByBusinessId(Number(this.tokenService.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
      }
    });
   }

   generateQRCode(qrCodebase64: any): string {
    return `data:image/png;base64,${qrCodebase64}`;
  }

  print_slip() {
    window.print();
  }

}

--- ./src/app/site-themes/four-theme/four-theme-my-order/return-refund-details/view-return-images/view-return-images.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/return-refund-details/view-return-images/view-return-images.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-view-return-images',
  templateUrl: './view-return-images.component.html',
  styleUrls: ['./view-return-images.component.css']
})
export class ViewReturnImagesComponent implements OnInit {


  customOptions: OwlOptions = {
    loop: true,
    margin: 20,
    nav: false, // Add this option to enable navigation arrows
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 1
      },
      400: {
        items: 1
      },
      740: {
        items:1
      },
      940: {
        items: 1
      }
    },
  }

  awsURL = environment.awsKey;
  constructor(@Inject(MAT_DIALOG_DATA) public data: any,) { }

  ngOnInit() {
  }

}

--- ./src/app/site-themes/four-theme/four-theme-my-order/view-qr-code/view-qr-code.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/view-qr-code/view-qr-code.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit, Inject } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-view-qr-code',
  templateUrl: './view-qr-code.component.html',
  styleUrls: ['./view-qr-code.component.css']
})
export class ViewQrCodeComponent implements OnInit {
  qrCodeImage!: string;
  awsUrl = environment.awsKey;
  constructor( public dialogRef: MatDialogRef<ViewQrCodeComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any) { }

  ngOnInit() {
    this.qrCodeImage = this.generateQRCode(this.data.qrCodeImage);
  }


  generateQRCode(qrCodebase64: any): string {
    return `data:image/png;base64,${qrCodebase64}`;
  }
}

--- ./src/app/site-themes/four-theme/four-theme-my-order/return-refund-process/return-refund-process.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/return-refund-process/return-refund-process.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { ReturnReasonsDetailsComponent } from '../return-reasons-details/return-reasons-details.component';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ActivatedRoute, Router } from '@angular/router';
import { environment } from 'src/environments/environment';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { Address } from 'src/app/models/address';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { StorehoursComponent } from '../../four-theme-checkout/storehours/storehours.component';

\1
  standalone: true,
  selector: 'app-return-refund-process',
  templateUrl: './return-refund-process.component.html',
  styleUrls: ['./return-refund-process.component.css']
})
export class ReturnRefundProcessComponent implements OnInit {

  selectedImages: { file: File; url: string }[] = [];
  selectedReason: string = '';
  returnQuantity: string = ''
  packagingCondition: string = '';
  DeliveryOptions: string = '';
  RefundOptions: string = '';
  subdomain: string = '';
  order!: OrderResponse;
  awsUrl = environment.awsKey;
  currency = this.tokenStorage.getCurrency()?.symbol;
  returnReason: string = '';
  businessAddresses: Address[] = [];
  businessHours: any[] = [];
  updatedDate!: Date;
  imagesObject: any[] = [];
  refundSubTotal: number = 0.0;
  shippingAndHandling: number = 0.0;
  totalEstimatedRefund: number = 0.0;
  taxRefund: number = 0.0;
  restockingFee: number = 0.0;
  disableButton: boolean = false;
  returnResolutionTypes: any[] = [];
  isReturning: boolean = false;
  loadingOrders = false;
  noOrdersAvailable = false;
  orderId!: number;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  user = this.tokenStorage.getUser();

  constructor(private router: Router, private route: ActivatedRoute,public dialog: MatDialog,private shoppingCart: ShoppingCartService,
     private tokenStorage: TokenStorageService, private businessSettings: BusinessSettingService,) { }


  async ngOnInit() {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.orderId = this.route.snapshot.params['id'];
    await this.getByOrderId();
    if(!this.user){
      if(environment.env !== 'local'){
        this.subdomain = '';
      }
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  async getByOrderId() {
    this.loadingOrders = true;
    this.noOrdersAvailable = false;
      (await this.shoppingCart.getByOrderId(this.orderId, this.businessId)).subscribe(
          data => {
              if (data?.errors) {
                  this.loadingOrders = false;
                  return;
              }
              if (data?.data?.getOrdersByCustomerAndBusinessAndOrderId) {
                  this.order = data?.data?.getOrdersByCustomerAndBusinessAndOrderId;
                  this.loadingOrders = false;
                  this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.returnPolicyType?.toString() !== 'SALES_ARE_FINAL');
                  this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.noReturnAgain === false);
                  this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.quantity > 0);
                  this.order.orderDetails = this.order?.orderDetails?.filter(order => {
                    if (order.returnQuantity > 0) {
                      order.quantity = order.quantity - order.returnQuantity;
                      return order.quantity > 0;
                    }
                    return true;
                  });
                  if (this.order.orderDetails.length == 0) {
                    this.popupError('There are no items for return!');
                    return;
                  }
                  if (this.order?.orderDetails) {
                    this.order?.orderDetails?.forEach(prod => {
                      prod.returnReasonType = '';
                      prod.returnPackagingType = '';
                      prod.returnReason = '';
                      prod.returnImages = [];
                      prod.refundSubTotal = 0.0;
                      prod.shippingAndHandling = 0.0;
                      prod.totalEstimatedRefund = 0.0;
                      prod.taxRefund = 0.0;
                      prod.restockingFee = 0.0;
                    });
                  }
                  this.getReturnResolutionTypes();
                  this.listBusinessAddresses();
                  this.getBusinessHoursOfOperation();
              } else {
                  this.loadingOrders = false;
                  this.noOrdersAvailable = true;
              }
          },
          error => {
              this.loadingOrders = false;
              this.noOrdersAvailable = true;
          }
      );
}

  getQuantityOptions(quantity: number): number[] {
    return Array.from({ length: quantity }, (_, i) => i + 1);
  }

  returnReasonsDetails(){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = this.order;
    const dialogRef = this.dialog.open(ReturnReasonsDetailsComponent, dialogConfig);
  }


  onFileSelected(event: Event, prod: OrderDetailResponse): void {
    const input = event.target as HTMLInputElement;
    if (input.files) {
      const files = Array.from(input.files);
      files.forEach((file) => {
        const reader = new FileReader();
        reader.onload = (e: ProgressEvent<FileReader>) => {
          if (e.target?.result) {
            prod.returnSelectedImages = Array.from(files);
            prod.returnImages.push(e.target.result as string);
            this.selectedImages.push({
              file,
              url: e.target.result as string
            });
          }
        };
        reader.readAsDataURL(file);
      });
    }
  }

  removeImage(prod: OrderDetailResponse, index: number): void {
    this.selectedImages?.splice(index, 1);
    prod?.returnImages?.splice(index, 1);
    prod?.returnSelectedImages?.splice(index, 1);
  }

  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
      }
    });
   }

   getBusinessHoursOfOperation(){
    this.businessSettings.getBusinessHoursOfOperation(Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if(data?.data?.getBusinessHoursOfOperation != null){
          this.businessHours = data?.data?.getBusinessHoursOfOperation;
        }
      }
    );
   }

   async getReturnResolutionTypes(){
    (await this.shoppingCart.getReturnResolutionTypes(this.order.id)).subscribe(
      data => {
        if(data?.data?.getReturnResolutionTypes != null){
          this.returnResolutionTypes = data?.data?.getReturnResolutionTypes;
        }
      }
    );
   }

   getOpenCloseMessage(): string {
    const daysOfWeek = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
    const todayIndex = new Date().getDay();
    const todayInfo = this.businessHours?.find(day => day?.days === daysOfWeek[todayIndex]);
    if (todayInfo?.isOpen === 'YES') {
      if (todayInfo?.allDay) {
        return `<p class='font-weight-500 text-black m-0'>Today <span class="text-success-lighter font-weight-600">Open</span> 24 hours</p>`;
      } else {
        const currentTime = new Date();
        const closingTime = this.getTimeFromHours(
          todayInfo?.endingHours,
          todayInfo?.endingMinute,
          todayInfo?.amORPmEndingHours
        );
        if (currentTime < closingTime) {
          return `<p class='font-weight-500 text-black m-0'>Today <span class="text-success-lighter font-weight-600">Open</span> until ${todayInfo?.endingHours}:${todayInfo?.endingMinute} ${todayInfo?.amORPmEndingHours}</p>`;
        } else {
          const nextOpenDayInfo = this.findNextOpenDayInfo(todayIndex + 1);
          if (nextOpenDayInfo.dayInfo) {
            return `<p class='font-weight-500 text-black m-0'>Today <span class="text-danger font-weight-600">Closed</span>, next <span class="text-success">Open</span> ${nextOpenDayInfo.daysUntilOpen} from ${this.formatHours(nextOpenDayInfo.dayInfo)}</p>`;
          } else {
            return `<p class='font-weight-500 text-black m-0'><span class="text-danger font-weight-600">Closed</span> for the week</p>`;
          }
        }
      }
    }
    for (let i = 1; i < daysOfWeek.length; i++) {
      const index = (todayIndex + i) % 7;
      const dayInfo = this.businessHours?.find(day => day?.days === daysOfWeek[index]);
      if (dayInfo?.isOpen === 'YES') {
        const daysUntilOpen = i === 1 ? 'Tomorrow' : daysOfWeek[index];
        if (dayInfo?.allDay) {
          return `<p class='font-weight-500 text-black m-0'>${daysUntilOpen} <span class="text-success-lighter font-weight-600">Open</span> 24 hours</p>`;
        } else {
          return `<p class='font-weight-500 text-black m-0'>${daysUntilOpen} <span class="text-success-lighter font-weight-600">Open</span> from ${this.formatHours(dayInfo)}</p>`;
        }
      }
    }
    return `<p class='font-weight-500 text-black m-0'><span class="text-danger font-weight-600">Closed</span> for the week</p>`;
  }

  getTimeFromHours(hours: string, minutes: string, period: string): Date {
    const time = new Date();
    const hours24 = period === 'PM' && +hours !== 12 ? +hours + 12 : +hours;
    time.setHours(hours24);
    time.setMinutes(+minutes);
    time.setSeconds(0);
    return time;
  }

  findNextOpenDayInfo(startIndex: number): { daysUntilOpen: string, dayInfo: any } {
    for (let i = 0; i < 7; i++) {
      const nextIndex = (startIndex + i) % 7;
      const nextDayInfo = this.businessHours?.find(day => day.days === ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'][nextIndex]);
      if (nextDayInfo && nextDayInfo.isOpen === 'YES') {
        const daysUntilOpen = i === 0 ? 'Tomorrow' : nextDayInfo.days;
        return { daysUntilOpen, dayInfo: nextDayInfo };
      }
    }
    return { daysUntilOpen: 'later this week', dayInfo: null };
  }

  formatHours(dayInfo: any): string {
    return `${dayInfo?.startingHours}:${dayInfo?.startingMinute} ${dayInfo?.amORPmStartingHours} - ${dayInfo?.endingHours}:${dayInfo?.endingMinute} ${dayInfo?.amORPmEndingHours}`;
  }

  calculateTimePeriodDifference(item: any, order: any): boolean {
    const deliverDateObj = new Date(order.deliverDate);
    deliverDateObj.setDate(deliverDateObj.getDate() + item.timePeriodReturn);
    const today = new Date();
    const differenceInTime = deliverDateObj.getTime() - today.getTime();
    const differenceInDays = Math.ceil(differenceInTime / (1000 * 60 * 60 * 24));
    this.updatedDate = deliverDateObj;
    return differenceInDays < 0;
}

  toggleCheckbox(prod: OrderDetailResponse, event: any) {
    if (event.checked) {
      prod.isSelected = true;
      this.onActionChange(prod);
    } else {
      prod.isSelected = false;
      this.refundSubTotal -= prod.refundSubTotal;
      this.shippingAndHandling -= prod.shippingAndHandling;
      this.totalEstimatedRefund -= prod.totalEstimatedRefund;
      this.taxRefund -= prod.taxRefund;
      this.restockingFee -= prod.restockingFee;
      prod.refundSubTotal = 0.0;
      prod.shippingAndHandling = 0.0;
      prod.totalEstimatedRefund = 0.0;
      prod.taxRefund = 0.0;
      prod.restockingFee = 0.0;
      const index = this.imagesObject.findIndex(
        (item) => item.image === prod?.product?.mainImageUrl
      );
      if (index > -1) {
        this.imagesObject.splice(index, 1);
      }
    }
  }

  onActionChange(prod: OrderDetailResponse){
    const index = this.imagesObject.findIndex(
      (item) => item.image === prod?.product?.mainImageUrl
    );
    if (index > -1) {
      this.imagesObject[index].quantity = prod.returnQuantity;
    } else if (prod.returnQuantity) {
      this.imagesObject.push({ image: prod?.product?.mainImageUrl, quantity: prod.returnQuantity });
    }
    if(prod.isSelected){
      this.order?.orderDetails?.forEach(prod => {
        this.refundSubTotal -= prod.refundSubTotal;
        this.shippingAndHandling -= prod.shippingAndHandling;
        this.totalEstimatedRefund -= prod.totalEstimatedRefund;
        this.taxRefund -= prod.taxRefund;
        this.restockingFee -= prod.restockingFee;
      });
      let totalQuantity = prod.acceptedQuantity + prod.quantityDifference;
      prod.shippingAndHandling = (prod.surcharge / totalQuantity) * prod.returnQuantity;
      if(this.order.orderType !== 'ORDER_ONLINE_SHIP_TO_HOME'){
        prod.shippingAndHandling = 0.0;
      }
      prod.refundSubTotal = (prod.salePrice * prod.returnQuantity);
      if (prod.returnFeeType === 'FIXED'){
        prod.restockingFee = prod.returnFee * prod.returnQuantity;
      }
      if (prod.returnFeeType === 'PERCENTAGE'){
        prod.restockingFee = (prod.returnFee/100.00) * prod.refundSubTotal;
      }
      const promoRefund = (prod.promotionDiscount / totalQuantity) * prod.returnQuantity;
      prod.refundSubTotal -= promoRefund;
      const salesTax = (prod.tax / totalQuantity) * prod.returnQuantity;
      const shippingCost = this.order.shippingCost;
      const newShippingCost = this.order.shippingCost - prod.shippingAndHandling;
      let shippingTaxRefund = 0.0;
      if(shippingCost && shippingCost !== null){
        const shippingDifference = shippingCost- newShippingCost;
        if(shippingDifference > 0) {
          shippingTaxRefund = (this.order.shippingTax / shippingCost) * shippingDifference;
        }
      }
      prod.taxRefund = shippingTaxRefund + salesTax;

      if(this.order.orderPromotionDiscounts !== null && this.order.orderPromotionDiscounts > 0) {
          const orderTotalWithoutPromotionApplied = this.order.total + this.order.orderPromotionDiscounts;
          const totalOrderPromotionRefund = ((this.order.orderPromotionDiscounts * (prod.refundSubTotal + salesTax)) / orderTotalWithoutPromotionApplied);
          prod.refundSubTotal = prod.refundSubTotal - totalOrderPromotionRefund;
        }
      prod.totalEstimatedRefund = prod.shippingAndHandling + shippingTaxRefund + salesTax + prod.refundSubTotal - prod.restockingFee;
    }
    this.order?.orderDetails?.forEach(prod => {
      this.refundSubTotal += prod.refundSubTotal;
      this.shippingAndHandling += prod.shippingAndHandling;
      this.totalEstimatedRefund += prod.totalEstimatedRefund;
      this.taxRefund += prod.taxRefund;
      this.restockingFee += prod.restockingFee;
    });
  }

  async initiateReturn(orderId: number, resolutionType: string, deliveryType: string): Promise<void> {
  this.isReturning = true;

  const selectedProducts = this.order?.orderDetails?.filter((prod: any) => prod.isSelected);
  const invalidProduct = selectedProducts?.find((prod: any) => {
    return (
      prod.returnQuantity == null ||
      (prod.returnReasonType == null || !prod.returnReasonType) ||
      (prod.returnPackagingType == null || !prod.returnPackagingType) ||
      (!prod.returnReason || prod.returnReason == null) ||
      (!prod.returnSelectedImages || prod.returnSelectedImages.length === 0)
    );
  });

  if (invalidProduct) {
    this.popupError('All selected products must have valid quantity, reason, packaging, detailed information, and at least one image.');
    this.isReturning = false;
    return;
  }

  if (selectedProducts?.length === 0) {
    this.popupError('Please select at least one item for return');
    this.isReturning = false;
    return;
  }

  if (!resolutionType || resolutionType === '') {
    this.popupError('Please Select Preferred Resolution');
    this.isReturning = false;
    return;
  }

  if (!deliveryType || deliveryType === '') {
    this.popupError('Please Select Options for Delivery');
    this.isReturning = false;
    return;
  }

  const returnProducts = selectedProducts?.map((prod: any) => ({
    id: prod.id,
    quantity: prod.returnQuantity,
    reason: prod.returnReasonType,
    packaging: prod.returnPackagingType,
    detailedInfo: prod.returnReason,
    images: prod.returnSelectedImages,
  }));

  try {
    this.disableButton = true;
    const response = await (await this.shoppingCart.initiateReturnRequest(orderId, returnProducts, resolutionType, deliveryType)).toPromise();
    if (response?.errors) {
      this.disableButton = false;
      this.popupError(response?.errors[0]?.errorMessage);
      this.isReturning = false;
      return;
    }

    if (environment.env !== 'local') {
      this.subdomain = '';
    }

    this.tokenStorage.saveReturnOrder(response?.data?.initiateReturnRequest?.data);
    this.router.navigateByUrl(`/${this.subdomain}/return-refund-details`);
  } catch (error) {
    this.popupError('Something went wrong. Please try again later.');
  } finally {
    this.isReturning = false;
    this.disableButton = false;
  }
}


  private popupError(message: string) {
    this.dialog.open(NotifacationMessageComponent, {
      backdropClass: 'notificationmodal-popup',
      width: '450px',
      data: { title: 'ERROR', message: message }
    });
  }


   viewStoreHours(){
      const dialogConfig = new MatDialogConfig();
      dialogConfig.panelClass = 'modal-medium-width';
      dialogConfig.data = this.businessHours;
      this.dialog.open( StorehoursComponent, dialogConfig);
    }

    viewRequestStatus() {
        this.router.navigateByUrl(`/${this.subdomain}/return-refund-details`);
    }

}

--- ./src/app/site-themes/four-theme/four-theme-my-order/editpickupinfoforreserve/editpickupinfoforreserve.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/editpickupinfoforreserve/editpickupinfoforreserve.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { formatDate } from '@angular/common';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Component, Inject, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { lastValueFrom } from 'rxjs';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-editpickupinfoforreserve',
  templateUrl: './editpickupinfoforreserve.component.html',
  styleUrls: ['./editpickupinfoforreserve.component.css']
})
export class EditpickupinfoforreserveComponent implements OnInit {
  pickupPerson: string = '';
  order!: OrderResponse;
  addCustomerInfo: boolean = false;
  pickupDetails!: FormGroup;
  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog,private fb: FormBuilder,
  private translate: TranslateService,
  private shoppingCart: ShoppingCartService, public dialogRef: MatDialogRef<EditpickupinfoforreserveComponent>) { }

  ngOnInit() {
    this.order = this.data;
    const pickupTime = new Date(this.order.pickupTime);
    if (isNaN(pickupTime.getTime())) {
      throw new Error('Invalid pickupTime format');
    }
    const pickupDate = pickupTime.toISOString().split('T')[0];
    const pickupTimeFormatted = pickupTime.toTimeString().split(' ')[0].slice(0, 5);
    this.pickupDetails = this.fb.group({
      pickupDate: [pickupDate, Validators.required],
      pickupTime: [pickupTimeFormatted, Validators.required],
    });
  }

  get getControl(): { [key: string]: AbstractControl; } {
    return this.pickupDetails.controls;
  }

  filterDates = (date: Date | null): boolean => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return date ? date >= today : false;
  };

  async updatePickupInfo() {
    const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
    const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
    if (!pickupDateValue || !pickupTimeValue) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'Please update correct details' }
      });
      return;
    }
    this.addCustomerInfo = true;
    try {
      const isTimeAvailable = await this.checkTimeAvailable();
      if (!isTimeAvailable) {
        this.addCustomerInfo = false;
        return;
      }
      const [hours, minutes] = pickupTimeValue.split(':');
      const combinedDateTime = new Date(pickupDateValue);
      combinedDateTime.setHours(Number(hours), Number(minutes));
      const browserLocale = navigator.language || 'en-US';
      const formattedDateTime = formatDate(combinedDateTime, 'yyyy-MM-dd HH:mm:ss', browserLocale);
      (await this.shoppingCart.updatePickUpInfo(
        this.order.id, '', '', '', '', formattedDateTime)).subscribe(
        data => {
          if (data?.errors) {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
            });
            this.addCustomerInfo = false;
            return;
          }
          if (data?.data?.updatePickUpInfo) {
            this.dialogRef.close({ event: 'close', data: data?.data?.updatePickUpInfo?.data });
            this.dialog.open(SucessmsgPopupComponent, {
              backdropClass: 'notificationmodal-popup-sucess',
              data: {
                title: 'SUCCESS',
                message: data?.data?.updatePickUpInfo?.message
              }
            });
          }
        }
      );
    } catch (error) {
      this.addCustomerInfo = false;
    }
}

async checkTimeAvailable(): Promise<boolean> {
    const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
    const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
    if (!pickupDateValue || !pickupTimeValue) {
      return false;
    }
    try {
      const [hours, minutes] = pickupTimeValue.split(':');
      const combinedDateTime = new Date(pickupDateValue);
      combinedDateTime.setHours(Number(hours), Number(minutes));
      const browserLocale = navigator.language || 'en-US';
      const formattedDateTime = formatDate(combinedDateTime, 'yyyy-MM-ddTHH:mm:ss', browserLocale);
      const response = await lastValueFrom(
        await this.shoppingCart.isTimeAvailable(formattedDateTime)
      );
      if (response?.errors) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: response?.errors[0]?.errorMessage }
        });
        return false;
      }
      if (response?.data?.isTimeAvailable?.timeAvailable === false) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.translate.instant('PLEASE_SELECT_BUSINESS_TIME') }
        });
        return false;
      }
      return response?.data?.isTimeAvailable?.timeAvailable === true;
    } catch (error) {
      console.error('Error checking time availability:', error);
      return false;
    }
}

public popupMessagenotefication(message: string) {
  this.dialog.open(NotifacationMessageComponent, {
    backdropClass: 'notificationmodal-popup',
    width: '450px',
    data: { title: 'ERROR', message: message },
  });
}

}

--- ./src/app/site-themes/four-theme/four-theme-my-order/order-details/order-details.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/order-details/order-details.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';
import { EditReviewModalComponent } from '../../edit-review-modal/edit-review-modal.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { EditordercustomerdetailsComponent } from '../editordercustomerdetails/editordercustomerdetails.component';
import { EditordershippingaddressComponent } from '../editordershippingaddress/editordershippingaddress.component';
import { EditorderpaymentmethodComponent } from '../editorderpaymentmethod/editorderpaymentmethod.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { EditorderpickupinfoComponent } from '../editorderpickupinfo/editorderpickupinfo.component';
import { ProofofdeliveryComponent } from '../proofofdelivery/proofofdelivery.component';
import { ProofofPickupComponent } from '../ProofofPickup/ProofofPickup.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';
import { EditpickupinfoforreserveComponent } from '../editpickupinfoforreserve/editpickupinfoforreserve.component';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-order-details',
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css']
})
export class OrderDetailsComponent implements OnInit {

  subdomain: string = '';
  businessId = Number(this.tokenStorage.getBusinessID()!);
  order!: OrderResponse;
  user = this.tokenStorage.getUser();
  orderPrefix = this.tokenStorage.getOrderFormat()?.prefix;
  orderSuffix = this.tokenStorage.getOrderFormat()?.suffix;
  awsUrl = environment.awsKey;
  currency = this.tokenStorage.getCurrency()?.symbol;
  orderHistory: boolean = false;
  differenceInDays!: number;
  isDateExceeded: boolean = false;
  updatedDate!: Date;
  sessionResponse!: SessionResponse;
  orderId!: number;
  loadingOrders = false;
  noOrdersAvailable = false;
  paymentId: string = '';
  token: string = '';
  payerId: string = '';

  constructor( private route: ActivatedRoute, public shoppingCart: ShoppingCartService,private router: Router, private sharedService: SharedService,
    public tokenStorage: TokenStorageService, public dialog: MatDialog,private cdr: ChangeDetectorRef,
    private cookieDate: CookieDataServiceService,) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.orderId = this.route.snapshot.params['id'];
    this.route.queryParams.subscribe(async params => {
      console.log(params, 'paramssss')
      if (params && Object.keys(params).length > 0){
          const paymentId = params['paymentId'];
          const token = params['token'];
          const payerId = params['PayerID'];
          await this.getByOrderId();
          if (paymentId && token && payerId) {
            this.paymentId = paymentId;
            this.token = token;
            this.payerId = payerId;
            await this.updatePaymentValidation();
          } else{
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: 'Payment have declined!' }
            });
          }
      }
    })

    if(!this.user && (this.sessionResponse?.userType !== 'GUEST' || this.tokenStorage.getOrderForOrderDetails() == null)){
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    if(this.user){
      this.getByOrderId();
    } else {
      this.order = this.tokenStorage.getOrderForOrderDetails();
      this.getOrderTracking();
    }
    this.orderHistory = window.history.state.orderhistory;
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  async updatePaymentValidation(){
    (await this.shoppingCart.updatePaymentValidation(this.orderId, this.paymentId, this.token, this.payerId, 'PAYPAL')).subscribe(
      data => {
        if(data?.errors){
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: {
                title: 'ERROR',
                message: data?.errors[0]?.errorMessage
            }
            });
          return;
        }
        if(data?.data?.updatePaymentValidation){
          console.log(data, 'updatePaymentValidation')
          this.dialog.open(SucessmsgPopupComponent, {
            backdropClass: 'notificationmodal-popup-sucess',
            data: {
                title: 'SUCCESS',
                message: data?.data?.updatePaymentValidation?.message
            }
        });
          this.order = data?.data?.updatePaymentValidation?.data;
          this.router.navigate([], {
            relativeTo: this.route,
            queryParams: {},
            replaceUrl: true
          });
        }
      }
    );
  }

  async getOrderTracking(){
      (await this.shoppingCart.getOrderTracking(this.order?.businessOrderId.trim(), this.order?.orderAddressResponse?.email.trim())).subscribe(
        data => {
          if(data?.errors){
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: '', message: data?.errors[0]?.errorMessage}
            });
            return;
          }
          if(data?.data?.getOrderTracking){
            const order = data?.data?.getOrderTracking;
            this.order = order;
            this.tokenStorage.saveOrderForOrderDetails(order);
          }
        }
      )
  }

  async getByOrderId() {
    if (this.user) {
      this.loadingOrders = true;
      this.noOrdersAvailable = false;
        (await this.shoppingCart.getByOrderId(this.orderId, this.businessId)).subscribe(
            data => {
                if (data?.errors) {
                    this.loadingOrders = false;
                    return;
                }
                if (data?.data?.getOrdersByCustomerAndBusinessAndOrderId) {
                    this.order = data?.data?.getOrdersByCustomerAndBusinessAndOrderId;
                    this.loadingOrders = false;
                } else {
                    this.loadingOrders = false;
                    this.noOrdersAvailable = true;
                }
            },
            error => {
                this.loadingOrders = false;
                this.noOrdersAvailable = true;
            }
        );
    }
}

  async actionOnPendingOrder(itemId: number, status: string){
    (await this.shoppingCart.actionOnPendingOrder(this.order.id, itemId, status)).subscribe(
      async data => {
        if(data?.data?.actionOnPendingOrder != null){
         this.order = data?.data?.actionOnPendingOrder;
         this.cdr.detectChanges();
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async cancelOrder(order: any){
    (await this.shoppingCart.cancelOrder(order.id)).subscribe(
      async data => {
        if(data?.data?.cancelOrder != null){
          this.order = data?.data?.cancelOrder?.data;
          this.cdr.detectChanges();
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  getTracks(order: OrderResponse): any[] {
    return order?.orderTracks?.map((track: any) => track?.status);
  }

  calculateTimePeriodDifference(item: any, order: any): any {
    const deliverDateObj = new Date(order.deliverDate);
    deliverDateObj.setDate(deliverDateObj.getDate() + item.timePeriodReturn);
    const today = new Date();
    const differenceInTime = deliverDateObj.getTime() - today.getTime();
    const differenceInDays = Math.ceil(differenceInTime / (1000 * 60 * 60 * 24));
    this.isDateExceeded = differenceInDays < 0;
    this.updatedDate = deliverDateObj;
    this.differenceInDays = differenceInDays;
    return this.updatedDate;
}

  openPrintOrderSummary(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    this.tokenStorage.saveOrderForPrint(order);
    const url = `/${this.subdomain}/print-order-summary/${orderId}`;
    const fullUrl = this.router.serializeUrl(this.router.createUrlTree([url]));
    window.open(fullUrl, '_blank');
  }

  editreviewmodal(product: ProductResponse){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = {action: 'ADD', item: product};
    this.dialog.open(EditReviewModalComponent, dialogConfig);
  }

  openLinkInNewTab(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    this.tokenStorage.saveOrderForPrint(order);
    const url = `/${this.subdomain}/print-order-summary/${orderId}`;
    const fullUrl = this.router.serializeUrl(this.router.createUrlTree([url]));
    window.open(fullUrl, '_blank');
  }

  editOrderCustomerDetails() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = this.order;
    const dialogRef = this.dialog.open( EditordercustomerdetailsComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if(result.data){
        this.order = result.data;
        this.tokenStorage.saveOrderForOrderDetails(this.order);
        this.sharedService.setOrderData(this.order);
      }
     });
  }

  editOrderShippingDetails(){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = this.order;
    const dialogRef = this.dialog.open( EditordershippingaddressComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if(result.data){
        this.order = result.data;
        this.tokenStorage.saveOrderForOrderDetails(this.order);
        this.sharedService.setOrderData(this.order);
      }
     });
  }

  editOrderPaymentMethod() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    dialogConfig.data = this.order;
    const dialogRef = this.dialog.open( EditorderpaymentmethodComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if(result.data){
        this.order = result.data;
        this.tokenStorage.saveOrderForOrderDetails(this.order);
        this.sharedService.setOrderData(this.order);
      }
     });
  }


  editPickupInformation() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = this.order;
    const dialogRef = this.dialog.open( EditorderpickupinfoComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if(result.data){
        this.order = result.data;
        this.tokenStorage.saveOrderForOrderDetails(this.order);
        this.sharedService.setOrderData(this.order);
      }
     });
}


editPickupInformationReserve() {
  const dialogConfig = new MatDialogConfig();
  dialogConfig.panelClass = 'modal-medium-width';
  dialogConfig.data = this.order;
  const dialogRef = this.dialog.open( EditpickupinfoforreserveComponent, dialogConfig);
  dialogRef.afterClosed().subscribe((result) => {
    if(result.data){
      this.order = result.data;
      this.tokenStorage.saveOrderForOrderDetails(this.order);
      this.sharedService.setOrderData(this.order);
    }
   });
}


seeProofofDelivery(order: OrderResponse) {
  const dialogConfig = new MatDialogConfig();
  dialogConfig.panelClass = 'modal-medium-width';
  dialogConfig.data = order;
  const dialogRef = this.dialog.open(ProofofdeliveryComponent, dialogConfig);
}

seeProofofPickup(order: OrderResponse) {
  const dialogConfig = new MatDialogConfig();
  dialogConfig.panelClass = 'modal-medium-width';
  dialogConfig.data = order;
  const dialogRef = this.dialog.open(ProofofPickupComponent, dialogConfig);
}
openReturnOrder(order: any) {
  if (environment.env !== 'local') {
    this.subdomain = '';
  }
  const orderId = order.id;
  const url = `/${this.subdomain}/return-refund/${orderId}`;
  this.router.navigateByUrl(url, {state: {order: order, orderhistory: false}});
}

convertUtcToLocal(utcDate: any): string {
  utcDate = utcDate + '.00Z'
  const date = new Date(utcDate);
  return date.toLocaleString();
}

openReturnOrderDetails(order: any) {
  if (environment.env !== 'local') {
    this.subdomain = '';
  }
  this.tokenStorage.saveReturnOrder(order);
  const url = `/${this.subdomain}/return-refund-details`;
  this.router.navigateByUrl(url);
}

getOrderSales(order: OrderResponse): any[] {
  return order?.orderDetails?.filter((sale: any) => sale?.returnPolicyType === 'SALES_RETURN_ALLOWED');
}

getItemReturnBlocked(order: OrderResponse): any[] {
  return order?.orderDetails?.filter((item: OrderDetailResponse) => item?.noReturnAgain === true);
}


}

--- ./src/app/site-themes/four-theme/four-theme-my-order/editorderpickupinfo/editorderpickupinfo.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/editorderpickupinfo/editorderpickupinfo.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { formatDate } from '@angular/common';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Component, Inject, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { lastValueFrom } from 'rxjs';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-editorderpickupinfo',
  templateUrl: './editorderpickupinfo.component.html',
  styleUrls: ['./editorderpickupinfo.component.css']
})
export class EditorderpickupinfoComponent implements OnInit {
  filterDates = (date: Date | null): boolean => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return date ? date >= today : false;
  };

  pickupPerson: string = '';
  order!: OrderResponse;
  addCustomerInfo: boolean = false;
  pickupDetails!: FormGroup;
  isTimeCorrect: boolean = false;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog,private fb: FormBuilder,
  private translate: TranslateService,
  private shoppingCart: ShoppingCartService, public dialogRef: MatDialogRef<EditorderpickupinfoComponent>) { }

  ngOnInit() {
    this.order = this.data;
    const pickupTime = new Date(this.order.pickupTime);
    if (isNaN(pickupTime.getTime())) {
      throw new Error('Invalid pickupTime format');
    }
    const pickupDate = pickupTime.toISOString().split('T')[0];
    const pickupTimeFormatted = pickupTime.toTimeString().split(' ')[0].slice(0, 5);
    this.pickupDetails = this.fb.group({
      pickupDate: [pickupDate, Validators.required],
      pickupTime: [pickupTimeFormatted, Validators.required],
    });
  }

  get getControl(): { [key: string]: AbstractControl; } {
    return this.pickupDetails.controls;
  }


  async updatePickupInfo() {
    if (!this.order.pickUpPersonResponse.firstName || !this.order.pickUpPersonResponse.lastName) {
      this.popupMessagenotefication(this.translate.instant('FNAME_LNAME_ERROR'));
      return;
    }
    if (!this.order.pickUpPersonResponse.email || !this.isValidEmail(this.order.pickUpPersonResponse.email)) {
      this.popupMessagenotefication(this.translate.instant('EMAIL_ERROR'));
      return;
    }
    if (!this.order.pickUpPersonResponse.phoneNumber || !this.isValidPhoneNumber(this.order.pickUpPersonResponse.phoneNumber)) {
      this.popupMessagenotefication(this.translate.instant('PHONE_ERROR'));
      return;
    }
    const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
    const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
    if (!pickupDateValue || !pickupTimeValue) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'Please update correct details' }
      });
      return;
    }
    this.addCustomerInfo = true;
    try {
      const isTimeAvailable = await this.checkTimeAvailable();
      if (!isTimeAvailable) {
        this.addCustomerInfo = false;
        return;
      }
      const [hours, minutes] = pickupTimeValue.split(':');
      const combinedDateTime = new Date(pickupDateValue);
      combinedDateTime.setHours(Number(hours), Number(minutes));
      const browserLocale = navigator.language || 'en-US';
      const formattedDateTime = formatDate(combinedDateTime, 'yyyy-MM-dd HH:mm:ss', browserLocale);
      (await this.shoppingCart.updatePickUpInfo(
        this.order.id,
        this.order?.pickUpPersonResponse?.firstName,
        this.order?.pickUpPersonResponse?.lastName,
        this.order?.pickUpPersonResponse?.phoneNumber,
        this.order?.pickUpPersonResponse?.email,
        formattedDateTime
      )).subscribe(
        data => {
          if (data?.errors) {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
            });
            this.addCustomerInfo = false;
            return;
          }
          if (data?.data?.updatePickUpInfo) {
            this.dialogRef.close({ event: 'close', data: data?.data?.updatePickUpInfo?.data });
            this.dialog.open(SucessmsgPopupComponent, {
              backdropClass: 'notificationmodal-popup-sucess',
              data: {
                title: 'SUCCESS',
                message: data?.data?.updatePickUpInfo?.message
              }
            });
          }
        }
      );
    } catch (error) {
      this.addCustomerInfo = false;
    }
}

async checkTimeAvailable(): Promise<boolean> {
    const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
    const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
    if (!pickupDateValue || !pickupTimeValue) {
      return false;
    }
    try {
      const [hours, minutes] = pickupTimeValue.split(':');
      const combinedDateTime = new Date(pickupDateValue);
      combinedDateTime.setHours(Number(hours), Number(minutes));
      const browserLocale = navigator.language || 'en-US';
      const formattedDateTime = formatDate(combinedDateTime, 'yyyy-MM-ddTHH:mm:ss', browserLocale);
      const response = await lastValueFrom(
        await this.shoppingCart.isTimeAvailable(formattedDateTime)
      );
      if (response?.errors) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: response?.errors[0]?.errorMessage }
        });
        return false;
      }
      if (response?.data?.isTimeAvailable?.timeAvailable === false) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.translate.instant('PLEASE_SELECT_BUSINESS_TIME') }
        });
        return false;
      }
      return response?.data?.isTimeAvailable?.timeAvailable === true;
    } catch (error) {
      console.error('Error checking time availability:', error);
      return false;
    }
}

private isValidPhoneNumber(phoneNumber: string): boolean {
  const phoneRegex = /^[0-9]{0,15}$/;
  return phoneRegex.test(phoneNumber);
}

private isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

public popupMessagenotefication(message: string) {
  this.dialog.open(NotifacationMessageComponent, {
    backdropClass: 'notificationmodal-popup',
    width: '450px',
    data: { title: 'ERROR', message: message },
  });
}
}

--- ./src/app/site-themes/four-theme/four-theme-my-order/editorderpaymentmethod/editorderpaymentmethod.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/editorderpaymentmethod/editorderpaymentmethod.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { Component, ElementRef, Inject, OnInit, ViewChild } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

declare var Finix: any;

\1
  standalone: true,
  selector: 'app-editorderpaymentmethod',
  templateUrl: './editorderpaymentmethod.component.html',
  styleUrls: ['./editorderpaymentmethod.component.css']
})
export class EditorderpaymentmethodComponent implements OnInit {
  paymentMethod: string = '';
  order!: OrderResponse;
  mode: string = '';
  @ViewChild('finixFormContainer', { static: false }) finixFormContainer!: ElementRef;
  getOnBoardingForm: any;
  finixApplicationId: string = '';
  createdFinixIdentity: any;
  createdPaymentInstrument: any;
  createdAuthorization: any;
  captureAmount!: number;
  finixSessionKey: string = '';
  isFinixPay: boolean = false;
  businessID = Number(this.tokenStorage.getBusinessID());
  user = this.tokenStorage.getUser();
  businessPayments: string[] = [];
  isFazealPayEnabled = false;
  isPayPalEnabled = false;
  isCODEnabled: boolean = false;
  paypalUrl: string = '';
  paypalLoading: boolean = false;
  isPaymentLoading: boolean = false;
  firstTimeCalled: boolean = false;
  isLoading: boolean = false;


  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog,private translate: TranslateService,
  private tokenStorage: TokenStorageService,private businessSettingService: BusinessSettingService,
  private shoppingCart: ShoppingCartService, public dialogRef: MatDialogRef<EditorderpaymentmethodComponent>) { }

  async ngOnInit() {
    this.order = this.data;
    await this.getOnboardingFormLink();
    await this.getPaymentMethods();
    await this.createPaymentIntentForUpdatePayment();
  }

  getPaymentMethods() {
    this.businessSettingService.getBusinessPaymentMethodsForCustomerSide(this.businessID).subscribe(
      data => {
        console.log(data);
        this.businessPayments = data?.data?.getBusinessPaymentMethodsForCustomerSide;
        if (this.businessPayments?.length > 0 && this.businessPayments?.includes('FAZEAL_PAY')) {
          this.isFazealPayEnabled = true;
        }
        if (this.businessPayments?.length > 0 && this.businessPayments?.includes('PAYPAL')) {
          this.isPayPalEnabled = true;
        }
        if (this.businessPayments?.length > 0 && this.businessPayments?.includes('CASH_ON_DELIVERY')) {
          this.isCODEnabled = true;
        }
      }
    );
  }

  async getOnboardingFormLink(){
    this.isLoading = true;
    (await this.shoppingCart.getOnboardingFormLink()).subscribe(
      data => {
        if(data?.errors){
          this.isLoading = false;
          return;
        }
        if(data?.data?.getOnboardingFormLinkForCustomer){
          this.getOnBoardingForm = data?.data?.getOnboardingFormLinkForCustomer;
          if (this.getOnBoardingForm?.merchantId && this.getOnBoardingForm?.merchantId !== null && this.getOnBoardingForm?.status === 'APPROVED') {
            this.isFinixPay = true;
            this.finixApplicationId = this.getOnBoardingForm?.applicationId;
            this.initializeFinix();
            this.isLoading = false;
          }
        }
      }
    );
  }

  private initializeFinix() {
    if (typeof Finix === 'undefined') {
        console.error('Finix SDK not loaded');
        return;
    }

    if (!this.getOnBoardingForm?.merchantId) {
        console.error('Merchant ID not available');
        return;
    }

    if(environment.env === 'prod') {
        this.mode = 'live';
    } else {
        this.mode = 'sandbox';
    }

    const FinixAuth = Finix.Auth(this.mode, this.getOnBoardingForm.merchantId);
    console.log(this.getOnBoardingForm.merchantId, 'this.getOnBoardingForm.merchantId')
    console.log(Finix.Auth(this.mode, this.getOnBoardingForm.merchantId), 'Finix.Auth(this.mode, this.getOnBoardingForm.merchantId)')
    console.log(FinixAuth.getSessionKey(), 'FinixAuth.getSessionKey()')
    const form = Finix.CardTokenForm('finix-form', {
        showAddress: true,
        onSubmit: () => {
            this.isPaymentLoading = true;
            form.submit(this.mode, this.finixApplicationId, (err: any, res: any) => {
                if (err) {
                    console.error('Error:', err);
                    this.isPaymentLoading = false;
                    return;
                }
                const token = res?.data?.id;
                this.finixSessionKey = FinixAuth.getSessionKey();
                this.createFinixIdentity(token);
            });
        }
    });
}

    async createFinixIdentity(token: string){
      this.isPaymentLoading = true;
        (await this.shoppingCart.createFinixIdentity('', '', '', '', '', '', '', '', '')).subscribe(
          data => {
            if(data?.errors){
              this.isPaymentLoading = false;
              return;
            }
            if(data?.data?.createFinixIdentity){
              console.log(data, 'createFinixIdentity')
              this.createdFinixIdentity = data?.data?.createFinixIdentity;
              this.createFinixPaymentInstruments(token, this.createdFinixIdentity.id);
            }
          }
        );
       }

       async createFinixPaymentInstruments(token: string, identityId: string){
        this.isPaymentLoading = true;
        (await this.shoppingCart.createPaymentInstruments(token, "TOKEN", identityId)).subscribe(
          data => {
            if(data?.errors){
              this.isPaymentLoading = false;
              return;
            }
            if(data?.data?.createPaymentInstruments){
              console.log(data, 'createPaymentInstruments')
              this.createdPaymentInstrument = data?.data?.createPaymentInstruments;
              this.createAuthorization();
            }
          }
        );
       }

       async createAuthorization() {
        const amount = (this.order.total * 100).toFixed(0);
        this.captureAmount = Number(amount);
        this.isPaymentLoading = true;
        (await this.shoppingCart.createAuthorization(
            this.captureAmount,
            this.createdPaymentInstrument.currency,
            this.getOnBoardingForm?.merchantId,
            this.createdPaymentInstrument.id,
            this.finixSessionKey != undefined ?  this.finixSessionKey : ''
        )).subscribe(
          (data) => {
            if(data?.errors){
              const errorMessage = data?.errors[0]?.errorMessage;
              let failureMessage = 'The transaction was declined';
              let failureCode = 'GENERIC_DECLINE';
              if (errorMessage) {
                try {
                    const embeddedErrorMatch = errorMessage.match(/"failure_message"\s*:\s*"([^"]+)"/);
                    const codeMatch = errorMessage.match(/"failure_code"\s*:\s*"([^"]+)"/);
                    if (embeddedErrorMatch && embeddedErrorMatch[1]) {
                        failureMessage = embeddedErrorMatch[1];
                    }
                    if (codeMatch && codeMatch[1]) {
                        failureCode = codeMatch[1];
                    }
                } catch (e) {
                    console.error('Error parsing error message:', e);
                }
              }
              this.showErrorDialog(
                  this.translate.instant(failureCode),
                  failureMessage
              );
              this.isPaymentLoading = false;
              return;
            }
            if (data?.data?.createAuthorization?.id) {
                console.log(data, 'createAuthorization');
                this.createdAuthorization = data?.data?.createAuthorization;
                this.updatePaymentValidation("FINIX");
            }
          });
    }


    async updatePaymentValidation(paymentType: string){
      this.firstTimeCalled = true;
      (await this.shoppingCart.updatePaymentValidation(this.order.id, '', this.createdAuthorization != undefined ? this.createdAuthorization?.id : '', '', paymentType)).subscribe(
        data => {
          if(data?.errors){
            this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: {
                title: 'ERROR',
                message: data?.errors[0]?.errorMessage
            }
            });
            this.isPaymentLoading = false;
            this.firstTimeCalled = false;
            return;
          }
          if(data?.data?.updatePaymentValidation){
            console.log(data, 'updatePaymentValidation')
            this.dialogRef.close({ event: 'close', data: data?.data?.updatePaymentValidation?.data });
            this.dialog.open(SucessmsgPopupComponent, {
              backdropClass: 'notificationmodal-popup-sucess',
              data: {
                  title: 'SUCCESS',
                  message: data?.data?.updatePaymentValidation?.message
              }
          });
          this.firstTimeCalled = false;
          }
        }
      );
    }


    async createPaymentIntentForUpdatePayment(){
      this.paypalLoading = true;
      (await this.shoppingCart.createPaymentIntentForUpdatePayment(this.order.id, 'PAYPAL', this.user?.firstName + ' ' + this.user?.lastName, this.user?.email,
        '', '', '', '', this.user?.country ? this.user?.country?.name : '',
        this.order.subtotal, this.order.tax, this.order.shippingCost)).subscribe(data => {
          if(data.errors){
            this.paypalLoading = false;
            return;
          }
          console.log(data)
          this.paypalLoading = false;
          this.paypalUrl = data?.data?.createPaymentIntentForUpdatePayment?.paypalRedirectUrl;
        })
    }

    async redirectToPaypal(){
      window.location.href = this.paypalUrl;
    }

    private showErrorDialog(title: string, message: string) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: {
                title: title,
                message: message
            }
        });
    }

}

--- ./src/app/site-themes/four-theme/four-theme-my-order/return-reasons-details/return-reasons-details.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-my-order/return-reasons-details/return-reasons-details.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-return-reasons-details',
  templateUrl: './return-reasons-details.component.html',
  styleUrls: ['./return-reasons-details.component.css']
})
export class ReturnReasonsDetailsComponent implements OnInit {

  order!: OrderResponse;
  awsUrl = environment.awsKey;
  constructor(@Inject(MAT_DIALOG_DATA) public data: any,) { }

  ngOnInit() {
    this.order = this.data;
  }

}

--- ./src/app/site-themes/four-theme/return-detail/return-detail.component.ts
+++ ./src/app/site-themes/four-theme/return-detail/return-detail.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Options } from '@angular-slider/ngx-slider';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { OrderDetailPrintModalComponent } from '../order-detail-print-modal/order-detail-print-modal.component';
\1
  standalone: true,
  selector: 'app-return-detail',
  templateUrl: './return-detail.component.html',
  styleUrls: ['./return-detail.component.scss']
})
export class ReturnDetailComponent implements OnInit {
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  constructor(public dialog: MatDialog,) { }

  ngOnInit(): void {
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  printmodal(){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'print_modal_parent';
    const dialogRef = this.dialog.open(OrderDetailPrintModalComponent,dialogConfig);
  }

}

--- ./src/app/site-themes/four-theme/theme-product-carousel/theme-product-carousel.component.ts
+++ ./src/app/site-themes/four-theme/theme-product-carousel/theme-product-carousel.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { ActivatedRoute } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';
import { PdpQuickViewComponent } from '../pdp-quick-view/pdp-quick-view.component';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { DataService } from 'src/app/service/data.service';
import { WishListResponse } from 'src/app/models/WishListResponse';

\1
  standalone: true,
  selector: 'app-theme-product-carousel',
  templateUrl: './theme-product-carousel.component.html',
  styleUrls: ['./theme-product-carousel.component.scss']
})
export class ThemeProductCarouselComponent implements OnInit {

@Input() data:any=[];
@Input() activeTheme!: string;
subdomain: string = '';
awsUrl = environment.awsKey;
currency = this.tokenStorage.getCurrency()?.symbol;
userWishlists: WishListResponse[] = [];
businessId = Number(this.tokenStorage.getBusinessID());
arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';
AlwaysShow: boolean = true;

constructor(
  private route: ActivatedRoute,
  private tokenStorage: TokenStorageService,
  public dialog: MatDialog, private wishlistService: WhishlistService,private dataService: DataService,
  ) { }

ngOnInit() {
  this.subdomain = this.route.snapshot.params['subdomain'];

  console.log(this.data.data,"checking theme carousel")
  console.log(this.data,"checking theme carousel mina")
}

replaceSpecialChars(str: string) {
  // Replace spaces and special characters with underscores
  return str.replace(/[\s~`!@#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?()\._]/g, '_');
}

  customOptions: OwlOptions = {
    loop: true,
    margin: 0,
    nav: true, // Add this option to enable navigation arrows
    dots: true,
    navSpeed: 700,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`,`<img src="${this.arrowright}" alt="RIGHT">`],
    responsive: {
      0: {
        items: 2
      },
      400: {
        items: 2
      },
      740: {
        items: 3
      },
      940: {
        items: 4
      }
    },
  }


  customOptions3: OwlOptions = {
    loop: true,
    margin: 0,
    nav: true,
    dots: true,
    autoplayHoverPause: true,
    navSpeed: 700,
    autoplay: false,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`,`<img src="${this.arrowright}" alt="RIGHT">`],
    autoplayTimeout: 3000,
    responsive: {
      0: {
        items: 2
      },
      400: {
        items: 2
      },
      740: {
        items: 3
      },
      940: {
        items: 4
      }
    },
  }

  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
}

  async setFavItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      data => {
        this.userWishlists = data.data.getCustomerWishList;
        this.data?.data?.forEach((product: any) => {
          if (this.userWishlists.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        });
      }
    );
  }

  async addItemToFovarite(product: ProductResponse) {
    try {
      const response = await (await this.wishlistService.addItemToWishList(this.businessId, product.productId || product.id)).toPromise();

      if (response?.data?.addItemToWishList != null) {
        product.addedToWishlist = true;
        this.dataService.reset();
        this.dataService.changeCount(1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: response.errors[0].errorMessage }
        });
      }
    } catch (error) {
    }
  }


  async removeItemFromFovarite(product: ProductResponse) {
    try {
      const response = await (await this.wishlistService.removeItemFromWishList(this.businessId, product.productId || product.id)).toPromise();

      if (response?.data?.removeItemFromWishList != null) {
        product.addedToWishlist = false;
        this.dataService.reset();
        this.dataService.changeCount(-1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: response.errors[0].errorMessage }
        });
      }
    } catch (error) {
    }
  }


}

--- ./src/app/site-themes/four-theme/four-new-home/four-new-home.component.ts
+++ ./src/app/site-themes/four-theme/four-new-home/four-new-home.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, Input, OnInit, Renderer2 } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { ActivatedRoute, Router } from '@angular/router';
import { SiteOptionResponse } from 'src/app/models/SiteOptionResponse';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import {  NavigationStart } from '@angular/router';
import { Subscription } from 'rxjs';
import { DOCUMENT } from '@angular/common';
import { environment } from 'src/environments/environment';


\1
  standalone: true,
  selector: 'app-four-new-home',
  templateUrl: './four-new-home.component.html',
  styleUrls: ['./four-new-home.component.scss']
})
export class FourNewHomeComponent implements OnInit {
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  private routerSubscription!: Subscription;
  customData!: any;
  customerReviews: any[] = [];
  errorMessage:string='';

  footerMenuItems:  { text: string; item: string; list: string[] }[]=
  [{ text: "Logo Section", item: "logo",list:["../../../assets/img/items/footerlogo.svg","simply dummy text of the printing and typesetting industry."]},
  { text: "Useful Links", item: "links",list:["About Us", "Faq", "Location", "Unsubscribe", "Contact Us"] },
  { text: "Category", item: "category",list:["Men", "Women", "Kids", "Special Offer", "Best Seller"] },
  { text: "My Account", item: "account",list:["My Account", "Discount", "Return", "Orders History", "Order Tracking"] },
  { text: "Contact Info", item: "contact",list:["abc street, london, uk", "example@email.com", "+123456789"] }];
  testimonials: string[] = ["I had to attend a premier...", "These items were a perfect..."];
  footer:any={
    copyright:{
      text:'©Copyright 2023 Fazealbusiness',
      style:'LEFT_TO_RIGHT'
    },
    menu:this.footerMenuItems,
    textColor:'',
    bgColor:'',
    design:''
  }




  products = [
    {
      imgSrc: '../../assets/img/111.jpg',
      title: 'Product 1',
      price: '$50.00'
    },
    {
      imgSrc: '../../assets/img/222.jpg',
      title: 'Product 2',
      price: '$45.00'
    },
    {
      imgSrc: '../../assets/img/322.jpg',
      title: 'Product 3',
      price: '$60.00'
    },{
      imgSrc: '../../assets/img/222.jpg',
      title: 'Product 2',
      price: '$45.00'
    },
    {
      imgSrc: '../../assets/img/322.jpg',
      title: 'Product 3',
      price: '$60.00'
    },
    {
      imgSrc: '../../assets/img/444.jpg',
      title: 'Product 4',
      price: '$55.00'
    },{
      imgSrc: '../../assets/img/222.jpg',
      title: 'Product 1',
      price: '$50.00'
    },
    {
      imgSrc: '../../assets/img/111.jpg',
      title: 'Product 2',
      price: '$45.00'
    },
  ];

  subdomain = '';


@Input() productDashboredResponse: any = {
  recentlyViewedEnabled: false,
  recentlyViewedProducts : [],
};
  optionsList: string[] = [];


  constructor(private route: ActivatedRoute,
    @Inject(DOCUMENT) private document: Document,
    private renderer: Renderer2,
    private tokenStorage: TokenStorageService,
    private router: Router,
    private themeService:ThemeService
    ) { }

  ngOnInit(): void {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.optionsList = this.dashboardContent?.siteOptionsResponses?.map(siteOption => siteOption?.optionName);
    console.log(this.dashboardContent,'checking all dashboard')
    if(this.subdomain && !this.tokenStorage.getBusinessURL()){
      this.tokenStorage.saveBusinessData(this.subdomain , this.router.url.substring(1));
    }
    this.loadDashboard(this.subdomain);
    this.loadCstReview();


    // Add the class to the <body> tag
    // this.renderer.addClass(this.document.body, 'home-cst-layout-page');

    // Listen for route changes and remove the class when navigating away
    // this.routerSubscription = this.router.events.subscribe(event => {
    //   if (event instanceof NavigationStart) {
    //     this.renderer.removeClass(this.document.body, 'home-cst-layout-page');
    //   }
    // });

    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);

  }

  loadDashboard(subdomain: string){
    if(this.dashboardContent){
      this.loadThemeColors();
      this.customData = [
        {
          label: 'MENU_MAIN_HEADER',
          section: 'mainHeader',
          img:'./assets/img/site_opt_0.svg',
          data:this.dashboardContent.mainBannersEspot,
          isShow:true
        },
        {
          label: 'THREE_IN_ONE_ESPOT',
          section: 'threein1',
          img:'./assets/img/site_opt_1.svg',
          data:this.dashboardContent.threeInOneBannersEspot,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('THREE_IN_ONE_ESPOT')
        },
        {
          label: 'FLASH_SALE',
          section: 'flashSale',
          img:'./assets/img/site_opt_2.svg',
          data:this.dashboardContent.flashSaleProducts,
          sliderTitle:this.dashboardContent.flashSaleSliderHeading,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('FLASH_SALE'),
          sliderStyle: this.dashboardContent.flashProductSliderStyle ? this.dashboardContent.flashProductSliderStyle : 'DOTS'
        },
        {
          label: 'BEST_SELLER',
          section: 'bestSeller',
          img:'./assets/img/site_opt_3.svg',
          data:this.dashboardContent.bestSellerProducts,
          sliderTitle:this.dashboardContent.bestSellerSliderHeading,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('BEST_SELLER'),
          sliderStyle: this.dashboardContent.bestSellerSliderStyle ? this.dashboardContent.bestSellerSliderStyle : 'DOTS'
        },
        {
          label: 'EXCLUSIVE_PRODUCTS',
          section: 'exclusiveProducts',
          img:'./assets/img/site_opt_4.svg',
          data:this.dashboardContent.newlyAddedProducts,
          sliderTitle:this.dashboardContent.newlyAddedSliderHeading,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('EXCLUSIVE_PRODUCTS'),
          sliderStyle: this.dashboardContent.newlyAddedSliderStyle ? this.dashboardContent.newlyAddedSliderStyle : 'DOTS'
        },
        {
          label: 'ESPOT_BANNER',
          section: 'espotBanner',
          img:'./assets/img/site_opt_7.svg',
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('ESPOT_BANNER'),
          data:this.dashboardContent.espotBanners
        },
        {
          label: 'ESPOT_TEXT_SLIDER',
          section: 'espotTextSlider',
          img:'./assets/img/site_opt_10.svg',
          data:this.dashboardContent.eSpotTextSlider,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('ESPOT_TEXT_SLIDER')
        },
        {
          label: 'TESTIMONIALS',
          section: 'testimonials',
          img:'./assets/img/site_opt_9.svg',
          data: this.dashboardContent.customerReviews,
          sliderTitle: this.dashboardContent.customerReviewSliderHeading,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('TESTIMONIALS')
        },
        {
          label: 'BRAND_LOGOS_SLIDER',
          section: 'brandLogos',
          img:'./assets/img/site_opt_4.svg',
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('BRAND_LOGOS_SLIDER'),
          data:this.dashboardContent.brandsSlider,
          sliderHeading: this.dashboardContent.brandSliderHeading,
          sliderShow: this.dashboardContent.brandShowHeading,
          sliderStyle: this.dashboardContent.brandSliderStyle ? this.dashboardContent.brandSliderStyle : 'DOTS'
        },
        {
          label: 'RECENTLY_VIEWED',
          section: 'recentlyViewed',
          img:'./assets/img/site_opt_6.svg',
          products:this.dashboardContent.recentlyViewedProducts,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('RECENTLY_VIEWED'),
          sliderStyle: this.dashboardContent.recentlyViewedSliderStyle ? this.dashboardContent.recentlyViewedSliderStyle : 'DOTS'
        }
      ];
      this.footer.copyright.text = this.dashboardContent.copyrights?.text;
      this.footer.copyright.style = this.dashboardContent.copyrights?.textDirection;
      this.footerMenuItems[0].list = [this.dashboardContent.footer.logoImage, this.dashboardContent.footer.description]
      this.footer.menu = this.footerMenuItems;
      this.footer.textColor = this.dashboardContent.footer.textColor;
      this.footer.bgColor = this.dashboardContent.footer.backgroundColor;
      this.footer.design = this.dashboardContent.footer.footerDesign;
    }

  }

  loadThemeColors(){
    if(this.dashboardContent.themeName == 'FourthTheme'){
      this.renderer.addClass(document.body, `four-${this.dashboardContent.themeColorsResponse.name}-theme`);
    }else if(this.dashboardContent.themeName == 'ClassicTheme'){
      this.renderer.addClass(document.body, `classic-${this.dashboardContent.themeColorsResponse.name}-theme`);
    }else if(this.dashboardContent.themeName == 'DefaultTheme'){
      this.renderer.addClass(document.body, `default-${this.dashboardContent.themeColorsResponse.name}-theme`);
    }
  }


  private handleDataError(errors: any[]) {
    if (errors && errors[0] && errors[0].errorMessage) {
      this.errorMessage = errors[0].errorMessage;
    } else {
      this.errorMessage = "An unknown error occurred.";
    }
  }



  loadCstReview() {
    this.customerReviews = this.dashboardContent.customerReviews;
  }
}

--- ./src/app/site-themes/four-theme/four-theme-shopping-cart/four-theme-shopping-cart.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-shopping-cart/four-theme-shopping-cart.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { MatDialog } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { Subscription } from 'rxjs';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-theme-shopping-cart',
  templateUrl: './four-theme-shopping-cart.component.html',
  styleUrls: ['./four-theme-shopping-cart.component.scss']
})
export class FourThemeShoppingCartComponent implements OnInit, OnDestroy {

  shoppingCart!: ShoppingCartResponse;
  awsURL = environment.awsKey;
  totalPrice: number = 0;
  totalDiscount: number = 0;
  totalDiscounrPrice: number = 0;
  total : number = 0;
  subdomain!: string;
  currencySymbol = '$';
  isDiscountPrice: boolean = true;
  isTotalPrice: boolean = false;
  promocode! : string;
  promoCodeErrorMessage! : string;
  isFailed = false;
  isPromoExist: boolean = false;
  isSuccess = false;
  successMessage! :string;
  discountPrice! : number;
  promotionResponse! : any;
  businessId: any;
  isShowCatalogPromotions = false;
  isLoggedIn = false;
  private cartSubscription: Subscription | undefined;
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  cartMessages: any[] = [];
  loadingItems: boolean = true;
  noItemsAvailable: boolean = false;
  user = this.tokenStorage.getUser();
  quantityLoading: boolean = false;
  allPromotionResponses: any[] = [];


  constructor(private tokenStorage: TokenStorageService,
  private shoppingCartService: ShoppingCartService,
  private route: ActivatedRoute,
  private translate: TranslateService,
  public dialog: MatDialog,private cookieService: CookieDataServiceService,
  private router: Router,private dataService: DataService,
  ) {
    if (this.tokenStorage.getUser()) {
      this.isLoggedIn = true;
    }
    if(this.businessID &&  cookieService.getCookie(this.businessID!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieService.getCookie(this.businessID!.toString()));
    }
  }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(!this.user && this.sessionResponse.userType !== 'GUEST'){
      this.router.navigate([this.subdomain+'/home']);
    }
    if(this.subdomain){
      await this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
    }
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.dataService.notifyRemoveItemsObservable$.subscribe(async itemId => {
      if (itemId) {
        const index = this.shoppingCart?.cartItemResponseList?.findIndex(item => item.id === itemId);
        if (index !== -1) {
          this.shoppingCart?.cartItemResponseList.splice(index, 1);
          this.noItemsAvailable = this.shoppingCart?.cartItemResponseList?.length === 0;
        }
      }
    });
    if(this.sessionResponse.userType !== "GENERIC"){
      this.listUserCartItems(true);
    }
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  ngOnDestroy() {
    this.cartSubscription?.unsubscribe();
  }

  async listUserCartItems(showLoader: boolean = true){
    if (showLoader) {
      this.loadingItems = true;
    }
    this.noItemsAvailable = false;

    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data?.errors) {
          this.loadingItems = false;
          return;
        }

        this.isShowCatalogPromotions = false;
        if(data?.data?.listUserCartItems){
          this.shoppingCart = data?.data?.listUserCartItems;
          this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
            if(cartItem?.cartItemPromotionResponses?.length > 0){
              this.isShowCatalogPromotions = true;
            }
          });
          this.getCartMessages();
          this.allPromotionResponses = [
            ...(this.shoppingCart?.appliedOrderPromotions || []),
            ...(this.shoppingCart?.appliedShippingPromotions || [])
          ];
          this.noItemsAvailable = this.shoppingCart?.cartItemResponseList?.length === 0;
        } else {
          this.noItemsAvailable = true;
        }

        this.loadingItems = false;
      },
      error => {
        this.loadingItems = false;
        this.noItemsAvailable = true;
      }
    );
  }


  async getCartMessages(){
    (await this.shoppingCartService.getCartMessages()).subscribe(
      data => {
        if(data?.data?.getCartMessages){
          this.cartMessages = data?.data?.getCartMessages;
        }
      }
    );
  }

  async removeItemFromCart(itemId: any, cartId: any, item: any){
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if(data?.data?.removeItemFromCart){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
            data:{title:'', message: data?.data?.removeItemFromCart?.message}});
            this.dataService.notifyOther({refresh: true});
          if(this.sessionResponse.userType !== "GENERIC"){
            this.listUserCartItems(false);
          }
        }
      }
    );
  }

  async removeAllItemsFromCart(){
    this.shoppingCart?.cartItemResponseList?.forEach(async item => {
      (await this.shoppingCartService.removeItemFromCart(item.id, this.shoppingCart.id)).subscribe(
        data => {
          if(data?.data?.removeItemFromCart){
            this.dataService.notifyOther({ refresh: true });
            this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.removeItemFromCart?.message}});
              this.dataService.notifyOther({refresh: true});
            if(this.sessionResponse.userType !== "GENERIC"){
              this.listUserCartItems(false);
            }
          }
        }
      );
    })
  }

  onChangesQuantity(event: Event, item: any) {
    const input = event.target as HTMLInputElement;
    if (parseFloat(input.value) <= 0) {
      input.value = '1';
      item.quantity = 1;
    }
  }

  async updateQuantity(item: any, cartId: any) {
    if (item.promotionItem) {
      return;
    }

    const quantity = item.quantity;
    this.quantityLoading = true;

    (await this.shoppingCartService.updateItemQuantity(item.id, cartId, quantity)).subscribe(
      data => {
        if (data?.data?.updateItemQuantity != null) {
          this.dialog.open(SucessmsgPopupComponent, {
            backdropClass: 'notificationmodal-popup-sucess',
            data: {
              title: '',
              message: data?.data?.updateItemQuantity?.message
            }
          });

          this.dataService.notifyOther({ refresh: true });

          if (this.sessionResponse.userType !== "GENERIC") {
            this.listUserCartItems(false);
          }
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage }
          });
        }

        this.quantityLoading = false;
      },
      error => {
        this.quantityLoading = false;
      }
    );
  }



  applyPromocode(promocode : string){
    if(promocode){
      this.shoppingCartService.applyOrderAndShippingPromocodeOnCart(this.shoppingCart.businessId,this.shoppingCart.id,promocode, false).subscribe(
        data => {
          console.log(data)
          if(data?.data?.applyOrderAndShippingPromocodeOnCart == null){
            this.promoCodeErrorMessage= data?.errors[0]?.errorMessage;
            this.promocode = '';
            this.isPromoExist = false;
            this.isFailed= true;
            setTimeout(() => {
              this.isFailed= false;
              this.promoCodeErrorMessage='';
            }, 3000);
            return;
          }
          this.isSuccess=true;
          this.isShowCatalogPromotions = true;
          this.successMessage=data?.data?.applyOrderAndShippingPromocodeOnCart?.message;
          if(this.sessionResponse.userType !== "GENERIC"){
            this.listUserCartItems(true);
          }
          this.promocode = '';
          setTimeout(() => {
            this.isSuccess= false;
            this.successMessage='';
          }, 3000);

        }
      );

    }
  }

  removeAppliedPromocodeOnCart(promocode : string){
    this.shoppingCartService.removeAppliedPromocodeOnCart(promocode).subscribe(
      data => {
        if(data?.data?.removeAppliedPromocodeOnCart){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
            data:{title:'', message: data?.data?.removeAppliedPromocodeOnCart?.message}});
          if(this.sessionResponse.userType !== "GENERIC"){
            this.listUserCartItems(false);
          }
        }
      }
    );
  }

}

--- ./src/app/site-themes/four-theme/four-theme-popular-categories/four-theme-popular-categories.component.ts
+++ ./src/app/site-themes/four-theme/four-theme-popular-categories/four-theme-popular-categories.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { ActivatedRoute } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-theme-popular-categories',
  templateUrl: './four-theme-popular-categories.component.html',
  styleUrls: ['./four-theme-popular-categories.component.scss']
})
export class FourThemePopularCategoriesComponent implements OnInit {
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  customData!: any;
  customerReviews: any[] = [];
  dashboredListResponse!:ThemeDashboardContent;
  errorMessage:string='';
  threeInOneEnableHeadline!: boolean;
  threeInOneSliderHeadline!: string;
  @Input() data:any=[];
  @Input() activeTheme!: string;
  currency = '';
  categories: CategoryResponse[] = [];
  awsUrl = environment.awsKey;
  subdomain = '';
  itemsToShow = 3;
  isShowLikeDiv: boolean[] = [];

  constructor(
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private tokenStorage: TokenStorageService,
    private themeService:ThemeService
    ) { }

  ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.loadCategories();
    this.loadData();
    console.log(this.data.data,"checking data length")
  }

  loadCategories(){
    this.catalogService.findAllCategoryBySiteUrl(this.tokenStorage.getBusinessURL()!).subscribe(
      data => {
        this.categories = data?.data?.findAllCategoryBySiteUrl;
        if(this.activeTheme === 'FourthTheme'){
          if (data && data.data && data.data.length == 2) {
            this.itemsToShow = 2;
          }
          if (data && data.data && data.data.length == 1) {
            this.itemsToShow = 1;
          }
        }
        if(this.activeTheme === 'RetailTheme2'){
          this.categories?.forEach(category => this.isShowLikeDiv.push(false));
        }
      }
    );
  }
  customOptions: OwlOptions = {
    items:this.itemsToShow,
    loop: false,
    margin: 0,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 1,
      },
      600: {
        items: 2,
      },
      768: {
        items: this.itemsToShow,
      },
      1200: {
        items: this.itemsToShow,
      }
    },
  }

  private handleDataError(errors: any[]) {
    if (errors && errors[0] && errors[0].errorMessage) {
      this.errorMessage = errors[0].errorMessage;
    } else {
      this.errorMessage = "An unknown error occurred.";
    }
  }


  updateThreeInOneEnableHeadline(newValue: boolean) {
    this.dashboredListResponse.threeInOneEnableHeadline = newValue;
  }

  loadData() {
    this.dashboredListResponse = this.dashboardContent;
    this.threeInOneEnableHeadline = this.dashboredListResponse?.threeInOneEnableHeadline;
    this.threeInOneSliderHeadline = this.dashboredListResponse?.threeInOneSliderHeadline;
    console.log(this.dashboardContent,"checking complete data")
    // this.themeService.getThemeDashboardContentBySiteUrl(this.subdomain).subscribe(
    //   ({ data, errors }) => {
    //     if (!data || !data.getThemeDashboardContentBySiteUrl) {
    //       this.handleDataError(errors);
    //       return;
    //     }
    //     if (data.getThemeDashboardContentBySiteUrl) {

    //     }
    //   }
    // );
  }

}

--- ./src/app/site-themes/four-theme/four-espot-banner/four-espot-banner.component.ts
+++ ./src/app/site-themes/four-theme/four-espot-banner/four-espot-banner.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { environment } from 'src/environments/environment';
import { ActivatedRoute, Router } from '@angular/router';

\1
  standalone: true,
  selector: 'app-four-espot-banner',
  templateUrl: './four-espot-banner.component.html',
  styleUrls: ['./four-espot-banner.component.scss']
})
export class FourEspotBannerComponent implements OnInit {
  @Input() data:any;
  @Input() design:any;
  @Input() activeTheme!: string;
  @Input() subdomain!: string;
  awsUrl = environment.awsKey;

  constructor(private route: ActivatedRoute) { }

  ngOnInit() {

    this.subdomain = this.route.snapshot.params['subdomain'];
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = '/'+this.subdomain;
    }

    if(this.data){
      for(let slide of this.data.data){
        if(!slide.imageUrl.includes('http')){
          slide.imageUrl = this.awsUrl + slide.imageUrl;
        }
      }
    }
  }


  navigateTODetail(){
    // if(environment.env !== 'local'){
    //   this.router.navigateByUrl('product/' +  this.product.url + '/' + this.product?.id || this.product?.productId);
    // } else {
    //   this.router.navigateByUrl(this.subdomain, '/product/' + this.product.url + '/' + this.product?.id || this.product?.productId);
    // }
  }

}

--- ./src/app/site-themes/four-theme/process-payment/process-payment.component.ts
+++ ./src/app/site-themes/four-theme/process-payment/process-payment.component.ts
import { MatFormFieldModule } from '@angular/material/form-field';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ActivatedRoute, Router } from '@angular/router';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { A11yModule } from '@angular/cdk/a11y';
import { ClipboardModule } from '@angular/cdk/clipboard';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CarouselModule } from 'ngx-owl-carousel-o';
import { NgxSliderModule } from '@angular-slider/ngx-slider';
import { NgbRatingModule, NgbCarouselModule, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { NgChartsModule } from 'ng2-charts';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { Component, OnInit } from '@angular/core';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { PlaceOrderDto } from 'src/app/models/PlaceOrderDto';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { OrderIdFormatResponse } from 'src/app/models/OrderIdFormatResponse';
import { environment } from 'src/environments/environment';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { DataService } from 'src/app/service/data.service';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { MatDialog } from '@angular/material/dialog';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-process-payment',
  templateUrl: './process-payment.component.html',
  styleUrls: ['./process-payment.component.css']
})
export class ProcessPaymentComponent implements OnInit {

  placeOrderDto!: PlaceOrderDto;
  sessionResponse!: SessionResponse;
  orderIdFormat!: OrderIdFormatResponse;
  order!: OrderResponse;
  subdomain: string = '';
  placeOrderRequest: any;
  orderResponse!: OrderResponse;
  paymentId: string = '';
  token: string = '';
  payerId: string = '';

  constructor(private route: ActivatedRoute,
    private router: Router,
    private tokenStorage: TokenStorageService,public dialog: MatDialog,
    private shoppingCartService: ShoppingCartService,private dataService: DataService,
    private cookieDate: CookieDataServiceService,private catalogService: CatalogServiceService) { }

  async ngOnInit() {
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.placeOrderDto = this.tokenStorage.getUserOrderInfo()!;
    this.placeOrderRequest = this.tokenStorage.getPlaceOrderRequest()!;
    this.route.queryParams.subscribe(async params => {
      const paymentId = params['paymentId'];
      const token = params['token'];
      const payerId = params['payerId'];

      if (paymentId && token && payerId) {
        this.paymentId = paymentId;
        this.token = token;
        this.payerId = payerId;
        this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.placeOrderDto.businessId!.toString()));
        await this.placeOrder();
      } else{
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: 'Payment have declined!' }
        });
        if (environment.env !== 'local') {
          this.subdomain = '';
        }
        this.router.navigate([this.subdomain ? `/${this.subdomain}/checkout` : '/checkout']);
      }
  })
     setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }


  placeOrder(){
   if (environment.env !== 'local') {
    this.subdomain = '';
   }
   this.shoppingCartService.completePaypalPayment(this.payerId, this.paymentId, this.token, this.placeOrderDto.businessId, this.placeOrderDto.orderId,
    this.sessionResponse.id).subscribe(
      async data => {
        if(data?.errors){
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: 'Payment didnt go through!' }
          });
          this.router.navigate([this.subdomain ? `/${this.subdomain}/checkout` : '/checkout']);
          return;
        }
        if(data?.data?.completePaypalPayment){
            this.shoppingCartService.placeOrder(Number(this.tokenStorage.getBusinessID()), this.placeOrderRequest.shoppingCartId, this.placeOrderRequest.paymentMethod,
            this.placeOrderRequest.addressId? this.placeOrderRequest.addressId : null, this.placeOrderRequest.orderType, this.placeOrderRequest.paymentToken, this.placeOrderRequest.orderId,
            this.placeOrderRequest.pickupPerson, this.placeOrderRequest.formattedDateTime!, this.placeOrderRequest.firstName, this.placeOrderRequest.lastName, this.placeOrderRequest.email, this.placeOrderRequest.phoneNumber,null,
            this.placeOrderRequest.cardNumber, this.placeOrderRequest.expMonth, this.placeOrderRequest.expYear, this.placeOrderRequest.cvc, this.placeOrderRequest.cardType ? this.placeOrderRequest.cardType : null, this.placeOrderRequest.selectedCardId ? this.placeOrderRequest.selectedCardId : null,
            this.placeOrderRequest.totalApplicableTaxes, this.placeOrderRequest.totalSurchargesTaxes, this.placeOrderRequest.selectedAddress? this.placeOrderRequest.selectedAddress:null,
            this.placeOrderRequest.userType, this.placeOrderRequest.userId, this.placeOrderRequest.billingAddress? this.placeOrderRequest.billingAddress:null, '', 0).subscribe(
              async data => {
                if(data?.errors){
                  this.router.navigate([this.subdomain ? `/${this.subdomain}/checkout` : '/checkout']);
                  return;
                }
                if(data?.data?.placeOrder != null){
                  this.orderResponse = data?.data?.placeOrder?.data;
                  this.catalogService.updateLastOrderId(Number(this.tokenStorage.getBusinessID())).subscribe(
                    data => {});
                  this.dialog.open(SucessmsgPopupComponent,
                    { backdropClass: 'notificationmodal-popup-sucess',
                      data: { title: 'SUCCESS', message: data?.data?.placeOrder?.message
                    }
                    });
                  this.router.navigateByUrl(this.subdomain + '/place-an-order',{state: {order: this.orderResponse, orderFormat: this.orderResponse.businessOrderId }});
                  this.dataService.notifyOther({refresh: true});
                } else {
                  this.dialog.open(NotifacationMessageComponent, {
                    backdropClass: 'notificationmodal-popup',
                    width: '450px',
                    data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
                  });
                  this.router.navigate([this.subdomain ? `/${this.subdomain}/checkout` : '/checkout']);
                  return;
                }
      }
    );
        }
      }
    );
  }
}

--- ./src/app/sucessmsg-popup/sucessmsg-popup.component.ts
+++ ./src/app/sucessmsg-popup/sucessmsg-popup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n
import { Component, Inject, OnInit } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';

\1
  standalone: true,
  selector: 'app-sucessmsg-popup',
  templateUrl: './sucessmsg-popup.component.html',
  styleUrls: ['./sucessmsg-popup.component.scss']
})
export class SucessmsgPopupComponent implements OnInit {
  errormessage!: string;
  constructor(
    private  dialogRef:  MatDialogRef<SucessmsgPopupComponent>,
    @Inject(MAT_DIALOG_DATA) public  data:  any,
    public translate: TranslateService,
    ) { }

  ngOnInit(): void {
    if(!this.data.title){
      this.data.title = this.translate.instant('SUCCESS')
    }
    setTimeout(() => {
      this.dialogRef.close();
    },7000);

  }

}

--- ./chat-widget/chat-widget.component.ts
+++ ./chat-widget/chat-widget.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { UpdateShareService } from 'src/app/service/chatServices/updateShare/update-share.service';
import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';
import { CookieDataServiceService } from '../service/cookie-data-service.service';
import { TokenStorageService } from '../service/TokenStorgeService.service';
import { AuthService } from '../service/auth.service';
import * as _ from 'lodash';
import { AcquireInfo, ChatMessage, ChatRestApiService, ChatUserResponse } from '../service/chatServices/rest-api/chat-rest-api.service';
import { MatMenuTrigger } from '@angular/material/menu';
import { ChatBackendQueriesService, ChatDirection } from '../service/chatServices/backend-queries/chat-backend-queries.service';
import { ChatEmployeeInfoAfterConnect, SocketService } from '../service/chatServices/socket/socket.service';
import { firstValueFrom, from } from 'rxjs';
import { ChatSharedInfoService } from '../service/chatServices/chat-shared-info/chat-shared-info.service';
import { ChatSettingResponse } from '../models/ThemeDashboardContent';
import { SessionResponse } from '../models/SessionResponse';
import { ChatopenserviceService } from '../service/chatopenservice.service';

\1
  standalone: true,
  selector: 'app-chat-widget',
  templateUrl: './chat-widget.component.html',
  styleUrls: ['./chat-widget.component.css']
})
export class ChatWidgetComponent implements OnInit, AfterViewInit {
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;

  @ViewChild('chatContainer') private chatContainer!: ElementRef;
  @Input() chatSettings!: ChatSettingResponse

  questionSelected: boolean = false;
  startChatConversation: boolean = false;
  chatIconColor: string = "#000000";
  sessionResponse!: SessionResponse;
  dataRequired: boolean = false;
  user: any;
  acquireInfo: AcquireInfo[] = [];
  questions: ChatDirection[] = [];
  comment: string = '';
  userType: string = 'guest';
  chatUser!: ChatUserResponse | null;
  employeeInfo!: ChatEmployeeInfoAfterConnect | null;
  linkingToEmployeeInProgress: boolean = false;
  tryWithOtherQuestion: boolean = false;
  tryAgain = false;
  commentRequired = false;
  commentFieldView = false;
  logoutObservable: any;
  isLoggedUser = false;
  queueInFront: number = 0;
  disableSendButton = false;
  chats: ChatMessage[] = [];
  commRequiredForLoggedInUser = false;
  chatEndedByEmp = false;
  typingData: any;
  redirected: boolean = false;
  oldUserId!: number;
  formInitializing: boolean = true;
  timerOut: boolean = false;
  businessAvailable: boolean = false;
  currentDateTime: string = '';

  constructor(
    private socketService: SocketService,
    private cookieDateService: CookieDataServiceService,
    private tokenStorage: TokenStorageService,
    private authService: AuthService,
    private chatRestApiService: ChatRestApiService,
    private chatBackendQueriesService: ChatBackendQueriesService,
    private chatSharedInfoService: ChatSharedInfoService,
    private cdr: ChangeDetectorRef,
    private updateShareService: UpdateShareService,
    private chatService: ChatopenserviceService
  ) { }

  async ngOnInit() {

    this.chatService.openChatMenu$.subscribe(() => {
      this.menuTrigger.openMenu();
    });

    this.currentDateTime = this.getCurrentDateTime();
    await this.getChatAvailability(this.currentDateTime)
    this.loginLogoutDetector();
    await this.initChatPopup();
  }

  async getChatAvailability(dateTime: string) {
    const r = await firstValueFrom(this.chatRestApiService.getChatAvailability(Number(this.tokenStorage.getBusinessID()), dateTime))
    this.businessAvailable = r?.data?.getChatAvailability;
  }

  getCurrentDateTime(): string {
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    const month = ('0' + (currentDate.getMonth() + 1)).slice(-2);
    const day = ('0' + currentDate.getDate()).slice(-2);
    const hours = ('0' + currentDate.getHours()).slice(-2);
    const minutes = ('0' + currentDate.getMinutes()).slice(-2);
    const seconds = ('0' + currentDate.getSeconds()).slice(-2);
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
  }

  onEndChat() {
    this.socketService.onEndChat().subscribe({
      next: chatEnded => {
        this.chatEndedByEmp = true;
        this.resetChatState();
      }
    });
  }

  onUpdateMessage() {
    this.socketService.onUpdateMessage().subscribe({
      next: messageUpdated => {
        this.chats = this.chats.map(c =>
          (c.id || c._id) === messageUpdated.id ? _.cloneDeep(messageUpdated) : c
        );
      }
    });
  }

  onDeleteMessage() {
    this.socketService.onDeleteMessage().subscribe({
      next: (r: any) => {
        this.chats = this.chats.filter(c => !!r && (c.id || c._id) != r.id)
      }
    })
  }

  onNewMessage() {
    this.socketService.onNewMessage().subscribe({
      next: (newMessage: any) => {
        this.chats.push(newMessage)
        this.scrollToBottom();
      }
    })
  }

  async initChatPopup() {
    setTimeout(() => {
      this.formInitializing = false;
    }, 3000);
    setTimeout(async () => {
      await this.getBusinessChatQuestions();
      await this.getAquiredFields();
    }, 2000);

    setTimeout(async () => {
      this.initializeUser();
    }, 3000);
  }

  ngAfterViewInit() {
    this.resetChatState();
  }

  private initializeUser() {
    this.chatUser = this.tokenStorage.getChatUserFromSession();
    if (!this.user) this.user = { ...this.tokenStorage.getUser() };
    this.checkUserType();
  }

  async getBusinessChatQuestions() {
    const r = await firstValueFrom(this.chatBackendQueriesService.getListOfChatDirectionByBusinessId(Number(this.tokenStorage.getBusinessID())))
    this.questions = r?.data?.getListOfChatDirectionByBusinessId;
  }

  async getAquiredFields() {
    const r = await firstValueFrom(this.chatRestApiService.getAquiredFeilds(Number(this.tokenStorage.getBusinessID())))
    if (r.data) {
      this.acquireInfo = r?.data?.acquireInfo;
    } else {
      const aqD: AcquireInfo[] = [{ name: 'First Name', required: true, _id: '1' }, { name: 'Last Name', required: true, _id: '2' }, { name: 'Email', required: true, _id: '4' }, { name: 'Comments', required: false, _id: '3' }]
      this.acquireInfo = aqD
    }
    this.commentFieldView = !!this.acquireInfo.find((r: AcquireInfo) => r.name == 'Comments')
    this.commentRequired = !!this.acquireInfo.find((r: AcquireInfo) => r.name == 'Comments' && r.required)
    if (!this.commentRequired && !this.socketService.checkSocket()) {
      await this.createUserWithComment('')
    } else if (this.commentRequired) {
      this.dataRequired = true;
    }
  }

  private checkUserType() {
    this.user = this.tokenStorage.getUser();
    let currentUserType = this.cookieDateService.getCookie(this.tokenStorage.getBusinessID()!);
    if(currentUserType === '' || currentUserType === undefined){
      currentUserType = 'GENERIC';
      this.sessionResponse = new SessionResponse;
      this.sessionResponse.userType = currentUserType;
    } else{
      this.sessionResponse = JSON.parse(this.cookieDateService.getCookie(this.tokenStorage.getBusinessID()!));
    }
    if (this.user && this.user.userType == 'STORE_REGISTERED') {
      setTimeout(() => {
        this.isLoggedUser = !!this.user;
        this.cdr.detectChanges()
      });
      if (this.chatUser && this.user) {
        this.chatUser.firstName = this.user?.firstName;
        this.chatUser.lastName = this.user?.lastName;
        this.chatUser.profilePhoto = this.user?.profile;
        this.chatUser.phone = this.user?.phone;
        this.chatUser.email = this.user?.email;
      }
      this.userType = 'customer'
      if (this.chatUser) this.chatUser.userId = this.user.id;
      this.startChatConversation = true;
      this.commRequiredForLoggedInUser = !!this.acquireInfo.find((r: AcquireInfo) => r.name == 'Comments')
    } else if (this.sessionResponse?.userType == 'GENERIC' || this.sessionResponse?.userType == 'GUEST') {
      this.dataRequired = true;
      this.startChatConversation = false;
      this.userType = 'guest'
      this.isLoggedUser = !!this.user;
    } else if (this.sessionResponse?.userType == 'FAZEAL_REGISTERED') {
      setTimeout(() => {
        this.isLoggedUser = !!this.user;
        this.cdr.detectChanges()
      });

      if (this.chatUser && this.user) {
        this.chatUser.firstName = this.user?.firstName;
        this.chatUser.lastName = this.user?.lastName;
        this.chatUser.profilePhoto = this.user?.profile;
        this.chatUser.phone = this.user?.phone;
        this.chatUser.email = this.user?.email;
      }
      if (this.user?.isSubscribed) {
        this.userType = 'customer'
        if (this.chatUser) this.chatUser.userId = this.user.id;
      } else {
        this.userType = 'guest'
      }
      this.startChatConversation = true;
      this.commRequiredForLoggedInUser = !!this.acquireInfo.find((r: AcquireInfo) => r.name == 'Comments')
    }
    this.questionSelected = false
  }

  loginLogoutDetector() {
    this.logoutObservable = this.authService.getLoginStatusSubject().subscribe(u => {
      if (!!u) {
        this.formInitializing = true;
        setTimeout(() => {
          this.formInitializing = false;
        }, 3000);
        setTimeout(() => {
          this.user = u;
          this.checkUserType()
          this.isLoggedUser = true;
          setTimeout(async () => {
            this.resetChatState();
            this.tokenStorage.saveChatUser(null)
            let commRequiredForLoggedInUser = !!this.acquireInfo.find((r: AcquireInfo) => r.name == 'Comments');
            this.commentRequired = !!this.acquireInfo.find((r: AcquireInfo) => r.name == 'Comments' && r.required)
            this.commRequiredForLoggedInUser = commRequiredForLoggedInUser;
            if (!this.commentRequired && !this.socketService.checkSocket()) {
              await this.createUserWithComment('');
            }
          });
        });
      } else {
        setTimeout(async () => {
          this.startChatConversation = false;
          this.resetChatState()
        });
      }
    })
  }

  private resetChatState() {
    this.questionSelected = false;
    this.startChatConversation = false;
    this.chatIconColor = "#000000";
    this.sessionResponse = null!;
    this.dataRequired = false;
    this.user = null;
    this.comment = '';
    this.userType = 'guest';
    this.chatUser = null;
    this.employeeInfo = null;
    this.linkingToEmployeeInProgress = false;
    this.tryWithOtherQuestion = false;
    this.tryAgain = false;
    this.commentRequired = false;
    this.commentFieldView = false;
    this.isLoggedUser = false;
    this.queueInFront = 0;
    this.disableSendButton = false;
    this.chats = [];
    this.commRequiredForLoggedInUser = false;
    this.socketService.offAllListeners();
    this.initializeUser();
  }

  async selectQuestion(questionSelected: any) {
    let ids: number[] = [];
    if (questionSelected) {
      const primaryUserId = questionSelected.primaryUserInfo?.id;
      if (primaryUserId) ids.push(primaryUserId);
      const secondaryUserId = questionSelected.secondaryUserInfo?.id;
      if (secondaryUserId) ids.push(secondaryUserId);
      const defaultEmpId = questionSelected.defaultUserInfo?.id;
      if (defaultEmpId) ids.push(defaultEmpId);
    }
    this.linkingToEmployeeInProgress = true;
    this.timerOut = false;
    setTimeout(() => {
      this.timerOut = true;
    }, 4000);
    let r: any
    try {
      if (!this.socketService.checkSocket()) {
        await this.socketService.socketConnect(this.chatUser);
      }
      setTimeout(async () => {
        r = await firstValueFrom(from(this.socketService.emitCheckEmployees(this.user.id, ids, this.chatUser)));
        this.linkingToEmployeeInProgress = false;
        if (r && r.employeeInfo) {
          this.employeeInfo = r.employeeInfo;
          this.queueInFront = r.sortNum - 1
          if (this.employeeInfo) this.tokenStorage.saveEmpInfo(this.employeeInfo);
          this.updateShareService.shareRoomName(this.employeeInfo?.roomName)
          this.startChatConversation = true;
          this.dataRequired = false;
          this.questionSelected = true;
          this.onNewMessage()
          this.onDeleteMessage();
          this.onUpdateMessage();
          this.onEndChat();
          this.onTyping();
          this.onUpdateEmployee();
          this.OnChatMessageReaction();
          if (!!questionSelected || questionSelected.length == 0) {
            this.sendMessage({ text: 'Issue related to: ' + questionSelected.question })
          }
          if (!!this.comment) {
            this.sendMessage({ text: this.comment })
          }
        }
      }, 500);
    } catch (error) {
      this.linkingToEmployeeInProgress = false;
    }

    if (!r) {
      if (this.questions?.length > 1) {
        this.tryWithOtherQuestion = true;
        this.tryAgain = false;
      }
      else {
        this.tryWithOtherQuestion = false;
        this.tryAgain = true;
      }
    }
  }

  OnChatMessageReaction() {
    this.socketService.OnChatMessageReaction().subscribe({
      next: (r: any) => {
        let message = this.chats?.find(c => c._id === r.messageId)
        if (message)
          message.messageLike = r?.messageLike;
      }
    })
  }

  onUpdateEmployee() {
    this.socketService.onUpdateEmployee().subscribe({
      next: (r: any) => {
        this.typingData = r;
        const oldEmployeeInfo = this.employeeInfo;
        this.employeeInfo = r.employee;
        if (this.employeeInfo) this.employeeInfo.roomName = r.roomName;
        if (oldEmployeeInfo && this.employeeInfo && oldEmployeeInfo.userId !== this.employeeInfo.userId) {
          this.chats.forEach(chat => {
            if (this.employeeInfo) {
              chat.senderName = `${oldEmployeeInfo.firstName} ${oldEmployeeInfo.lastName}`;
              chat.profilePhoto = oldEmployeeInfo.profilePhoto || '';
            }
          });
        }
        this.redirected = true;
      }
    });
  }

  onTyping() {
    this.socketService.onTypingChat().subscribe({
      next: r => {
        this.typingData = r;
      }
    })
  }

  async startChatting(event: any) {
    this.user = { firstName: event.firstName, lastName: event.lastName, email: event.email, phone: event.phone, comment: event.comment, type: this.userType }
    this.isLoggedUser = true;
    this.startChatConversation = event.start;
    const cr = await firstValueFrom(this.chatRestApiService.createCustomerChatUser(
      Number(this.tokenStorage.getBusinessID()),
      event.firstName, event.lastName, this.userType,
      event.email, event.phone, event.comment, null, null
    ));

    if (cr.errors) {
      return;
    }
    this.showQuestionsAfterUserCreated(cr);
  }

  async createUserWithComment(event: any) {
    this.comment = event;
    if (!this.user) {
      return;
    }
    const cr = await firstValueFrom(this.chatRestApiService
      .createCustomerChatUser(Number(this.tokenStorage.getBusinessID()),
        this.user.firstName, this.user.lastName, this.userType,
        this.user.email, this.user.phone, this.comment, this.userType === ('customer' || "STORE_REGISTERED") ? this.user.id : null, this.user.profilePicture))
    this.isLoggedUser = true;
    if (cr.errors) {
      return;
    }
    this.showQuestionsAfterUserCreated(cr);
  }

  private showQuestionsAfterUserCreated(cr: any) {
    this.chatUser = cr.data;
    if (this.chatUser) this.chatUser.userType = this.userType;
    this.socketService.socketConnect(this.chatUser);
    this.tokenStorage.saveChatUser(this.chatUser);
    if (!this.questions || this.questions.length === 0) {
      this.selectQuestion(null);
    } else {
      this.chatSharedInfoService.setChatUserCreated(this.chatUser);
    }
  }

  sendMessage(event: any) {
    const receiverId = this.employeeInfo?.userId;
    const messageData = {
      senderName: `${this.user.firstName} ${this.user.lastName}`,
      profilePhoto: this.user.profile || '',
      roomName: this.employeeInfo?.roomName || this.employeeInfo?.roomName,
      message: {
        senderId: this.chatUser?.userId,
        senderType: this.chatUser?.userType,
        receiverId: receiverId,
        receiverType: 'employee',
        text: event.text,
        localPaths: event.localPaths,
        repliedMessageId: event.repliedMessageId === undefined ? null : event.repliedMessageId
      }
    };
    this.socketService.emitNewMessage(messageData);
    this.disableSendButton = false;
  }

  scrollToBottom(): void {
    try {
      setTimeout(() => {
        if (this.chatContainer)
          this.chatContainer.nativeElement.scrollTop = this.chatContainer.nativeElement.scrollHeight;
      }, 200);
    } catch (err) {
      console.error('Scroll to bottom failed:', err);
    }
  }

}

--- ./chat-widget/attachment-preview/attachement-preview/attachement-preview.component.ts
+++ ./chat-widget/attachment-preview/attachement-preview/attachement-preview.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { ChatMessage } from 'src/app/service/chatServices/rest-api/chat-rest-api.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-attachement-preview',
  templateUrl: './attachement-preview.component.html',
  styleUrls: ['./attachement-preview.component.css']
})
export class AttachementPreviewComponent implements OnInit {
  @Input() attachment!: ChatMessage;
  awsUrl = environment.awsKey;
  fileType: string = '';

  ngOnInit(): void { }

  onRemove() {
    if (this.attachment.localPaths && this.attachment.localPaths.length > 0) {
      this.attachment.deletedLocalPath = this.attachment.localPaths[0].localPath;
      this.fileType = this.attachment.localPaths[0].type;
      this.attachment.localPaths.pop();
    }
  }
}

--- ./chat-widget/chat-send-message/chat-send-message.component.ts
+++ ./chat-widget/chat-send-message/chat-send-message.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import * as _ from 'lodash';
import { firstValueFrom } from 'rxjs';
import { ChatMessage, ChatRestApiService, ChatUserResponse } from 'src/app/service/chatServices/rest-api/chat-rest-api.service';
import { SocketService } from 'src/app/service/chatServices/socket/socket.service';
import { UpdateShareService } from 'src/app/service/chatServices/updateShare/update-share.service';

\1
  standalone: true,
  selector: 'app-chat-send-message',
  templateUrl: './chat-send-message.component.html',
  styleUrls: ['./chat-send-message.component.css']
})
export class ChatSendMessageComponent implements OnInit {
  @Output() messageSent = new EventEmitter<any>();
  @Input() user!: ChatUserResponse | null
  @Input() disableSendButton: boolean = false;
  messageForm: FormGroup;
  selectedFiles: File[] = [];
  types: string[] = [];
  messageToReply!: ChatMessage | null;
  @ViewChild('messageTextarea') messageTextarea!: ElementRef;
  roomName: string = '';

  constructor(
    private fb: FormBuilder,
    private chatRestApiService: ChatRestApiService,
    private updateShareService: UpdateShareService,
    private socketService: SocketService,
  ) {
    this.messageForm = this.fb.group({
      message: ['', Validators.required]
    });
  }

  ngOnInit() {
    this.updateShareService.getReplyMessage().subscribe({
      next: (message: ChatMessage) => {
        this.messageToReply = _.cloneDeep(message);
        this.messageTextarea.nativeElement.focus();
      }
    })
    this.updateShareService.getRoomName().subscribe(room => {
        this.roomName = room;
    })
  }

  onFileSelected(event: any) {
    if (event.target.files.length > 0) {
      this.selectedFiles[0] = event.target.files[0];
      this.types[0] = this.getFileType(this.selectedFiles[0]);
    } else {
      this.selectedFiles = [];
    }
  }

  onKeyUp(event: KeyboardEvent) {
    setTimeout(() => {
      this.socketService.emitTypingChat({ isTyping: false, roomName: this.roomName, userId: this.user?.userId });
    }, 1000);
  }

  onEnterPress(event: KeyboardEvent) {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      this.sendMessage();
    } else {
      this.socketService.emitTypingChat({ isTyping: true, roomName: this.roomName, userId: this.user?.userId });
    }
  }

  private async uploadFiles(files: File[]): Promise<{ localPath: any; thumbImage: any; type: string }[]> {
    this.disableSendButton = true;
    let fileData: { localPath: any; thumbImage: any; type: string }[] = [];
    try {
      const responses = await firstValueFrom(this.chatRestApiService.uploadMultipleFiles(files, this.user?.userType, this.user?.userId ? this.user?.userId : 0, 0));
      this.disableSendButton = false;
      if (responses) {
        fileData = responses.map((response: any, index: number) => ({
          localPath: response?.data?.uploadBusinessChatFile,
          thumbImage: null,
          type: this.types[0]
        }));
      }
    } catch (error) {
      this.disableSendButton = false;
      console.error('File upload failed', error);
    }
    return fileData;
  }

  async sendMessage() {
    this.disableSendButton = true;
    if (this.messageForm.valid || this.selectedFiles.length > 0) {
      let fileData: { localPath: string, thumbImage: string, type: string }[] = []
      if (this.selectedFiles.length > 0) fileData = await this.uploadFiles(this.selectedFiles);
      this.emitMessage(fileData, this.messageForm.get('message')?.value?.trim());
    }
  }

  private emitMessage(fileData: { localPath: any; thumbImage: any; type: string }[], messageText: string = '') {
    const messageData = { text: messageText, localPaths: fileData, repliedMessageId: this.messageToReply?.id || this.messageToReply?._id };
    this.messageSent.emit(messageData);
    this.messageForm.reset();
    this.selectedFiles = [];
    this.disableSendButton = false
    this.messageToReply = null;
  }


  getFileType(file: File): string {
    const extension = file.name.split('.').pop()?.toLowerCase()
    switch (extension) {
      case 'jpg':
      case 'jpeg':
      case 'png':
      case 'gif':
      case 'webp':
        return 'image';
      case 'pdf':
      case 'doc':
      case 'docx':
        return 'document';
      default:
        return 'text';
    }
  }

  removeFile(file: File) {
    this.selectedFiles = this.selectedFiles?.filter(f => f !== file);
  }

}

--- ./chat-widget/guest-data-info/guest-data-info.component.ts
+++ ./chat-widget/guest-data-info/guest-data-info.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, FormGroupDirective, NgForm, Validators } from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material/core';
import { User } from 'src/app/models/user';
import { AcquireInfo } from 'src/app/service/chatServices/rest-api/chat-rest-api.service';

\1
  standalone: true,
  selector: 'app-guest-data-info',
  templateUrl: './guest-data-info.component.html',
  styleUrls: ['./guest-data-info.component.css']
})
export class GuestDataInfoComponent implements OnInit {
  @Output() startChattingEmiter = new EventEmitter<{ start: boolean, firstName: string, lastName: string, email: string, phone: string, comment: string }>();
  @Input() dataRequired: boolean = false;
  @Input() user!: User;
  email: string = '';
  phone: string = '';
  lastName: string = '';
  firstName: string = '';
  comment: string = '';
  @Input() fieldsConfig: AcquireInfo[] = [];
  guestForm!: FormGroup;
  formControlNames: any[] = [];
  matcher = new CustomErrorStateMatcher();
  dataFilled: boolean = false;

  constructor(
    private fb: FormBuilder,
  ) { }

  ngOnInit() {
    this.dataFilled = !!this.user;
    this.createFormGroup();
  }

  createFormGroup() {
    const formControlConfig: { [key: string]: any } = {};
    this.fieldsConfig.forEach(field => {
      const formControlName = field.name.split(' ').map((part, index) => {
        if (index === 0) {
          return part.toLowerCase();
        } else {
          return part;
        }
      }).join('');
      this.formControlNames.push([formControlName, field.required])
    })
    this.formControlNames.forEach(field => {
      formControlConfig[field[0]] = [
        '', field[0] == 'email' ? [field[1] ? Validators.required : null, Validators.email] : field[1] ? Validators.required : null
      ];
    });
    this.guestForm = this.fb.group(formControlConfig);
  }

  onSubmit() {
    if (this.guestForm.valid) {
      this.startChattingEmiter.emit({
        start: true,
        firstName: this.guestForm.get('firstName')?.value || '',
        lastName: this.guestForm.get('lastName')?.value || '',
        email: this.guestForm.get('email')?.value || '',
        phone: this.guestForm.get('phoneNumber')?.value || '',
        comment: this.guestForm.get('comments')?.value || ''
      });
      this.dataFilled = true;
    }
  }

  getFormControlName(fieldName: string): string {
    return fieldName.split(' ').map((part, index) => {
      if (index === 0) {
        return part.toLowerCase();
      } else {
        return part;
      }
    }).join('');
  }
}

export class CustomErrorStateMatcher implements ErrorStateMatcher {
  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {
    const isSubmitted = form && form.submitted;
    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));
  }
}

--- ./chat-widget/otheruser-message/otheruser-message.component.ts
+++ ./chat-widget/otheruser-message/otheruser-message.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MatMenuTrigger } from '@angular/material/menu';
import * as _ from 'lodash';
import { ChatMessage } from 'src/app/service/chatServices/rest-api/chat-rest-api.service';
import { ChatEmployeeInfoAfterConnect } from 'src/app/service/chatServices/socket/socket.service';
import { UpdateShareService } from 'src/app/service/chatServices/updateShare/update-share.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-otheruser-message',
  templateUrl: './otheruser-message.component.html',
  styleUrls: ['./otheruser-message.component.css']
})
export class OtheruserMessageComponent implements OnInit {
  awsUrl = environment.awsKey;
  @Input() employee!: ChatEmployeeInfoAfterConnect | null
  @Input() messageData!: ChatMessage
  @Output() messageReactionEmitter = new EventEmitter<{ messageId: string, reactionType: string }>();
  @ViewChild(MatMenuTrigger) replyOtherMessageMenu!: MatMenuTrigger;

  constructor(
    private updateShareService: UpdateShareService,
  ) { }

  ngOnInit() {
    if (!!this.messageData.repliedMessage) {
      this.messageData.repliedMessage.replyOn = true;
    }
  }

  replyToMessage() {
    let messageToReply: ChatMessage = _.cloneDeep(this.messageData)
    messageToReply.replyOn = true;
    this.updateShareService.shareReplyMessage(messageToReply)
    this.replyOtherMessageMenu.closeMenu();
  }

  reactOnMessage(reaction: string) {
    this.messageReactionEmitter.emit({ messageId: (this.messageData._id || this.messageData.id) + '', reactionType: reaction })
  }

}

--- ./chat-widget/chat-view/chat-view.component.ts
+++ ./chat-widget/chat-view/chat-view.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';
import { ChatMessage, ChatUserResponse } from 'src/app/service/chatServices/rest-api/chat-rest-api.service';
import { ChatEmployeeInfoAfterConnect, SocketService } from 'src/app/service/chatServices/socket/socket.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-chat-view',
  templateUrl: './chat-view.component.html',
  styleUrls: ['./chat-view.component.css']
})
export class ChatViewComponent implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  awsUrl = environment.awsKey;
  @Input() chats: ChatMessage[] = []
  @Input() chatUser!: ChatUserResponse | null
  @Input() employee!: ChatEmployeeInfoAfterConnect | null
  @Output() onMessageSent = new EventEmitter<any>();
  @Input() disableSendButton: boolean = false;
  @Input() queueInFront = 0;
  @Input() typingData: any;
  @Input() redirected = false;
  @Input() oldUserId!: number;
  @Input() lastIndex!: number;
  roomName = ''

  constructor(
    private socketService: SocketService,
  ) { }

  ngOnInit() { }

  ngAfterViewChecked() {
    this.scrollToBottom();
  }


  private scrollToBottom(): void {
    try {
      this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
    } catch (err) { }
  }

  sendMessage(event: any) {
    this.onMessageSent.emit(event)
  }

  isNewDate(currentTimestamp: string | undefined, previousTimestamp: string | undefined): boolean {
    if (!previousTimestamp) {
      return true;
    }
    const currentDate = new Date(currentTimestamp ? currentTimestamp : new Date());
    const previousDate = new Date(previousTimestamp);
    return !this.isSameDate(currentDate, previousDate);
  }

  isSameDate(date1: Date, date2: Date): boolean {
    return date1.getFullYear() === date2.getFullYear() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getDate() === date2.getDate();
  }

  reactOnOtherUserMessage(event: any) {
    this.socketService.emitChatMessageReaction(event.messageId, this.chatUser?.userId, event.reactionType, this.employee?.roomName)
  }

}

--- ./chat-widget/message-recommendations/message-recommendations.component.ts
+++ ./chat-widget/message-recommendations/message-recommendations.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';
import { ChatDirection } from 'src/app/service/chatServices/backend-queries/chat-backend-queries.service';
import { ChatSharedInfoService } from 'src/app/service/chatServices/chat-shared-info/chat-shared-info.service';
import { ChatUserResponse } from 'src/app/service/chatServices/rest-api/chat-rest-api.service';

\1
  standalone: true,
  selector: 'app-message-recommendations',
  templateUrl: './message-recommendations.component.html',
  styleUrls: ['./message-recommendations.component.css']
})
export class MessageRecommendationsComponent implements OnInit {
  @Input() user: any
  @Input() linkingToEmployeeInProgress: boolean = false;
  @Input() questions: ChatDirection[] = [];
  @Input() commentRequired = false;
  @Output() questionSelected = new EventEmitter<ChatDirection>();
  @Output() comment = new EventEmitter<string>();
  commentText: string = '';
  @ViewChild('commentInput') commentInput: any;
  commentSent: boolean = false;
  chatUser!: ChatUserResponse | null;

  constructor(
    private chatSharedInfoService: ChatSharedInfoService,
  ) { }

  ngOnInit() {
    this.commentSent = false;
    this.subscribeToCommentSubjectOnCreateUserTime();
  }

  private subscribeToCommentSubjectOnCreateUserTime() {
    this.chatSharedInfoService.getChatUserCreated().subscribe({
      next: (u: ChatUserResponse | null) => {
        this.commentSent = true;
        this.chatUser = u;
      }
    });
  }

  selectQuestion(question: ChatDirection) {
    this.questionSelected.emit(question)
  }

  sendComment(commentText: string) {
    this.comment.emit(commentText);
    this.commentText = '';
    this.commentRequired = false;
    if (this.commentInput) this.commentInput.nativeElement.value = '';
  }

}

--- ./chat-widget/currentuser-message/currentuser-message.component.ts
+++ ./chat-widget/currentuser-message/currentuser-message.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit, ViewChild } from '@angular/core';
import { MatMenuTrigger } from '@angular/material/menu';
import * as _ from 'lodash';
import { ChatMessage, ChatUserResponse } from 'src/app/service/chatServices/rest-api/chat-rest-api.service';
import { UpdateShareService } from 'src/app/service/chatServices/updateShare/update-share.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-currentuser-message',
  templateUrl: './currentuser-message.component.html',
  styleUrls: ['./currentuser-message.component.css']
})
export class CurrentuserMessageComponent implements OnInit {
  @Input() user!: ChatUserResponse | null
  @Input() messageData!: ChatMessage;
  awsUrl = environment.awsKey;
  isEditing: boolean = false;
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;

  constructor(
    private updateShareService: UpdateShareService,
  ) { }

  ngOnInit() {
    if (!!this.messageData.repliedMessage) {
      this.messageData.repliedMessage.replyOn = true;
    }
  }

  removeAttachment() {
    if (this.messageData && this.messageData.localPaths) {
      this.messageData.localPaths = [];
    }
  }

  replyToMessage() {
    let messageToReply: ChatMessage = _.cloneDeep(this.messageData)
    messageToReply.replyOn = true;
    this.updateShareService.shareReplyMessage(messageToReply)
    this.menuTrigger.closeMenu();
  }

}

--- ./chat-widget/text-show-more-less/text-show-more-less.component.ts
+++ ./chat-widget/text-show-more-less/text-show-more-less.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { LinkifyPipe } from '../linkifyPipe/linkify.pipe';

\1
  standalone: true,
  selector: 'app-text-show-more-less',
  templateUrl: './text-show-more-less.component.html',
  styleUrls: ['./text-show-more-less.component.css'],
  providers: [LinkifyPipe]
})
export class TextShowMoreLessComponent {
  @Input() text: string = '';
  showMore: boolean = false;
  wordLimit = 130;
  constructor(
    private linkify: LinkifyPipe,
    private sanitizer: DomSanitizer,
  ) { }


  toggleShowMore() {
    this.showMore = !this.showMore;
  }

  get linkifiedText(): SafeHtml {
    return this.sanitizer.bypassSecurityTrustHtml(this.linkify.transform(this.text));
  }

  get truncatedText(): SafeHtml {
    const truncated = this.text.substring(0, this.wordLimit) + '...';
    return this.sanitizer.bypassSecurityTrustHtml(this.linkify.transform(truncated));
  }
}

--- ./site-themes/default_theme/subscribe-popup/subscribe-popup.component.ts
+++ ./site-themes/default_theme/subscribe-popup/subscribe-popup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { AuthService } from 'src/app/service/auth.service';
import { RtlService } from 'src/app/service/rtl.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';

\1
  standalone: true,
  selector: 'app-subscribe-popup',
  templateUrl: './subscribe-popup.component.html',
  styleUrls: ['./subscribe-popup.component.css']
})
export class SubscribePopupComponent implements OnInit {

  message!: string;
  errorMessage!: string;
  subscribeDisabled: boolean = false;
  agreeTerms: boolean = false;
  agreeTermsRequired: boolean= false;

  constructor(private authService: AuthService,
  private tokenStorage: TokenStorageService,
  public rtlService: RtlService,
  private dialogRef: MatDialogRef<SubscribePopupComponent>,
  @Inject(MAT_DIALOG_DATA) public data: string,
  public dialog: MatDialog){ }

  ngOnInit() {
  }

  onSubmit(){
    this.agreeTermsRequired = false;
    if(!this.agreeTerms){
      this.agreeTermsRequired = true;
      return;
    }
    this.subscribeDisabled = true;
    this.authService.registerCustomer(Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if(data?.errors){
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.subscribeDisabled = false;
          return;
        }
        if(data?.data?.registerCustomer != null){
          this.message = data?.data?.registerCustomer?.message;
          this.subscribeDisabled = true;
          setTimeout(() => {
            this.dialogRef.close(true);
             }, 1000);
        }
      }
    );

  }

  closemodal(){
    this.dialog.closeAll();
  }

}

--- ./site-themes/default_theme/product-detail/product-review-imagepopup/product-review-imagepopup.component.ts
+++ ./site-themes/default_theme/product-detail/product-review-imagepopup/product-review-imagepopup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-product-review-imagepopup',
  templateUrl: './product-review-imagepopup.component.html',
  styleUrls: ['./product-review-imagepopup.component.css']
})
export class ProductReviewImagepopupComponent implements OnInit {
  imageUrl! : any;
  constructor(@Inject(MAT_DIALOG_DATA) public data: { image: string}) { }

  ngOnInit() {
    this.imageUrl = this.data.image;
  }

}

--- ./site-themes/default_theme/product-detail/chartsize-popup/chartsize-popup.component.ts
+++ ./site-themes/default_theme/product-detail/chartsize-popup/chartsize-popup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-chartsize-popup',
  templateUrl: './chartsize-popup.component.html',
  styleUrls: ['./chartsize-popup.component.css']
})
export class ChartsizePopupComponent implements OnInit {

  imageUrl!: string;

  constructor(@Inject(MAT_DIALOG_DATA) public data: {imageUrl: any},
              private dialogRef: MatDialogRef<ChartsizePopupComponent>) { }

  ngOnInit() {
    this.imageUrl = this.data.imageUrl;
  }

}

--- ./site-themes/four-theme/four-theme.component.ts
+++ ./site-themes/four-theme/four-theme.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { PdpContent } from 'src/app/models/PdpContent';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { FaviconService } from 'src/app/service/fav-icon.service';
import { ThemeService } from 'src/app/service/theme.service';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { environment } from 'src/environments/environment';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';


\1
  standalone: true,
  selector: 'app-four-theme',
  templateUrl: './four-theme.component.html',
  styleUrls: ['./four-theme.component.scss']
})
export class FourThemeComponent implements OnInit, OnDestroy  {

  hideHeaderFooter: boolean = false;
  routerSubscription !: Subscription;

  footerMenuItems:  { text: string; item: string; list: any[] }[]=
  [{ text: "LOGO_SECTION", item: "logo",list:["../../../assets/img/items/footerlogo.svg",""]},
  { text: "USEFULL_LINKS", item: "links",list:["SIGNIN_ABOUTUS", "TERMS_CONDITIONS", "END_USER_LICENSE_AGREEMENT", "COOKIES_POLICY", "RETURN_POLICY", "TERMS_OF_USE"] },
  { text: "CATEGORY_ONLY", item: "category",list:[{id: 1, catName: 'Men'}, {id: 1, catName: 'Women'}] },
  { text: "MY_ACCOUNT", item: "account",list:["CONTACT_US", "PICK_A_PLAN_SUBSCRIBE", "UNSUBSCRIBE", "ORDER_TRACKING_ONLY"] }];

  footer:any={
    copyright:{
      text:'©Copyright 2023 Fazealbusiness',
      style:'LEFT_TO_RIGHT'
    },
    menu:this.footerMenuItems,
    textColor:'',
    bgColor:'',
    design:''
  }
  categories: CategoryResponse[] = [];
  dashboardContent!: ThemeDashboardContent;
  pdpResponse!: PdpContent;
  subdomain: string = '';
  private themeElement!: HTMLLinkElement;
  themeNameCSS: string = '';
  themeName: string = 'FourthTheme';
  awsURL = environment.awsKey;
  assetsAwsUrl = environment.assetsAwsKey;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private themeService: ThemeService,
    public translate: TranslateService,
    private renderer: Renderer2,
    public translateSiteService:TranslateSiteService,
    private catalogService: CatalogServiceService,
    private tokenStorage: TokenStorageService,
    private favIconService: FaviconService,private cookieDate: CookieDataServiceService,
    ) { }

  async ngOnInit(): Promise<void> {
    this.checkRoute();
    this.routerSubscription = this.router.events.subscribe(event => {
      if (event instanceof NavigationEnd) {
        this.checkRoute();
      }
    });
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      const path = window.location.pathname;
      this.subdomain = path.split('/')[1];
    }

    this.themeService.getThemeDashboardContentBySiteUrl(this.subdomain).subscribe(
      data => {
        if(data?.errors) return
        if(data?.data?.getThemeDashboardContentBySiteUrl){
          this.dashboardContent = data?.data?.getThemeDashboardContentBySiteUrl;
          this.favIconService.setFavicon(this.assetsAwsUrl + this.dashboardContent?.favIcon)
          this.tokenStorage.saveThemeDashboard(this.dashboardContent);
          this.loadThemeColors();
          this.loadCategories();
          this.footer.copyright.text = this.dashboardContent?.copyrights?.text;
          this.footer.copyright.style = this.dashboardContent?.copyrights?.textDirection;

          let footerImage = '';
          if(this.dashboardContent?.footer?.footerLogoImage){
            footerImage = this.awsURL + this.dashboardContent?.footer?.footerLogoImage;
          } else{
            footerImage = this.assetsAwsUrl + this.dashboardContent?.footer?.logoImage;
          }

          this.footerMenuItems[0].list = [footerImage, this.dashboardContent?.footer?.description]
          this.footer.menu = this.footerMenuItems;
          this.footer.textColor = this.dashboardContent?.footer?.textColor;
          this.footer.bgColor = this.dashboardContent?.footer?.backgroundColor;
          this.footer.design = this.dashboardContent?.footer?.footerDesign;
        }
      }
    );
    this.getThemeName();

  }

  ngOnDestroy() {
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
  }

  loadPdp(siteUrl: string){
    this.themeService.getPdpContentBySiteUrl(siteUrl).subscribe(
      data => {
        if(data.data.getPdpContentBySiteUrl){
          this.pdpResponse = data.data.getPdpContentBySiteUrl;
          this.tokenStorage.savePdp(this.pdpResponse);
        }
      }
    );
  }



  loadThemeColors(){
      this.renderer.addClass(document.body, `theme-color-${this.dashboardContent.themeColorsResponse.name}`);
  }


  loadThemeCSS() {
    // Get the theme name
    console.log(this.dashboardContent.themeName,"checking theme name")
    this.themeNameCSS = this.dashboardContent.themeName;
    const url = `https://fazeal-ui-assets.s3.amazonaws.com/themes/${this.themeNameCSS}.css`;

    // Check if a theme is already loaded and remove it
    if (this.themeElement) {
      document.head.removeChild(this.themeElement);
    }

    // Create a new link element
    this.themeElement = document.createElement('link');
    this.themeElement.rel = 'stylesheet';
    this.themeElement.href = url;

    // Append the link element to the document head
    document.head.appendChild(this.themeElement);
  }

  loadCategories(){
    this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
      data => {
        this.categories = data.data.findAllCategoryBySiteUrl;
        this.footerMenuItems[2].list = [];
        this.categories?.forEach(cat => {
          this.footerMenuItems[2].list.push({id: cat.id, catName: cat.name});
        });
      }
    );
  }

  checkRoute() {
    let subdomain = this.route.snapshot.params['subdomain'];
    if (environment.env !== 'local') {
      subdomain = '';
    }
    const expectedUrl = `/${subdomain}/print-order-summary`;

    if (this.router.url === expectedUrl) {
      this.hideHeaderFooter = true;
    } else {
      this.hideHeaderFooter = false;
    }
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

}

--- ./site-themes/four-theme/return-refund-step-form/return-refund-step-form.component.ts
+++ ./site-themes/four-theme/return-refund-step-form/return-refund-step-form.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';
\1
  standalone: true,
  selector: 'app-return-refund-step-form',
  templateUrl: './return-refund-step-form.component.html',
  styleUrls: ['./return-refund-step-form.component.scss']
})
export class ReturnRefundStepFormComponent implements OnInit {
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  checkBoxChecked: boolean = false;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  def:any = 0;

  constructor() { }

  ngOnInit(): void {
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

}

--- ./site-themes/four-theme/four-header/four-header.component.ts
+++ ./site-themes/four-theme/four-header/four-header.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { GuestShoppingCartService } from './../../../service/guest-shopping-cart.service';
import { Component, ElementRef, HostListener, Input, OnInit, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { SubscribePopupComponent } from '../../default_theme/subscribe-popup/subscribe-popup.component';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { SignupModalCheckoutComponent } from '../signup-modal-checkout/signup-modal-checkout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ForgotpasswordforstoreComponent } from '../forgotpasswordforstore/forgotpasswordforstore.component';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';

declare const google: any;

\1
  standalone: true,
  selector: 'app-four-header',
  templateUrl: './four-header.component.html',
  styleUrls: ['./four-header.component.scss']
})
export class FourHeaderComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  themeName: string = 'FourthTheme';
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomain;
    if(environment.env !== 'local'){
      subdomain = window.location.hostname;
    } else {
      subdomain = this.route.snapshot.params['subdomain'];
    }
    if (subdomain) {
      this.translateSite.setSiteLanguage(subdomain);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();

    this.getThemeName();
  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }

  /**
   * Change the language by selecting the option in the Google Translate dropdown.
   * @param langCode - The language code to switch to.
   */
  changeLanguage(langCode: string): void {
    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }

    // Find the matching option in the dropdown
    googleTranslateDropdown.value = langCode;

    // Trigger the change event to apply the selected language
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    const cookieData = this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!);
    try {
      this.sessionResponse = cookieData ? JSON.parse(cookieData) : {};
    } catch (error) {
      console.error("Error parsing sessionResponse:", error);
      this.sessionResponse = null!;
    }

    if (this.sessionResponse?.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }

    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart();
      // window.location.reload();
    } else {
      if (this.sessionResponse?.userType !== "GENERIC") {
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();
    if (this.sessionResponse?.userType !== "GENERIC") {
      this.refreshAddToCart();
    }
    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data?.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data?.data?.getStoreLogoBySiteUrl;
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 7) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse?.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    this.searchDrawer.toggle()
    this.searchtoggle3();
    if (this.keyword == '') {
      this.router.navigate(['/' + this.subdomain + '/home']);
      return;
    }
    const queryParams = {
      searchTerm: this.keyword
    };
    this.router.navigate(['/' + this.subdomain + '/s'], { queryParams: queryParams });
    this.keyword = '';
  }

  optionSelection(event: any) {
    this.keyword = event.source.value;
    const queryParams = {
      searchTerm: this.keyword
    };
    this.router.navigate(['/' + this.subdomain + '/s'], { queryParams: queryParams });
  }

  onEnterKeyPress(event: any) {
    this.searchtoggle3();
    this.searchDrawer.toggle()
    if (this.keyword == '') {
      this.router.navigate(['/' + this.subdomain + '/home']);
      return;
    }
    if (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = {
        searchTerm: this.keyword
      };
      this.router.navigate(['/' + this.subdomain + '/s'], { queryParams: queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

async onSubmit(type: string, loginType: string) {
  if (environment.env !== 'local') {
    this.subdomain = '';
  }
  if (loginType == 'FAZEAL') {
    const { username, password } = this.form;
    if (!this.validateUsername(username)) {
      return;
    }
    const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
    const data = loginData?.data?.authenticateUser;
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.isLoginFailed = true;
      return
    } else if (!data) {
      this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
      this.isLoginFailed = true;
      return
    }
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName
    this.user.lastName = data.lastName
    this.user.username = data.username
    this.user.id = data.id
    this.user.userType = 'FAZEAL_REGISTERED';
    this.user.profile = data.profile
    this.user.coverPhoto = data.cover
    this.user.email = data.email
    this.user.isSubscribed = false;
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;

    this.isLoggedIn = true;
    this.isLoginFailed = false;
    this.cookieDate.deleteUserCookie('user');
    this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveUser(this.user, true);
    const guestId = this.sessionResponse.id;
    await this.stoeSession.getUserIpAddress().then(async ip => {
      console.log('getUserIpAddress ====== ', ip);
      (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
      });
    });
    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = 'FAZEAL_REGISTERED';
    this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');

    this.sharedService.triggerReload();
    console.log(this.tokenStorage.getBusinessID()!)
    this.sessionUser = this.cookieDate.getUserCookie('user');
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
      .subscribe(async data => {
        if (data?.data?.cartMerge) {
          this.loadSubscribeModal(type);
          this.sessionResponse.id = this.user.id;
          this.sessionResponse.userType = 'FAZEAL_REGISTERED';
          this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
          this.unsubscibe()
          await this.loadCartAndFav()
          return;
        }
      });
    const currentUrl = this.router.url;
    const segments = currentUrl.split('/');
    const lastSegment = segments[segments.length - 1];
    if (lastSegment === 'checkout') {
      const currentRoute = `/${segments[1]}/checkout`;
      const navigationExtras: NavigationExtras = {
        skipLocationChange: true
      };
      this.router.navigateByUrl(currentRoute, navigationExtras);
      this.sharedService.triggerReload();
    }
    if (this.router.url.includes('order-details')) {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    this.loadSubscribeModal(type);

    this.unsubscibe()
    await this.loadCartAndFav()
    this.authService.notifyLogoutLoginDetector(this.user)
  } else {
    const { username, password } = this.form;
    if (!this.validateEmail(username)) {
      return;
    }
    const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
    const data = loginData?.data?.authenticateUser;
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.isLoginFailed = true;
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.errorMessage }
      });
      return
    } else if (!data) {
      this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
      this.isLoginFailed = true;
      return
    }
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName
    this.user.lastName = data.lastName
    this.user.phone = data.phoneNumber
    this.user.id = data.id
    this.user.email = data.email
    this.user.userType = 'STORE_REGISTERED';
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;
    this.user.accessToken = data.accessToken;
    this.user.refreshToken = data.refreshToken;
    this.user.profile = data.profile;
    this.user.countryCode = data.countryCode;
    this.user.emailVerified = data.emailVerified;
    this.isLoggedIn = true;
    this.isLoginFailed = false;
    this.cookieDate.deleteUserCookie('user');
    this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveRememberMe(this.isRememberMe);
    this.tokenStorage.saveUser(this.user, this.isRememberMe);
    const guestId = this.sessionResponse.id;
    await this.stoeSession.getUserIpAddress().then(async ip => {
      console.log('getUserIpAddress ====== ', ip);
      (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
      });
    });
    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = 'STORE_REGISTERED';
    this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');
    this.sharedService.triggerReload();
    this.sessionUser = this.cookieDate.getUserCookie('user');
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
    this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
      .subscribe(async data => {
        if (data?.data?.cartMerge) {
          this.loadSubscribeModal(type);
          this.sessionResponse.id = this.user.id;
          this.sessionResponse.userType = 'STORE_REGISTERED';
          this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
          this.unsubscibe()
          await this.loadCartAndFav()
          return;
        }
      });
    if (this.router.url.includes('order-details')) {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    this.authService.notifyLogoutLoginDetector(this.user)
    this.unsubscibe()
    await this.loadCartAndFav()
  }
}

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data?.data?.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true));
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.notifyRemoveItem(itemId);
          this.dataService.setReflectCartItems(true);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          })
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe()
    this.favSubscription?.unsubscribe()
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }


  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }


}

--- ./site-themes/four-theme/four-header/header-theme-six/header-theme-six.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-six/header-theme-six.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-six',
  templateUrl: './header-theme-six.component.html',
  styleUrls: ['./header-theme-six.component.css']
})
export class HeaderThemeSixComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data?.data?.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes?.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList?.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data?.data?.listUserCartItems) {
              this.shoppingCart = data?.data?.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}

}

--- ./site-themes/four-theme/four-header/header-theme-nineteen/header-theme-nineteen.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-nineteen/header-theme-nineteen.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-nineteen',
  templateUrl: './header-theme-nineteen.component.html',
  styleUrls: ['./header-theme-nineteen.component.css']
})
export class HeaderThemeNineteenComponent implements OnInit {

  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  contactCountry : string = "";
  contactPhone : string = "";
  contactEmail : string = "";
  businessContacts : any[] = [];
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();
    this.getContactInfo();

  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    this.searchDrawer.toggle()
    this.searchtoggle3();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {
    this.searchtoggle3();
    this.searchDrawer.toggle()
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  getContactInfo(){
    this.businessSetting.getBusinessDetailsById(this.businessId).subscribe(data => {
      if(data?.data?.getBusinessDetailsById){
        this.contactCountry =  data?.data?.getBusinessDetailsById?.country;
        this.contactPhone = data?.data?.getBusinessDetailsById?.contactNo;
        this.contactEmail = data?.data?.getBusinessDetailsById?.email;
        this.businessContacts = data?.data?.getBusinessDetailsById?.businessContacts;
      }
    });
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}



}




--- ./site-themes/four-theme/four-header/header-theme-seventeen/header-theme-seventeen.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-seventeen/header-theme-seventeen.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-seventeen',
  templateUrl: './header-theme-seventeen.component.html',
  styleUrls: ['./header-theme-seventeen.component.css']
})
export class HeaderThemeSeventeenComponent  implements OnInit {

  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  contactCountry : string = "";
  contactPhone : string = "";
  contactEmail : string = "";
  businessContacts : any[] = [];
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();
    this.getContactInfo();

  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 5) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  getContactInfo(){
    this.businessSetting.getBusinessDetailsById(this.businessId).subscribe(data => {
      if(data?.data?.getBusinessDetailsById){
        this.contactCountry =  data?.data?.getBusinessDetailsById?.country;
        this.contactPhone = data?.data?.getBusinessDetailsById?.contactNo;
        this.contactEmail = data?.data?.getBusinessDetailsById?.email;
        this.businessContacts = data?.data?.getBusinessDetailsById?.businessContacts;
      }
    });
  }


  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}

}




--- ./site-themes/four-theme/four-header/header-theme-nine/header-theme-nine.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-nine/header-theme-nine.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-nine',
  templateUrl: './header-theme-nine.component.html',
  styleUrls: ['./header-theme-nine.component.css']
})
export class HeaderThemeNineComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }

  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data?.data?.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes?.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe()
    this.favSubscription?.unsubscribe()
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  openLink(url: string) {
    if (url) {
      window.open(url, '_blank');
    }
  }


  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}



}



--- ./site-themes/four-theme/four-header/header-theme-fifteen/header-theme-fifteen.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-fifteen/header-theme-fifteen.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-fifteen',
  templateUrl: './header-theme-fifteen.component.html',
  styleUrls: ['./header-theme-fifteen.component.css']
})
export class HeaderThemeFifteenComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();


  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 3) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}

}

--- ./site-themes/four-theme/four-header/header-theme-eight/header-theme-eight.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-eight/header-theme-eight.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-eight',
  templateUrl: './header-theme-eight.component.html',
  styleUrls: ['./header-theme-eight.component.css']
})
export class HeaderThemeEightComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 3) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    this.searchDrawer.toggle()
    this.searchtoggle3();

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {
    this.searchtoggle3();
    this.searchDrawer.toggle()

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data?.data?.listUserCartItems) {
              this.shoppingCart = data?.data?.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}


}

--- ./site-themes/four-theme/four-header/header-theme-twelve/header-theme-twelve.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-twelve/header-theme-twelve.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-twelve',
  templateUrl: './header-theme-twelve.component.html',
  styleUrls: ['./header-theme-twelve.component.css']
})
export class HeaderThemeTwelveComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}




}




--- ./site-themes/four-theme/four-header/header-theme-fourteen/header-theme-fourteen.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-fourteen/header-theme-fourteen.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-fourteen',
  templateUrl: './header-theme-fourteen.component.html',
  styleUrls: ['./header-theme-fourteen.component.css']
})
export class HeaderThemeFourteenComponent implements OnInit {

  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  contactCountry : string = "";
  contactPhone : string = "";
  contactEmail : string = "";
  businessContacts : any[] = [];
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();
    this.getContactInfo();

  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  getContactInfo(){
    this.businessSetting.getBusinessDetailsById(this.businessId).subscribe(data => {
      if(data?.data?.getBusinessDetailsById){
        this.contactCountry =  data?.data?.getBusinessDetailsById?.country;
        this.contactPhone = data?.data?.getBusinessDetailsById?.contactNo;
        this.contactEmail = data?.data?.getBusinessDetailsById?.email;
        this.businessContacts = data?.data?.getBusinessDetailsById?.businessContacts;
      }
    });
  }


  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}


}




--- ./site-themes/four-theme/four-header/header-theme-ten/header-theme-ten.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-ten/header-theme-ten.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-ten',
  templateUrl: './header-theme-ten.component.html',
  styleUrls: ['./header-theme-ten.component.css']
})
export class HeaderThemeTenComponent implements OnInit {

  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }

  }

  optionSelection(event: any) {
   if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList?.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data?.data?.listUserCartItems) {
              this.shoppingCart = data?.data?.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}

}

--- ./site-themes/four-theme/four-header/header-theme-eleven/header-theme-eleven.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-eleven/header-theme-eleven.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-eleven',
  templateUrl: './header-theme-eleven.component.html',
  styleUrls: ['./header-theme-eleven.component.css']
})
export class HeaderThemeElevenComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    this.searchDrawer.toggle()
    this.searchtoggle3();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {
    this.searchtoggle3();
    this.searchDrawer.toggle()
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}

}

--- ./site-themes/four-theme/four-header/header-theme-three/header-theme-three.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-three/header-theme-three.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';
import { MatOptionSelectionChange } from '@angular/material/core';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-three',
  templateUrl: './header-theme-three.component.html',
  styleUrls: ['./header-theme-three.component.css']
})
export class HeaderThemeThreeComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data?.data?.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    const cookieData = this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!);
    try {
      this.sessionResponse = cookieData ? JSON.parse(cookieData) : {};
    } catch (error) {
      console.error("Error parsing sessionResponse:", error);
      this.sessionResponse = null!;
    }

    if (this.sessionResponse?.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }

    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart();
      // window.location.reload();
    } else {
      if (this.sessionResponse?.userType !== "GENERIC") {
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();
    if (this.sessionResponse?.userType !== "GENERIC") {
      this.refreshAddToCart();
    }
    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data?.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 7) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse?.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      if (this.keyword.trim() === '') {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
        return;
      }
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      this.searchbox3 = false;
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

    optionSelection(event: MatOptionSelectionChange) {
      if (!event.isUserInput) return;
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      this.keyword = event.source.value;
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      this.searchbox3 = false;
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

    onEnterKeyPress(event: any) {
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      if (this.keyword.trim() === '') {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
        this.searchbox3 = false;
        return;
      }
      if  (event.keyCode === 13 || event.key === 'Enter') {
        const queryParams = { searchTerm: this.keyword };
        this.router.navigate([`/${this.subdomain}/s`], { queryParams });
        this.searchbox3 = false;
        if (this.autocompleteTrigger) {
          this.autocompleteTrigger.closePanel();
          this.keyword = '';
        }
      }
    }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

async onSubmit(type: string, loginType: string) {
  if (environment.env !== 'local') {
    this.subdomain = '';
  }
  if (loginType == 'FAZEAL') {
    const { username, password } = this.form;
    if (!this.validateUsername(username)) {
      return;
    }
    const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
    const data = loginData?.data?.authenticateUser;
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.isLoginFailed = true;
      return
    } else if (!data) {
      this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
      this.isLoginFailed = true;
      return
    }
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName
    this.user.lastName = data.lastName
    this.user.username = data.username
    this.user.id = data.id
    this.user.userType = 'FAZEAL_REGISTERED';
    this.user.profile = data.profile
    this.user.coverPhoto = data.cover
    this.user.email = data.email
    this.user.isSubscribed = false;
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;

    this.isLoggedIn = true;
    this.isLoginFailed = false;
    this.cookieDate.deleteUserCookie('user');
    this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveUser(this.user, true);
    await this.stoeSession.getUserIpAddress().then(async ip => {
      console.log('getUserIpAddress ====== ', ip);
      (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
      });
    });
    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = 'FAZEAL_REGISTERED';
    this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');

    this.sharedService.triggerReload();
    console.log(this.tokenStorage.getBusinessID()!)
    this.sessionUser = this.cookieDate.getUserCookie('user');
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if (this.sessionResponse.userType == 'GUEST') {
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, this.sessionResponse.id, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data.data.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
    }
    const currentUrl = this.router.url;
    const segments = currentUrl.split('/');
    const lastSegment = segments[segments.length - 1];
    if (lastSegment === 'checkout') {
      const currentRoute = `/${segments[1]}/checkout`;
      const navigationExtras: NavigationExtras = {
        skipLocationChange: true
      };
      this.router.navigateByUrl(currentRoute, navigationExtras);
      this.sharedService.triggerReload();
    }
    if (this.router.url.includes('order-details')) {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    this.loadSubscribeModal(type);

    this.unsubscibe()
    await this.loadCartAndFav()
    this.authService.notifyLogoutLoginDetector(this.user)
  } else {
    const { username, password } = this.form;
    if (!this.validateEmail(username)) {
      return;
    }
    const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
    const data = loginData?.data?.authenticateUser;
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.isLoginFailed = true;
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.errorMessage }
      });
      return
    } else if (!data) {
      this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
      this.isLoginFailed = true;
      return
    }
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName
    this.user.lastName = data.lastName
    this.user.phone = data.phoneNumber
    this.user.id = data.id
    this.user.email = data.email
    this.user.userType = 'STORE_REGISTERED';
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;
    this.user.accessToken = data.accessToken;
    this.user.refreshToken = data.refreshToken;
    this.user.profile = data.profile;
    this.user.countryCode = data.countryCode;
    this.user.emailVerified = data.emailVerified;
    this.isLoggedIn = true;
    this.isLoginFailed = false;
    this.cookieDate.deleteUserCookie('user');
    this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveRememberMe(this.isRememberMe);
    this.tokenStorage.saveUser(this.user, this.isRememberMe);
    await this.stoeSession.getUserIpAddress().then(async ip => {
      console.log('getUserIpAddress ====== ', ip);
      (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
      });
    });
    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = 'STORE_REGISTERED';
    this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');
    this.sharedService.triggerReload();
    this.sessionUser = this.cookieDate.getUserCookie('user');
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
    if (this.sessionResponse?.userType == 'GUEST') {
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, this.sessionResponse.id, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data.data.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
    }
    if (this.router.url.includes('order-details')) {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    this.authService.notifyLogoutLoginDetector(this.user)
    this.unsubscibe()
    await this.loadCartAndFav()
  }
}

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data?.data?.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes?.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data?.data?.listUserCartItems) {
              this.shoppingCart = data?.data?.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}

}

--- ./site-themes/four-theme/four-header/header-theme-five/header-theme-five.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-five/header-theme-five.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-five',
  templateUrl: './header-theme-five.component.html',
  styleUrls: ['./header-theme-five.component.css']
})
export class HeaderThemeFiveComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    this.searchbox3 = false;
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    this.searchbox3 = false;
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }

    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      this.searchbox3 = false;
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      this.searchbox3 = false;
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

async onSubmit(type: string, loginType: string) {
  if (environment.env !== 'local') {
    this.subdomain = '';
  }
  if (loginType == 'FAZEAL') {
    const { username, password } = this.form;
    if (!this.validateUsername(username)) {
      return;
    }
    const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
    const data = loginData?.data?.authenticateUser;
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.isLoginFailed = true;
      return
    } else if (!data) {
      this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
      this.isLoginFailed = true;
      return
    }
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName
    this.user.lastName = data.lastName
    this.user.username = data.username
    this.user.id = data.id
    this.user.userType = 'FAZEAL_REGISTERED';
    this.user.profile = data.profile
    this.user.coverPhoto = data.cover
    this.user.email = data.email
    this.user.isSubscribed = false;
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;

    this.isLoggedIn = true;
    this.isLoginFailed = false;
    this.cookieDate.deleteUserCookie('user');
    this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveUser(this.user, true);
    const guestId = this.sessionResponse.id;
    await this.stoeSession.getUserIpAddress().then(async ip => {
      console.log('getUserIpAddress ====== ', ip);
      (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
      });
    });
    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = 'FAZEAL_REGISTERED';
    this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');

    this.sharedService.triggerReload();
    console.log(this.tokenStorage.getBusinessID()!)
    this.sessionUser = this.cookieDate.getUserCookie('user');
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
      .subscribe(async data => {
        if (data?.data?.cartMerge) {
          this.loadSubscribeModal(type);
          this.sessionResponse.id = this.user.id;
          this.sessionResponse.userType = 'FAZEAL_REGISTERED';
          this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
          this.unsubscibe()
          await this.loadCartAndFav()
          return;
        }
      });
    const currentUrl = this.router.url;
    const segments = currentUrl.split('/');
    const lastSegment = segments[segments.length - 1];
    if (lastSegment === 'checkout') {
      const currentRoute = `/${segments[1]}/checkout`;
      const navigationExtras: NavigationExtras = {
        skipLocationChange: true
      };
      this.router.navigateByUrl(currentRoute, navigationExtras);
      this.sharedService.triggerReload();
    }
    if (this.router.url.includes('order-details')) {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    this.loadSubscribeModal(type);

    this.unsubscibe()
    await this.loadCartAndFav()
    this.authService.notifyLogoutLoginDetector(this.user)
  } else {
    const { username, password } = this.form;
    if (!this.validateEmail(username)) {
      return;
    }
    const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
    const data = loginData?.data?.authenticateUser;
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.isLoginFailed = true;
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.errorMessage }
      });
      return
    } else if (!data) {
      this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
      this.isLoginFailed = true;
      return
    }
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName
    this.user.lastName = data.lastName
    this.user.phone = data.phoneNumber
    this.user.id = data.id
    this.user.email = data.email
    this.user.userType = 'STORE_REGISTERED';
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;
    this.user.accessToken = data.accessToken;
    this.user.refreshToken = data.refreshToken;
    this.user.profile = data.profile;
    this.user.countryCode = data.countryCode;
    this.user.emailVerified = data.emailVerified;
    this.isLoggedIn = true;
    this.isLoginFailed = false;
    this.cookieDate.deleteUserCookie('user');
    this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveRememberMe(this.isRememberMe);
    this.tokenStorage.saveUser(this.user, this.isRememberMe);
    const guestId = this.sessionResponse.id;
    await this.stoeSession.getUserIpAddress().then(async ip => {
      console.log('getUserIpAddress ====== ', ip);
      (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
      });
    });
    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = 'STORE_REGISTERED';
    this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');
    this.sharedService.triggerReload();
    this.sessionUser = this.cookieDate.getUserCookie('user');
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
    this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
      .subscribe(async data => {
        if (data?.data?.cartMerge) {
          this.loadSubscribeModal(type);
          this.sessionResponse.id = this.user.id;
          this.sessionResponse.userType = 'STORE_REGISTERED';
          this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
          this.unsubscibe()
          await this.loadCartAndFav()
          return;
        }
      });
    if (this.router.url.includes('order-details')) {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    this.authService.notifyLogoutLoginDetector(this.user)
    this.unsubscibe()
    await this.loadCartAndFav()
  }
}

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data?.data?.listUserCartItems) {
              this.shoppingCart = data?.data?.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}


}


--- ./site-themes/four-theme/four-header/header-theme-twentyone/header-theme-twentyone.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-twentyone/header-theme-twentyone.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-twentyone',
  templateUrl: './header-theme-twentyone.component.html',
  styleUrls: ['./header-theme-twentyone.component.css']
})
export class HeaderThemeTwentyoneComponent implements OnInit {

  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  contactCountry : string = "";
  contactPhone : string = "";
  contactEmail : string = "";
  businessContacts : any[] = [];
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();
    this.getContactInfo();

  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }
    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }
    else {
      this.CategoryExceed = false;
    }
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    this.searchDrawer.toggle()
    this.searchtoggle3();

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }

  }

  optionSelection(event: any) {
     if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {
    this.searchtoggle3();
    this.searchDrawer.toggle()
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  getContactInfo(){
    this.businessSetting.getBusinessDetailsById(this.businessId).subscribe(data => {
      if(data?.data?.getBusinessDetailsById){
        this.contactCountry =  data?.data?.getBusinessDetailsById?.country;
        this.contactPhone = data?.data?.getBusinessDetailsById?.contactNo;
        this.contactEmail = data?.data?.getBusinessDetailsById?.email;
        this.businessContacts = data?.data?.getBusinessDetailsById?.businessContacts;
      }
    });
  }




  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}

}




--- ./site-themes/four-theme/four-header/header-theme-sixteen/header-theme-sixteen.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-sixteen/header-theme-sixteen.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-sixteen',
  templateUrl: './header-theme-sixteen.component.html',
  styleUrls: ['./header-theme-sixteen.component.css']
})
export class HeaderThemeSixteenComponent implements OnInit {

  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  contactCountry : string = "";
  contactPhone : string = "";
  contactEmail : string = "";
  businessContacts : any[] = [];
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();
    this.getContactInfo();

  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      this.searchbox3 = false;
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    this.searchbox3 = false;
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }

  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    this.searchbox3 = false;
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      this.searchbox3 = false;
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      this.searchbox3 = false;
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  getContactInfo(){
    this.businessSetting.getBusinessDetailsById(this.businessId).subscribe(data => {
      if(data?.data?.getBusinessDetailsById){
        this.contactCountry =  data?.data?.getBusinessDetailsById?.country;
        this.contactPhone = data?.data?.getBusinessDetailsById?.contactNo;
        this.contactEmail = data?.data?.getBusinessDetailsById?.email;
        this.businessContacts = data?.data?.getBusinessDetailsById?.businessContacts;
      }
    });
  }


  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}

}




--- ./site-themes/four-theme/four-header/header-theme-four/header-theme-four.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-four/header-theme-four.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';
import { MatOptionSelectionChange } from '@angular/material/core';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-four',
  templateUrl: './header-theme-four.component.html',
  styleUrls: ['./header-theme-four.component.css']
})
export class HeaderThemeFourComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 5) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      if (this.keyword.trim() === '') {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
        return;
      }
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

    optionSelection(event: MatOptionSelectionChange) {
      if (!event.isUserInput) return;
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      this.keyword = event.source.value;
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

    onEnterKeyPress(event: any) {
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      if (this.keyword.trim() === '') {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
        return;
      }
      if  (event.keyCode === 13 || event.key === 'Enter') {
        const queryParams = { searchTerm: this.keyword };
        this.router.navigate([`/${this.subdomain}/s`], { queryParams });
        if (this.autocompleteTrigger) {
          this.autocompleteTrigger.closePanel();
          this.keyword = '';
        }
      }
    }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return;
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes?.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe()
    this.favSubscription?.unsubscribe()
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data?.data?.listUserCartItems) {
              this.shoppingCart = data?.data?.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}

}

--- ./site-themes/four-theme/four-header/header-theme-twenty/header-theme-twenty.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-twenty/header-theme-twenty.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-twenty',
  templateUrl: './header-theme-twenty.component.html',
  styleUrls: ['./header-theme-twenty.component.css']
})
export class HeaderThemeTwentyComponent implements OnInit {

  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  contactCountry : string = "";
  contactPhone : string = "";
  contactEmail : string = "";
  businessContacts : any[] = [];
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();

    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();
    this.getContactInfo();

  }


ngOnChanges(changes: SimpleChanges): void {
  if (changes['categories'] && changes['categories'].currentValue) {
    this.getStoreCategories();
  }
}


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    this.searchDrawer.toggle()
    this.searchtoggle3();

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }

  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {
    this.searchtoggle3();
    this.searchDrawer.toggle()
    if (this.keyword == '') {
      this.router.navigate(['/' + this.subdomain + '/home']);
      return;
    }
    if (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = {
        searchTerm: this.keyword
      };
      this.router.navigate(['/' + this.subdomain + '/s'], { queryParams: queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;



  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  getContactInfo(){
    this.businessSetting.getBusinessDetailsById(this.businessId).subscribe(data => {
      if(data?.data?.getBusinessDetailsById){
        this.contactCountry =  data?.data?.getBusinessDetailsById?.country;
        this.contactPhone = data?.data?.getBusinessDetailsById?.contactNo;
        this.contactEmail = data?.data?.getBusinessDetailsById?.email;
        this.businessContacts = data?.data?.getBusinessDetailsById?.businessContacts;
      }
    });
  }


   @ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
   openMoreCategories(){
    this.morecategorydrawer.toggle()
  }


}




--- ./site-themes/four-theme/four-header/header-theme-first/header-theme-first.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-first/header-theme-first.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n
import { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';
import { MatOptionSelectionChange } from '@angular/material/core';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-first',
  templateUrl: './header-theme-first.component.html',
  styleUrls: ['./header-theme-first.component.css']
})
export class HeaderThemeFirstComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });
    this.listBusinessAddresses();
  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }

  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    const cookieData = this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!);
    try {
      this.sessionResponse = cookieData ? JSON.parse(cookieData) : {};
    } catch (error) {
      console.error("Error parsing sessionResponse:", error);
      this.sessionResponse = null!;
    }

    if (this.sessionResponse?.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }

    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart();
      // window.location.reload();
    } else {
      if (this.sessionResponse?.userType !== "GENERIC") {
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();
    if (this.sessionResponse?.userType !== "GENERIC") {
      this.refreshAddToCart();
    }
    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse?.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: MatOptionSelectionChange) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data?.data?.listUserCartItems) {
              this.shoppingCart = data?.data?.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
              this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }
ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}



}

--- ./site-themes/four-theme/four-header/header-theme-seven/header-theme-seven.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-seven/header-theme-seven.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-seven',
  templateUrl: './header-theme-seven.component.html',
  styleUrls: ['./header-theme-seven.component.css']
})
export class HeaderThemeSevenComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 3) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    this.searchDrawer.toggle()
    this.searchtoggle3();

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }

  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {
    this.searchtoggle3();
    this.searchDrawer.toggle()

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data?.data?.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes?.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList?.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data?.data?.listUserCartItems) {
              this.shoppingCart = data?.data?.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}


}

--- ./site-themes/four-theme/four-header/header-theme-two/header-theme-two.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-two/header-theme-two.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';
import { MatOptionSelectionChange } from '@angular/material/core';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-two',
  templateUrl: './header-theme-two.component.html',
  styleUrls: ['./header-theme-two.component.css']
})
export class HeaderThemeTwoComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }

  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    this.searchDrawer.toggle()
    this.searchtoggle3();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.searchtoggle3();
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
    }

    optionSelection(event: MatOptionSelectionChange) {
      if (!event.isUserInput) return;
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      this.keyword = event.source.value;
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

    onEnterKeyPress(event: any) {
      this.searchtoggle3();
      this.searchDrawer.toggle()
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      this.searchtoggle3();
      if (this.keyword.trim() === '') {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
        return;
      }
      if  (event.keyCode === 13 || event.key === 'Enter') {
        const queryParams = { searchTerm: this.keyword };
        this.router.navigate([`/${this.subdomain}/s`], { queryParams });
        if (this.autocompleteTrigger) {
          this.autocompleteTrigger.closePanel();
          this.keyword = '';
        }
      }
    }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

async onSubmit(type: string, loginType: string) {
  if (environment.env !== 'local') {
    this.subdomain = '';
  }
  if (loginType == 'FAZEAL') {
    const { username, password } = this.form;
    if (!this.validateUsername(username)) {
      return;
    }
    const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
    const data = loginData?.data?.authenticateUser;
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.isLoginFailed = true;
      return
    } else if (!data) {
      this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
      this.isLoginFailed = true;
      return
    }
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName
    this.user.lastName = data.lastName
    this.user.username = data.username
    this.user.id = data.id
    this.user.userType = 'FAZEAL_REGISTERED';
    this.user.profile = data.profile
    this.user.coverPhoto = data.cover
    this.user.email = data.email
    this.user.isSubscribed = false;
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;

    this.isLoggedIn = true;
    this.isLoginFailed = false;
    this.cookieDate.deleteUserCookie('user');
    this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveUser(this.user, true);
    await this.stoeSession.getUserIpAddress().then(async ip => {
      console.log('getUserIpAddress ====== ', ip);
      (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
      });
    });
    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = 'FAZEAL_REGISTERED';
    this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');

    this.sharedService.triggerReload();
    console.log(this.tokenStorage.getBusinessID()!)
    this.sessionUser = this.cookieDate.getUserCookie('user');
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if (this.sessionResponse.userType == 'GUEST') {
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, this.sessionResponse.id, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data.data.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
    }
    const currentUrl = this.router.url;
    const segments = currentUrl.split('/');
    const lastSegment = segments[segments.length - 1];
    if (lastSegment === 'checkout') {
      const currentRoute = `/${segments[1]}/checkout`;
      const navigationExtras: NavigationExtras = {
        skipLocationChange: true
      };
      this.router.navigateByUrl(currentRoute, navigationExtras);
      this.sharedService.triggerReload();
    }
    if (this.router.url.includes('order-details')) {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    this.loadSubscribeModal(type);

    this.unsubscibe()
    await this.loadCartAndFav()
    this.authService.notifyLogoutLoginDetector(this.user)
  } else {
    const { username, password } = this.form;
    if (!this.validateEmail(username)) {
      return;
    }
    const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
    const data = loginData?.data?.authenticateUser;
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.isLoginFailed = true;
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.errorMessage }
      });
      return
    } else if (!data) {
      this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
      this.isLoginFailed = true;
      return
    }
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName
    this.user.lastName = data.lastName
    this.user.phone = data.phoneNumber
    this.user.id = data.id
    this.user.email = data.email
    this.user.userType = 'STORE_REGISTERED';
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;
    this.user.accessToken = data.accessToken;
    this.user.refreshToken = data.refreshToken;
    this.user.profile = data.profile;
    this.user.countryCode = data.countryCode;
    this.user.emailVerified = data.emailVerified;
    this.isLoggedIn = true;
    this.isLoginFailed = false;
    this.cookieDate.deleteUserCookie('user');
    this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveRememberMe(this.isRememberMe);
    this.tokenStorage.saveUser(this.user, this.isRememberMe);
    await this.stoeSession.getUserIpAddress().then(async ip => {
      console.log('getUserIpAddress ====== ', ip);
      (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
      });
    });
    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = 'STORE_REGISTERED';
    this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');
    this.sharedService.triggerReload();
    this.sessionUser = this.cookieDate.getUserCookie('user');
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
    if (this.sessionResponse?.userType == 'GUEST') {
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, this.sessionResponse.id, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data.data.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
    }
    if (this.router.url.includes('order-details')) {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    this.authService.notifyLogoutLoginDetector(this.user)
    this.unsubscibe()
    await this.loadCartAndFav()
  }
}

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data?.data?.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id);
        if (addRes?.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true));
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data?.data?.listUserCartItems) {
              this.shoppingCart = data?.data?.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
  }
  onSidenavClosed() {
    this.parentcategorylist = true;

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  ngOnChanges(changes: SimpleChanges): void {
if (changes['categories'] && changes['categories'].currentValue) {
this.getStoreCategories();
}
}



@ViewChild('morecategorydrawer') morecategorydrawer!: MatSidenav;
openMoreCategories(){
this.morecategorydrawer.toggle()
}


}

--- ./site-themes/four-theme/four-header/header-theme-thirteen/header-theme-thirteen.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-thirteen/header-theme-thirteen.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-thirteen',
  templateUrl: './header-theme-thirteen.component.html',
  styleUrls: ['./header-theme-thirteen.component.css']
})
export class HeaderThemeThirteenComponent implements OnInit {
  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.getStoreCategories();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();


  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 4) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {

     if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }
  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }
}




--- ./site-themes/four-theme/four-header/header-theme-eighteen/header-theme-eighteen.component.ts
+++ ./site-themes/four-theme/four-header/header-theme-eighteen/header-theme-eighteen.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, HostListener, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatMenuTrigger } from '@angular/material/menu';
import { MatDrawer, MatSidenav } from '@angular/material/sidenav';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { User } from 'src/app/models/user';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { AnnouncementBarResponse } from 'src/app/models/AnnouncementBarResponse';
import { FormControl } from '@angular/forms';
import { Subscription, debounceTime, distinctUntilChanged, firstValueFrom } from 'rxjs';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { CartItemResponse } from 'src/app/models/CartItemResponse';
import * as _ from 'lodash';
import { Title } from '@angular/platform-browser';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { SubscribePopupComponent } from 'src/app/site-themes/default_theme/subscribe-popup/subscribe-popup.component';
import { ForgotpasswordforstoreComponent } from '../../forgotpasswordforstore/forgotpasswordforstore.component';
import { SignupModalCheckoutComponent } from '../../signup-modal-checkout/signup-modal-checkout.component';

declare const google: any;

\1
  standalone: true,
  selector: 'app-header-theme-eighteen',
  templateUrl: './header-theme-eighteen.component.html',
  styleUrls: ['./header-theme-eighteen.component.css']
})
export class HeaderThemeEighteenComponent implements OnInit {

  @ViewChild('userprofiledrawer') userProfileDrawer!: MatDrawer;
  @ViewChild('userInfoMenuTrigger') userInfoMenuTrigger!: MatMenuTrigger;
  showalerttop: boolean = true;
  showNavbar: boolean = false;
  sidenavcategory: boolean = false;
  parentcategorylist: boolean = true
  selectedDiv: number = 1;
  @ViewChild('menu') menu!: ElementRef;
  isSticky: boolean = false;
  click_tab_text: any = '';
  showcategory: any = 'Rugs';
  @ViewChild('drawer') drawer!: MatDrawer;
  searchbox3: boolean = false;
  subdomain!: string;
  user: User = this.tokenStorage.getUser();
  form: any = {};
  menuExpanded = false;
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  awsURL = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  shoppingCart!: ShoppingCartResponse | null;
  message!: string;
  isLogo = false;
  logoImage: string = "../../../assets/img/themelogoplaceholder.svg";
  totalPrice: number = 0;
  @Input() announcementBar!: AnnouncementBarResponse;
  @Input() activeTheme!: string;
  @Input() categories!: CategoryResponse[];
  keyword = '';
  searchControl = new FormControl('');
  from = 0;
  size = 20;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  products: ProductResponse[] = [];
  closed = false;
  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;
  wishlists: WishListResponse[] = [];
  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;
  selectedCat!: CategoryResponse;
  isMenuOpened = false;
  isCardOpen: boolean[] = [];
  selectedCategory!: CategoryResponse;
  hidepassword: boolean = true;
  CategoryExceed: boolean = true;
  theme3ExploreCat: boolean = false;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  businessAddresses: Address[] = [];
  private cartSubscription: Subscription | undefined;
  private favSubscription: Subscription | undefined;
  reload: boolean = false;
  sessionResponse!: SessionResponse;
  private userDataSubscription!: Subscription;
  isRememberMe = false;
  isHeaderFixed = false;
  sessionUser: string = '';
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  currencySymbol = this.tokenStorage.getCurrency()?.symbol;
  iframeReady = false;
  @Input() footObject:any;
  @Input() socialLinks: any;
  contactCountry : string = "";
  contactPhone : string = "";
  contactEmail : string = "";
  businessContacts : any[] = [];
  storeName = this.tokenStorage.getBStoreName();

  languages = [
    { code: 'af', name: 'Afrikaans' },
    { code: 'sq', name: 'Albanian' },
    { code: 'am', name: 'Amharic' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hy', name: 'Armenian' },
    { code: 'az', name: 'Azerbaijani' },
    { code: 'eu', name: 'Basque' },
    { code: 'be', name: 'Belarusian' },
    { code: 'bn', name: 'Bengali' },
    { code: 'bs', name: 'Bosnian' },
    { code: 'bg', name: 'Bulgarian' },
    { code: 'ca', name: 'Catalan' },
    { code: 'ceb', name: 'Cebuano' },
    { code: 'zh-CN', name: 'Chinese (Simplified)' },
    { code: 'zh-TW', name: 'Chinese (Traditional)' },
    { code: 'co', name: 'Corsican' },
    { code: 'hr', name: 'Croatian' },
    { code: 'cs', name: 'Czech' },
    { code: 'da', name: 'Danish' },
    { code: 'nl', name: 'Dutch' },
    { code: 'en', name: 'English' },
    { code: 'eo', name: 'Esperanto' },
    { code: 'et', name: 'Estonian' },
    { code: 'fi', name: 'Finnish' },
    { code: 'fr', name: 'French' },
    { code: 'fy', name: 'Frisian' },
    { code: 'gl', name: 'Galician' },
    { code: 'ka', name: 'Georgian' },
    { code: 'de', name: 'German' },
    { code: 'el', name: 'Greek' },
    { code: 'gu', name: 'Gujarati' },
    { code: 'ht', name: 'Haitian Creole' },
    { code: 'ha', name: 'Hausa' },
    { code: 'haw', name: 'Hawaiian' },
    { code: 'he', name: 'Hebrew' },
    { code: 'hi', name: 'Hindi' },
    { code: 'hmn', name: 'Hmong' },
    { code: 'hu', name: 'Hungarian' },
    { code: 'is', name: 'Icelandic' },
    { code: 'ig', name: 'Igbo' },
    { code: 'id', name: 'Indonesian' },
    { code: 'ga', name: 'Irish' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'jv', name: 'Javanese' },
    { code: 'kn', name: 'Kannada' },
    { code: 'kk', name: 'Kazakh' },
    { code: 'km', name: 'Khmer' },
    { code: 'rw', name: 'Kinyarwanda' },
    { code: 'ko', name: 'Korean' },
    { code: 'ku', name: 'Kurdish' },
    { code: 'ky', name: 'Kyrgyz' },
    { code: 'lo', name: 'Lao' },
    { code: 'la', name: 'Latin' },
    { code: 'lv', name: 'Latvian' },
    { code: 'lt', name: 'Lithuanian' },
    { code: 'lb', name: 'Luxembourgish' },
    { code: 'mk', name: 'Macedonian' },
    { code: 'mg', name: 'Malagasy' },
    { code: 'ms', name: 'Malay' },
    { code: 'ml', name: 'Malayalam' },
    { code: 'mt', name: 'Maltese' },
    { code: 'mi', name: 'Maori' },
    { code: 'mr', name: 'Marathi' },
    { code: 'mn', name: 'Mongolian' },
    { code: 'my', name: 'Myanmar (Burmese)' },
    { code: 'ne', name: 'Nepali' },
    { code: 'no', name: 'Norwegian' },
    { code: 'ny', name: 'Nyanja (Chichewa)' },
    { code: 'or', name: 'Odia (Oriya)' },
    { code: 'ps', name: 'Pashto' },
    { code: 'fa', name: 'Persian' },
    { code: 'pl', name: 'Polish' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'pa', name: 'Punjabi' },
    { code: 'ro', name: 'Romanian' },
    { code: 'ru', name: 'Russian' },
    { code: 'sm', name: 'Samoan' },
    { code: 'gd', name: 'Scots Gaelic' },
    { code: 'sr', name: 'Serbian' },
    { code: 'st', name: 'Sesotho' },
    { code: 'sn', name: 'Shona' },
    { code: 'sd', name: 'Sindhi' },
    { code: 'si', name: 'Sinhala' },
    { code: 'sk', name: 'Slovak' },
    { code: 'sl', name: 'Slovenian' },
    { code: 'so', name: 'Somali' },
    { code: 'es', name: 'Spanish' },
    { code: 'su', name: 'Sundanese' },
    { code: 'sw', name: 'Swahili' },
    { code: 'sv', name: 'Swedish' },
    { code: 'tl', name: 'Tagalog (Filipino)' },
    { code: 'tg', name: 'Tajik' },
    { code: 'ta', name: 'Tamil' },
    { code: 'tt', name: 'Tatar' },
    { code: 'te', name: 'Telugu' },
    { code: 'th', name: 'Thai' },
    { code: 'tr', name: 'Turkish' },
    { code: 'tk', name: 'Turkmen' },
    { code: 'uk', name: 'Ukrainian' },
    { code: 'ur', name: 'Urdu' },
    { code: 'ug', name: 'Uyghur' },
    { code: 'uz', name: 'Uzbek' },
    { code: 'vi', name: 'Vietnamese' },
    { code: 'cy', name: 'Welsh' },
    { code: 'xh', name: 'Xhosa' },
    { code: 'yi', name: 'Yiddish' },
    { code: 'yo', name: 'Yoruba' },
    { code: 'zu', name: 'Zulu' },
  ];




  constructor(public dialog: MatDialog,
    private businessSettings: BusinessSettingService,
    private drawerControlService: DrawerControlService,
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private translate: TranslateService,
    private shoppingCartService: ShoppingCartService,
    private businessSetting: BusinessSettingService,
    private dataService: DataService,
    private router: Router,
    private wishlistService: WhishlistService,
    private guestShoppingCartService: GuestShoppingCartService,
    public translateSiteService: TranslateSiteService,
    private guestFavoriteService: GuestFavoriteService,
    public translateSite: TranslateSiteService,
    private titleService: Title,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private sharedService: SharedService,
  ) {
    let subdomainForSite;
    if(environment.env !== 'local'){
      subdomainForSite = window.location.hostname;
    } else {
      subdomainForSite = this.route.snapshot.params['subdomain'];
    }
    if (subdomainForSite) {
      this.translateSite.setSiteLanguage(subdomainForSite);
    }
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }

  }


  toggleMenu() {
    setTimeout(() => {
      this.menuExpanded = !this.menuExpanded;
    }, 0);
  }

  @HostListener('window:click', ['$event'])
  listenToOutsideClick(event: PointerEvent) {
    const target = event.target as HTMLElement;
    const isToggler = target.getAttribute('id') === 'navbarDropdown'
    if (!this.menuExpanded || isToggler) {
      return;
    }

    this.menuExpanded = false;
  };


  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getUpdatedUserData();
    const businessURL = await this.tokenStorage.getBusinessURL();
    if (this.subdomain && !businessURL) {
      await this.tokenStorage.saveBusinessData(this.subdomain, this.subdomain);
      this.loadUserData();
    } else {
      this.loadUserData();
    }
    this.isRememberMe = this.tokenStorage.getRememberMe();
    this.sharedService.refreshShoppingCart$.subscribe(() => {
      this.shoppingCart = null;
    });
    this.dataService.count$.subscribe(count => {
      this.wishlists.length = this.wishlists?.length + count;
    });
    this.dataService.notifyObservable$.subscribe(notify => {
      if(notify.refresh){
        this.loadCartAndFav();
      }
    })
    // await this.loadUserData();
    this.titleService.setTitle(this.storeName ?? 'Fazeal Ecommerce Store');
    this.getStoreLogo();
    this.searchControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged()
      )
      .subscribe((searchQuery) => {
        this.keyword = searchQuery!;
        this.products = [];
        if (searchQuery && searchQuery.trim().length > 0 && this.keyword.length >= 2) {
          this.searchProductsByCategoryAndBrand(this.keyword);
        }
      });

      this.checkTranslateWidget();
    this.drawerControlService.openDrawer$.subscribe(() => {
      this.userProfileDrawer.open();
    });
    this.drawerControlService.openDropdown$.subscribe(() => {
      if (this.userInfoMenuTrigger) {
        this.userInfoMenuTrigger.openMenu();
      }
    });

    this.listBusinessAddresses();
    this.getContactInfo();


  }


    ngOnChanges(changes: SimpleChanges): void {
  if (changes['categories'] && changes['categories'].currentValue) {
  this.getStoreCategories();
  }
  }


  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        console.log(this.businessAddresses,"checking business adddress")
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        if(this.businessAddresses?.length > 0){
        }
      }
    });
   }




  waitForIframeToLoad(): void {
    const maxRetries = 10; // Maximum retries to avoid infinite loop
    let attempts = 0;

    const checkInterval = setInterval(() => {
      const iframe = document.querySelector('iframe.goog-te-menu-frame') as HTMLIFrameElement;

      if (iframe && iframe.contentDocument) {
        clearInterval(checkInterval); // Stop checking
        this.iframeReady = true;
        console.log('Google Translate iframe is ready!');
      } else {
        attempts++;
        if (attempts >= maxRetries) {
          clearInterval(checkInterval); // Stop checking after max retries
          console.error('Google Translate iframe not loaded after maximum retries.');
        }
      }
    }, 500); // Check every 500ms
  }

  checkTranslateWidget(): void {
    const translateElement = document.getElementById('google_translate_element');
    if (!translateElement) {
      console.error('Google Translate widget not loaded.');
    } else {
      console.log('Google Translate widget is ready.');
    }
  }


  changeLanguage(langCode: string): void {
    let storeKey;
    if (environment.env !== 'local') {
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }
    localStorage.setItem('selectedLang'+`_${storeKey}`, langCode);
    this.translateSite.loadGoogleTranslate(langCode);

    const googleTranslateDropdown = document.querySelector(
      '.goog-te-combo'
    ) as HTMLSelectElement;

    if (!googleTranslateDropdown) {
      console.error('Google Translate dropdown not found.');
      return;
    }
    googleTranslateDropdown.value = langCode;
    googleTranslateDropdown.dispatchEvent(new Event('change'));
    console.log(`Language changed to: ${langCode}`);
  }

  checkingCategoriesMobile(): void {
    if (window.innerWidth < 768) {
      this.CategoryExceed = true
    } else {
      this.CategoryExceed = false
    }
  }

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data?.id || data?.firstName){
        this.user = data;
        if(this.user && this.user?.id){
          this.user.profile = data?.profile;
          this.isLoggedIn = true;
        } else {
          this.isLoggedIn = false;
        }
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  async loadUserData() {
    // this.businessId = Number(this.tokenStorage.getBusinessID());
    setTimeout(() => {
      const businessId = Number(this.tokenStorage.getBusinessID());
      if (this.user && this.user?.id) {
        this.user = this.tokenStorage.getUser();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = this.user?.id;
        this.sessionResponse.userType = this.user?.userType;
        this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
        this.loadCartAndFav();
        this.getStoreCategories();
        this.isLoggedIn = true;
      } else {
        this.stoeSession.getUserIpAddress().then(async ip => {
          console.log('getUserIpAddress ====== ', ip);
          (await this.stoeSession.setUserSession(ip, businessId)).subscribe(async data => {
            this.sessionResponse = data.data.setUserSession;
            await this.cookieDate.setCookie(businessId.toString(), JSON.stringify(this.sessionResponse), 1);
            this.loadCartAndFav();
            this.getStoreCategories();
          });
        });
        this.isLoggedIn = false;
      }
    }, 500);
    // this.loadCartAndFav();
  }

  private loadSubscribeAfterMerge() {
    const modalValue = sessionStorage.getItem('check_subscribe');
    const modal = modalValue ? JSON.parse(modalValue) : false;
    if (modal) {
      this.loadSubscribeModal('FOURTH');
      sessionStorage.removeItem('check_subscribe');
    }
  }

  async loadCartAndFav() {
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType !== "GENERIC") {
      await this.getShoppingCartItems();
      await this.getUserCartItems();
      await this.getWhishlist();
    }
    if (this.reload) {
      this.reload = false;
      this.guestShoppingCartService.emptyCart()
      // window.location.reload();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
        this.getWishListItems();
      }
    }
    this.loadSubscribeAfterMerge();

    if(this.sessionResponse.userType !== "GENERIC"){
      this.refreshAddToCart();
    }

    this.refreshAddToWishList();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.isLogo = false;
          return;
        }
        this.isLogo = true;
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }


  getStoreCategories() {
    console.log(this.categories,"header categories")
    this.categories.forEach(category => this.isShowLikeDiv.push(false));
    if (this.categories.length > 2) {
      if(window.innerWidth > 992) {
        this.CategoryExceed = true;
      }
      else {
        this.CategoryExceed = true;
      }

    }
    else if (window.innerWidth < 992) {
      this.CategoryExceed = true;
    }

    else {
      this.CategoryExceed = false;
    }
    // this.catalogService.findAllCategoryBySiteUrl(this.subdomain).subscribe(
    //   data => {
    //     this.categories = data.data.findAllCategoryBySiteUrl;

    //   }
    // );
  }

  async getUserCartItems() {
    let newPSItems: { id: number | null, skuId: number | null, quantity: number }[] = [];
    const guestList = this.guestShoppingCartService.getCartItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    if (guestList) {
      guestList.cartItemResponseList.forEach((guestCartItem: CartItemResponse) => {
        let foundSku: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.skuId === guestCartItem.skuId);
        let foundProduct: CartItemResponse | undefined = this.shoppingCart?.cartItemResponseList.find(oldCartItem => oldCartItem.productId === guestCartItem.productId && !oldCartItem.skuId);
        if (foundSku) {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        } else if (foundProduct) {
          newPSItems.push({ id: foundProduct.id, skuId: null, quantity: guestCartItem.cacheQuantity })
        } else {
          newPSItems.push({ id: guestCartItem.id, skuId: guestCartItem.skuId, quantity: guestCartItem.cacheQuantity })
        }
      })
    }
    if (newPSItems.length > 0) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      const r = await firstValueFrom(this.shoppingCartService.updateCartItem((Number(this.tokenStorage.getBusinessID())), newPSItems))
      if (r.errors) return;
      this.shoppingCart = r.data.updateCartItem
      // TO-DO left discount & promotion
      if (r.errors) return
      // this.router.navigate([`/${this.subdomain}`]);
      this.guestShoppingCartService.emptyCart()
      this.updateShoppingTotal();
    } else {
      if(this.sessionResponse.userType !== "GENERIC"){
        this.listShoppingCart();
      }
    }
  }

  private async listShoppingCart() {
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data.errors) return;
        this.shoppingCart = data.data.listUserCartItems;
        this.updateShoppingTotal();
      }
    );
  }

  private updateShoppingTotal() {
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  searchProductsByCategoryAndBrand(query: string) {
    this.catalogService.searchProductsByAllFiltersForSlpByBusiness(query, this.businessId, this.from, this.size, [], [], null,null,null,
      this.field, this.order
    ).subscribe(
      data => {
        if (data?.data?.slpSearch?.products) {
          this.products = data?.data?.slpSearch?.products;
        }
      }
    )
  }

  onSearchClickn() {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  optionSelection(event: any) {
    if (!event.isUserInput) return;
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.keyword = event.source.value;
    const queryParams = { searchTerm: this.keyword };
    this.router.navigate([`/${this.subdomain}/s`], { queryParams });
    if (this.autocompleteTrigger) {
      this.autocompleteTrigger.closePanel();
      this.keyword = '';
    }
  }

  onEnterKeyPress(event: any) {

    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (this.keyword.trim() === '') {
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    if  (event.keyCode === 13 || event.key === 'Enter') {
      const queryParams = { searchTerm: this.keyword };
      this.router.navigate([`/${this.subdomain}/s`], { queryParams });
      if (this.autocompleteTrigger) {
        this.autocompleteTrigger.closePanel();
        this.keyword = '';
      }
    }

  }

  isShow: boolean = true

  //hiding info box
  isShowLikeDiv: boolean[] = [];
  isShowAllDiv: boolean = false;


  //onclick toggling both
  toggleLikes(index: any) {
    if (this.isShowLikeDiv[index] == true) {
      this.isShowLikeDiv[index] = false;
    } else {
      this.isShowLikeDiv = [];
      this.categories.forEach(category => this.isShowLikeDiv.push(false));
      this.isShowAllDiv = false;
      this.isShowLikeDiv[index] = true;
    }
  }

  toggleAllDev() {
    this.isShowAllDiv = !this.isShowAllDiv;
  }

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('USERNAME_ERROR') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

  async onSubmit(type: string, loginType: string) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if (loginType == 'FAZEAL') {
      const { username, password } = this.form;
      if (!this.validateUsername(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "SOCIAL", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.username = data.username
      this.user.id = data.id
      this.user.userType = 'FAZEAL_REGISTERED';
      this.user.profile = data.profile
      this.user.coverPhoto = data.cover
      this.user.email = data.email
      this.user.isSubscribed = false;
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;

      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveUser(this.user, true);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'FAZEAL_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'FAZEAL_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);

      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');

      this.sharedService.triggerReload();
      console.log(this.tokenStorage.getBusinessID()!)
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        const currentRoute = `/${segments[1]}/checkout`;
        const navigationExtras: NavigationExtras = {
          skipLocationChange: true
        };
        this.router.navigateByUrl(currentRoute, navigationExtras);
        this.sharedService.triggerReload();
      }
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.loadSubscribeModal(type);

      this.unsubscibe()
      await this.loadCartAndFav()
      this.authService.notifyLogoutLoginDetector(this.user)
    } else {
      const { username, password } = this.form;
      if (!this.validateEmail(username)) {
        return;
      }
      const loginData = await this.authService.login(username, password, "STORE", Number(this.tokenStorage.getBusinessID()), this.isRememberMe).toPromise().then(response => response).catch(e => e);
      const data = loginData?.data?.authenticateUser;
      if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
        this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
        this.isLoginFailed = true;
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.errorMessage }
        });
        return
      } else if (!data) {
        this.errorMessage = this.translate.instant('SIGNIN_LOGINFAILED')
        this.isLoginFailed = true;
        return
      }
      this.authService.setLoggedIn();
      this.user = new User();
      this.user.firstName = data.firstName
      this.user.lastName = data.lastName
      this.user.phone = data.phoneNumber
      this.user.id = data.id
      this.user.email = data.email
      this.user.userType = 'STORE_REGISTERED';
      this.user.phone = data.phone;
      this.user.addressList = data.addressList;
      this.user.paymentDetails = data.paymentDetails;
      this.user.accessToken = data.accessToken;
      this.user.refreshToken = data.refreshToken;
      this.user.profile = data.profile;
      this.user.countryCode = data.countryCode;
      this.user.emailVerified = data.emailVerified;
      this.isLoggedIn = true;
      this.isLoginFailed = false;
      this.cookieDate.deleteUserCookie('user');
      this.cookieDate.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
      this.tokenStorage.saveToken(data.accessToken);
      this.tokenStorage.saveRefreshToken(data.refreshToken);
      this.tokenStorage.saveRememberMe(this.isRememberMe);
      this.tokenStorage.saveUser(this.user, this.isRememberMe);
      const guestId = this.sessionResponse.id;
      await this.stoeSession.getUserIpAddress().then(async ip => {
        console.log('getUserIpAddress ====== ', ip);
        (await this.stoeSession.setLoggedUserSession(ip, Number(this.tokenStorage.getBusinessID()), this.sessionResponse.id, 'STORE_REGISTERED')).subscribe(async data => {
        });
      });
      this.sessionResponse.id = this.user.id;
      this.sessionResponse.userType = 'STORE_REGISTERED';
      this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
      this.sharedService.setUserData(this.user);
      sessionStorage.removeItem('guestInfo');
      this.sharedService.triggerReload();
      this.sessionUser = this.cookieDate.getUserCookie('user');
      this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!)!);
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, guestId, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data?.data?.cartMerge) {
            this.loadSubscribeModal(type);
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.unsubscibe()
            await this.loadCartAndFav()
            return;
          }
        });
      if (this.router.url.includes('order-details')) {
        this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      }
      this.authService.notifyLogoutLoginDetector(this.user)
      this.unsubscibe()
      await this.loadCartAndFav()
    }
  }

  public toggleRememberMe(): void {
    this.isRememberMe = !this.isRememberMe;
    this.tokenStorage.saveRememberMe(this.isRememberMe);
  }

  private loadSubscribeModal(type: string) {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data.data.getCustomer == null) {
          setTimeout(() => {
            this.openloginmodal(type);
          }, 3000);
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  async getShoppingCartItems() {
    const data = await firstValueFrom(await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID())))
    if (data?.errors) return;
    this.shoppingCart = data?.data?.listUserCartItems;
    this.totalPrice = 0;
    if (this.shoppingCart?.cartItemResponseList)
      this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
        if (cartItem.salePrice) {
          this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
        } else {
          this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
        }
      });
  }

  async getWhishlist() {
    let added = false;
    const res = await firstValueFrom(await this.wishlistService.getCustomerWishList())
    if (res?.errors) return
    this.wishlists = res?.data?.getCustomerWishList;
    this.wishlists = this.wishlists?.filter(whishItem => whishItem.businessId == this.businessId);

    let gfl: any[] = this.guestFavoriteService.getFavoriteItemsByBusinessId(Number(this.tokenStorage.getBusinessID()))
    gfl.forEach(async i => {
      const piwl = this.wishlists.find(wl => wl.businessId === i.businessId && wl.id === i.id)
      if (!piwl) {
        const addRes = await firstValueFrom(await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), i.id))
        this.guestFavoriteService.removeFromFavorite(i.id)
        if (addRes.errors) return
        this.wishlists = [...this.wishlists, ...gfl]
        added = true;
      }
    })
    if (added) {
      this.reload = true;
      sessionStorage.setItem('check_subscribe', JSON.stringify(true))
      this.dialog.open(SucessmsgPopupComponent,
        {
          backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'FAV_LIST_UPDATED' }
        });
    }
  }




  async removeItemFromCart(itemId: any, cartId: any, item: any) {
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if (data?.data?.removeItemFromCart) {
          this.dataService.setReflectCartItems(true);
          this.dataService.notifyRemoveItem(itemId);
          this.shoppingCart?.cartItemResponseList.forEach(item => {
            if (item.id == itemId) {
              const index = this.shoppingCart?.cartItemResponseList.indexOf(item);
              this.shoppingCart?.cartItemResponseList.splice(index!, 1);
            }
          });
          this.shoppingCart = data?.data?.removeItemFromCart?.data;
          if(this.shoppingCart?.cartItemResponseList?.length == 0){
            this.shoppingCart = null!;
          }
        }

      }
    );
  }

  async logout() {
    const token = this.tokenStorage.getRefreshToken();
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(this.sessionResponse.userType === 'STORE_REGISTERED'){
        this.isLoggedIn = false;
        this.user.profile = '';
        this.shoppingCart = null;
        this.authService.notifyLogoutLoginDetector(undefined);
        this.tokenStorage.signOut();
        this.sessionResponse = new SessionResponse();
        this.sessionResponse.id = null!;
        this.sessionResponse.userType = 'GENERIC';
        this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
        this.cookieDate.deleteUserCookie('user');
        this.sessionUser = '';
        this.sharedService.setCookiesUserData();
        this.sharedService.triggerReload();
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        const lastSegment = segments[segments.length - 1];
        if (lastSegment === 'checkout') {
          this.router.navigate([`${segments[1]}/-guest`]);
        }
        this.unsubscibe()
        await this.loadCartAndFav()
        this.router.navigate(['/' + this.subdomain + '/home']);
        this.user = new User();
        this.wishlists = [];
        this.user.id = null!;
        this.user.profile = '';
        this.user.firstName = '';
        this.user.lastName = '';
        this.sharedService.setUserData(this.user);
        this.form = {};
        this.ngOnInit();
    } else {
      this.isLoggedIn = false;
      this.user.profile = '';
      this.shoppingCart = null;
      this.authService.notifyLogoutLoginDetector(undefined);
      this.tokenStorage.signOut();
      this.sessionResponse = new SessionResponse();
      this.sessionResponse.id = null!;
      this.sessionResponse.userType = 'GENERIC';
      this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
      this.cookieDate.deleteUserCookie('user');
      this.sessionUser = '';
      this.sharedService.setCookiesUserData();
      this.sharedService.triggerReload();
      const currentUrl = this.router.url;
      const segments = currentUrl.split('/');
      const lastSegment = segments[segments.length - 1];
      if (lastSegment === 'checkout') {
        this.router.navigate([`${segments[1]}/-guest`]);
      }
      this.unsubscibe()
      await this.loadCartAndFav()
      this.router.navigate(['/' + this.subdomain + '/home']);
      this.user = new User();
      this.wishlists = [];
      this.user.id = null!;
      this.user.profile = '';
      this.user.firstName = '';
      this.user.lastName = '';
      this.sharedService.setUserData(this.user);
      this.form = {};
      this.ngOnInit();
    }

  }

  unsubscibe() {
    this.cartSubscription?.unsubscribe();
    this.favSubscription?.unsubscribe();
  }

  refreshAddToCart() {
    this.dataService.notifyObservable$.subscribe(async res => {
      if (res.refresh) {
        (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
          data => {
            if (data.data.listUserCartItems) {
              this.shoppingCart = data.data.listUserCartItems;
              this.totalPrice = 0;
              this.shoppingCart?.cartItemResponseList.forEach(cartItem => {
                if (cartItem.salePrice) {
                  this.totalPrice = this.totalPrice + (cartItem.salePrice * cartItem.quantity);
                } else {
                  this.totalPrice = this.totalPrice + (cartItem.price * cartItem.quantity);
                }
              })
            } else {
             this.shoppingCart = null;
              this.totalPrice = 0;
            }

          }
        );
      }
    });
  }

  refreshAddToWishList() {
    this.dataService.notifyObservable$.subscribe(res => {
      if (res.refresh) {
        if (this.tokenStorage.getUser()) {
          this.getWishListItems();
        }
      }
    });
  }

  private async getWishListItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      res => {
        if (res?.data?.getCustomerWishList) {
          this.wishlists = res?.data?.getCustomerWishList;
          this.wishlists = this.wishlists.filter(whishItem => whishItem.businessId == this.businessId);
        }
      }
    );
  }

  toggleNavbar() {
    this.showNavbar = !this.showNavbar;
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('custom-menu-panel');
    }
  }

  onMenuClosed() {
    // const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    // if (menuPanel) {
    //   menuPanel.classList.remove('custom-menu-panel');
    // }
  }

  stopClosing(event: any, isClose: boolean) {
    if (isClose) {
      event.stopPropagation();
    }
  }


  onMenuOpenedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('category_menu_parent_panel');
    }
  }

  onMenuClosedCategory() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('category_menu_parent_panel');
    }
  }

  public openloginmodal(type: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'thanks-login';
    dialogConfig.data = type;
    const dialogRef = this.dialog.open(SubscribePopupComponent, dialogConfig);
  }

  toggleSidenavCategory() {
    this.sidenavcategory = !this.sidenavcategory;
    this.parentcategorylist = true
  }

  onSidenavOpened() {
    this.parentcategorylist = true;
    // this.renderer.addClass(document.body, 'mat-drawer-open');
  }
  onSidenavClosed() {
    this.parentcategorylist = true;
    // this.renderer.removeClass(document.body, 'mat-drawer-open');

  }

  changetab(category: CategoryResponse) {
    this.parentcategorylist = false;
    this.selectedCat = category;
    console.log(category,"current category")
  }

  changetabrouter(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.drawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  changetabrouter2(category: CategoryResponse) {
    console.log(category,"current category")
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    setTimeout(() => {
      this.categorydrawer.toggle();
      this.router.navigate([`/${this.subdomain}/category/${category.url}/${category.id}`]);
    }, 1000);
  }

  private closeCardTimeout: any;
  toggleCard(index: number, category: CategoryResponse) {
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }

  toggleCard3(index: number, category: CategoryResponse) {
    this.theme3ExploreCat = false;
    this.selectedCategory = category;
    this.isCardOpen[index] = true;
    if (this.closeCardTimeout) {
      clearTimeout(this.closeCardTimeout);
    }
    for (let i = 0; i < this.isCardOpen.length; i++) {
      if (i !== index) {
        this.isCardOpen[i] = false;
      }
    }
  }


  closeCardWithDelay(index: number) {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }

  closeCardWithDelayNew(index: number): void {
    this.theme3ExploreCat = false;
    this.closeCardTimeout = setTimeout(() => {
      this.isCardOpen[index] = false;
    }, 100);
  }


  closeAllCards(): void {
    for (let i = 1; i <= 15; i++) {
      this.closeCardWithDelayNew(i);
    }
  }

  setSelectedCat(category: CategoryResponse) {

    this.selectedCategory = category;
  }


  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent, { panelClass: 'modal-medium-width' });
  }

  forgotPasswordforStore() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordforstoreComponent, { panelClass: 'modal-medium-width' });
  }

  openCreateAccount() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }


  @ViewChild('searchdrawer') searchDrawer!: MatSidenav;
  toggleSearchDrawer() {
    this.searchDrawer.toggle();
  }

  @ViewChild('categorydrawer') categorydrawer!: MatSidenav;
  toggleCategoryDrawer() {
    this.categorydrawer.toggle();
  }

  @HostListener('window:scroll', [])
  onWindowScroll() {
    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

    if (scrollPosition > 100) {
      this.isHeaderFixed = true;
    } else {
      this.isHeaderFixed = false;
    }
  }


  searchtoggle3() {
    this.searchbox3 = !this.searchbox3;
  }

  opentheme3cat(){
    this.theme3ExploreCat = !this.theme3ExploreCat ;
  }

  getContactInfo(){
    this.businessSetting.getBusinessDetailsById(this.businessId).subscribe(data => {
      if(data?.data?.getBusinessDetailsById){
        this.contactCountry =  data?.data?.getBusinessDetailsById?.country;
        this.contactPhone = data?.data?.getBusinessDetailsById?.contactNo;
        this.contactEmail = data?.data?.getBusinessDetailsById?.email;
        this.businessContacts = data?.data?.getBusinessDetailsById?.businessContacts;
      }
    });
  }


}




--- ./site-themes/four-theme/four-new-product-listing-page/four-new-product-listing-page.component.ts
+++ ./site-themes/four-theme/four-new-product-listing-page/four-new-product-listing-page.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { PlpResponse } from 'src/app/models/PlpResponse';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-new-product-listing-page',
  templateUrl: './four-new-product-listing-page.component.html',
  styleUrls: ['./four-new-product-listing-page.component.scss']
})
export class FourNewProductListingPageComponent implements OnInit {
  plpResponse!: PlpResponse;
  loading: boolean = true;
  private routeSub!: Subscription;
  subdomain: string = '';
  skeletonArray = new Array(9);

  constructor(
    private route: ActivatedRoute,
    private themeService: ThemeService,
    private tokenStorage: TokenStorageService,
    private router: Router,
    ) { }

    async ngOnInit() {
      if(environment.env !== 'local'){
        this.subdomain = window.location.hostname;
      } else {
        this.subdomain = this.route.snapshot.params['subdomain'];
      }
      this.routeSub = this.route.params.subscribe(async routeParam => {
        const businessURL = await this.tokenStorage.getBusinessURL();
        if (this.subdomain && !businessURL) {
          this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
        }
        await this.loadPlp(this.subdomain, routeParam['id']);
      });
    }

  loadPlp(siteUrl: string, id: number){
    if (id)
      this.themeService.getBusinessProductListingPageContentBySiteUrl(siteUrl, id).subscribe(
        data => {
          if (data?.data?.getBusinessProductListingPageContentBySiteUrl) {
            this.plpResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
          }
        }
      );
  }

  ngOnDestroy() {
    if (this.routeSub) {
      this.routeSub.unsubscribe();
    }
  }

}

--- ./site-themes/four-theme/four-new-product-listing-page/four-breadcrums/four-breadcrums.component.ts
+++ ./site-themes/four-theme/four-new-product-listing-page/four-breadcrums/four-breadcrums.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { CategoryPath } from 'src/app/models/CategoryPath';

\1
  standalone: true,
  selector: 'app-four-breadcrums',
  templateUrl: './four-breadcrums.component.html',
  styleUrls: ['./four-breadcrums.component.scss']
})
export class FourBreadcrumsComponent implements OnInit {
    @Input() data:any;
    @Input() product:any;
    // @Input() activeTheme:string=''
    @Input() categoryPath: CategoryPath[] = [];
    subdomain = '';
    hideL2 = false;
    hideL3 = false;
  constructor(private route: ActivatedRoute) { }

  ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    if(this.product && this.product.categoryL1 && this.product.categoryL1.id == this.data.categoryDTO.id){
      this.hideL2 = true;
      this.hideL3 = true;
    }
    if(this.product && this.product.categoryL2 && this.product.categoryL2.id == this.data.categoryDTO.id){
      this.hideL3 = true;
    }
  }

}

--- ./site-themes/four-theme/four-new-product-listing-page/four-content-area/four-content-area.component.ts
+++ ./site-themes/four-theme/four-new-product-listing-page/four-content-area/four-content-area.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';
import { environment } from 'src/environments/environment';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { BrandResponse } from 'src/app/models/BrandResponse';
import { ActivatedRoute, Router } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { firstValueFrom } from 'rxjs';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { DataService } from 'src/app/service/data.service';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { PageEvent } from '@angular/material/paginator';
import { PdpQuickViewComponent } from '../../pdp-quick-view/pdp-quick-view.component';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';

\1
  standalone: true,
  selector: 'app-four-content-area',
  templateUrl: './four-content-area.component.html',
  styleUrls: ['./four-content-area.component.scss']
})
export class FourContentAreaComponent implements OnInit, OnChanges {
  @Input() data: any
  isShowList: boolean = false;
  awsUrl = environment.awsKey;
  categories: CategoryResponse[] = [];
  brands: BrandResponse[] = [];
  products: ProductResponse[] = [];
  subdomain = '';
  currency = this.tokenStorage.getCurrency()?.symbol;
  gta: any = null;
  lte: any = null;
  attributes: AttributeResponse[] = [];
  attributeName: string = '';
  attributeValueName = '';
  from = 0;
  size = 12;
  category!: CategoryResponse;
  rating!: number|null;
  selectedbrands: string[] = [];
  businessId = Number(this.tokenStorage.getBusinessID()!);
  productLoaded = false;
  queryParams: string[] = []
  rangeValues: number[] = [];
  selectedAttributeValue: string[] = [];
  tempSelectedBrands: string[] = [];
  firstTime: boolean = true;
  userWishlists: WishListResponse[] = [];
  visibleBrands: any[] = [];
  maxVisibleBrands: number = 6;
  currentPage: number = 0;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  totalPages!: number;
  totalPagesArray!: number[];
  totalResponses!: number;
  view: string = 'grid';
  isLoading: boolean = false;
  allproductsLoaded: boolean = false;
  plpSearchData: any;
  minPrice: any;
  maxPrice: any;
  avgRating!: number;
  options: Options = {
    floor: 0,
    ceil: 100
  };
  @ViewChild('slider', { static: false }) sliderElement!: ElementRef;
  totalCounts!: number;
  min: number|any;
  max: number|any;
  attrValue: string[] = [];
  selectedBrands: string[] = [];
  filtersOnMobile: boolean = true;
  pageEvent!: PageEvent;
  sessionResponse!: SessionResponse;
  isFirstResponse: boolean = true;
  currentUrl!: string;
  firstGta: any;
  firstLta: any;
  brandsNames: string[] = [];
  skeletonArray = new Array(9);


  constructor(
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private tokenStorage: TokenStorageService,
    private router: Router,
    private wishlistService: WhishlistService,
    public dialog: MatDialog,
    private dataService: DataService,
    private cdr: ChangeDetectorRef,private cookieDate: CookieDataServiceService
  ) {
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }
  }

  async ngOnInit() {
    this.isLoading = true;
    this.currentUrl = this.router.url;
    this.products = [];
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    await Promise.all([this.loadCategories(), this.loadProducts()]);
    this.readQueryParams();
    this.checkingFiltersHide();
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  private async loadProducts() {
    this.allproductsLoaded = false;
    const queryParamsExist = Object.keys(this.route.snapshot.queryParams).length > 0;
    if (queryParamsExist) {
      await this.searchProductsByFilters();
    } else {
      if (!this.field || this.field != 'PRICE' && this.field != 'REVIEWS') {
        this.field = 'PRICE'
      }
      this.selectedbrands = [];
    }
    this.allproductsLoaded = true;
}


  readQueryParams() {
    const queryParams = this.route.snapshot.queryParams;
    if (queryParams['rating']) {
      this.rating = Number(queryParams['rating']);
    }
    if (queryParams['brands']) {
      this.selectedbrands = queryParams['brands'].split(',');
      this.brands.forEach(brand => {
        brand.checked = this.selectedbrands.includes(brand.name);
      });
    }
    this.gta = queryParams['start'] ? Number(queryParams['start']) : null;
    this.lte = queryParams['end'] ? Number(queryParams['end']) : null;
    this.rangeValues = [this.gta, this.lte];

    if (queryParams['variants']) {
      this.selectedAttributeValue = queryParams['variants'].split(',');
    }
  }

  async loadCategories() {
    const data = await firstValueFrom(this.catalogService.findAllCategoryBySiteUrl(this.subdomain));
    if (data?.data?.findAllCategoryBySiteUrl) {
      this.categories = data?.data?.findAllCategoryBySiteUrl;
    }
  }

  loadAttributes() {
    this.category = this.data?.categoryDTO;
    this.catalogService.listAttributesByCategory(this.businessId, this.category.name).subscribe(
      data => {
        if (data?.data?.listAttributesForPlp) {
          this.attributes = data?.data?.listAttributesForPlp;
          console.log(this.attributes,"checking colors")
        }
      }
    );
  }

  handlePageEvent(event: PageEvent) {
    this.currentPage = event.pageIndex;
    this.size = event.pageSize;
    this.from = this.currentPage * this.size;
    this.searchProductsByFilters();
  }

  getCurrentRange(): string {
    const start = this.from + 1;
    const end = Math.min(this.from + this.size, this.totalResponses);
    return `${start}-${end}`;
  }

  onPageSizeChange() {
    this.allproductsLoaded = false;
    this.from = 0;
    this.products = [];
    this.searchProductsByFilters();
    this.cdr.detectChanges();
}

  sort(field: string, order: string) {
    this.field = field;
    this.order = order;
    this.searchProductsByFilters();
    this.cdr.detectChanges();
  }

  updateOptions() {
    this.options = {
      floor: this.gta,
      ceil: this.lte
    };
  }

  nextPage() {
    this.currentPage++;
    this.sort(this.field, this.order);
  }

  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.sort(this.field, this.order);
    }
  }

  goToPage(page: number) {
    this.currentPage = page;
    this.sort(this.field, this.order);
  }

  async ngOnChanges(changes: SimpleChanges) {
    if (changes['data'] && this.currentUrl !== this.router.url) {
      this.currentUrl = this.router.url;
      this.subdomain = this.route.snapshot.params['subdomain'];
      if (this.subdomain !== this.tokenStorage.getBusinessURL()?.split('/')[0]) {
        await this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
        this.businessId = Number(this.tokenStorage.getBusinessID());
      }
      this.loadAttributes();
      this.resetFilters();
      await this.searchProductsByFilters();
    }
  }

  private resetFilters() {
    this.rating = null;
    this.min = null;
    this.max = null;
    this.attrValue = [];
    this.selectedBrands = [];
    this.selectedbrands = [];
    this.gta = null;
    this.lte = null;
    this.rangeValues = [];
    this.selectedAttributeValue = [];
    localStorage.removeItem('filter-attrs');
  }

  updateSliderFromInput() {
    const queryParams: any = { ...this.route.snapshot.queryParams };
    queryParams.start = this.gta;
    queryParams.end = this.lte;
    this.router.navigate([], {
      relativeTo: this.route,
      queryParams: queryParams,
      queryParamsHandling: 'merge',
    });

    if (this.firstTime) {
      this.firstTime = false
      this.rangeValues = [this.gta, this.lte];
    }
  }

  onSliderChange() {
    this.gta = this.rangeValues[0]
    this.lte = this.rangeValues[1]
    this.updateFromToInQueryParam();
  }

  private updateFromToInQueryParam() {
    if (!this.firstTime) {
      const queryParams: any = { ...this.route.snapshot.queryParams };

      queryParams.start = this.gta;
      queryParams.end = this.lte;

      this.router.navigate([], {
        relativeTo: this.route,
        queryParams: queryParams,
        queryParamsHandling: 'merge',
      });
    }
    if (this.firstTime) this.firstTime = false;
  }


  searchProductsByFilters() {
    this.isLoading = true;
    this.catalogService.filterProductsOnPLP(
      this.businessId, this.category.name, this.from, this.size, this.field, this.order,
      this.rating ? this.rating : null, this.min ? this.min : null, this.max ? this.max : null, this.selectedBrands, this.attrValue
    ).subscribe(data => {
      if (data?.errors) return;
      if (data?.data?.plpSearch) {
        const uniqueProductIds = new Set(this.products?.map(product => product.id));
        this.products = [
          ...this.products?.filter(product => !uniqueProductIds.has(product.id)),
          ...data?.data?.plpSearch?.products
        ];

        if (this.products.length > 0) this.totalResponses = data?.data?.plpSearch?.totalCount;
        this.totalPages = Math.ceil(this.products[0]?.totalResponses / this.size);
        this.totalPagesArray = Array.from({ length: this.totalPages }, (_, i) => i + 1);

        this.plpSearchData = data?.data?.plpSearch;
        this.avgRating = this.plpSearchData?.avgRating;
        this.brandsNames = this.plpSearchData?.brandNames;

        this.updateVisibleBrands();

        if (this.isFirstResponse) {
          this.gta = this.plpSearchData?.minPrice;
          this.lte = this.plpSearchData?.maxPrice;
          this.firstGta = this.plpSearchData?.minPrice;
          this.firstLta = this.plpSearchData?.maxPrice;
          this.updateOptions();
          this.isFirstResponse = false;
          this.cdr.detectChanges();
        }

        this.minPrice = this.plpSearchData?.minPrice;
        this.maxPrice = this.plpSearchData?.maxPrice;
        this.totalCounts = this.plpSearchData?.totalCount;
        this.cdr.detectChanges();

        if (this.sessionResponse?.userType !== "GENERIC" || this.sessionResponse?.userType !== undefined) {
          this.setFavItems();
        }
      }

      this.isLoading = false;
      this.allproductsLoaded = true;
    });
  }

  updateVisibleBrands() {
    this.visibleBrands = this.brandsNames.slice(0, this.maxVisibleBrands);
  }

  showMoreBrandFilters() {
    this.maxVisibleBrands += 6;
    this.updateVisibleBrands();
  }


  setselectedBrands(value: string, event: any){
    if(event.checked){
      this.selectedBrands.push(value);
    }else{
      this.selectedBrands= this.selectedBrands?.filter(brand => brand != value);
    }
    this.searchProductsByFilters();
    this.cdr.detectChanges();
  }

  isSelected(brandName: string) {
    return this.selectedBrands.includes(brandName);
  }

  clearSelectedBrands() {
    this.selectedBrands = [];
    this.searchProductsByFilters();
  }

  setPriceValue(min: number, max: number){
    this.min = min;
    this.max = max;
    this.searchProductsByFilters();
  }

  clearPriceValue(){
    this.gta = this.firstGta;
    this.lte = this.firstLta;
    this.min = null;
    this.max = null;
    this.isFirstResponse = true;
    this.searchProductsByFilters();
  }

  setAttrValue(value: string){
    if(this.attrValue?.includes(value)){
      this.attrValue = this.attrValue?.filter(val => val != value);
    }else{
      this.attrValue.push(value);
    }
    localStorage.removeItem('filter-attrs');
    this.searchProductsByFilters();
  }

  clearAttrValue(){
    this.attrValue = [];
    localStorage.removeItem('filter-attrs');
    this.searchProductsByFilters();
  }

  async setFavItems() {
      (await this.wishlistService.getCustomerWishList()).subscribe(
        data => {
          this.userWishlists = data?.data?.getCustomerWishList;
          this.products?.forEach(product => {
            if (this.userWishlists?.map(fav => fav.itemId)?.includes(product.id)) {
              product.addedToWishlist = true;
            }
          })
        }
      );
  }

  async addItemToFovarite(product: ProductResponse) {
    (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
      data => {
        if (data?.data?.addItemToWishList != null) {
          product.addedToWishlist = true;
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
          this.dataService.notifyOther({ refresh: true });
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
  }

  async removeItemFromFovarite(product: ProductResponse) {
    (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
      data => {
        if (data?.data?.removeItemFromWishList != null) {
          product.addedToWishlist = false;
          this.dataService.reset();
          this.dataService.changeCount(-1);
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
  }

  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
}

  toggleView(view: string) {
    if (view === 'grid') {
      this.view = 'grid'
    } else if (view === 'list') {
      this.view = 'list'
    }
  }


  checkingFiltersHide(): void {
    if (window.innerWidth < 992) {
      this.filtersOnMobile = false
    } else {
      this.filtersOnMobile = true
    }
  }

  toggleFiltersMobile(){
    this.filtersOnMobile = !this.filtersOnMobile;
  }

}

--- ./site-themes/four-theme/four-new-product-listing-page/four-releated-products/four-releated-products.component.ts
+++ ./site-themes/four-theme/four-new-product-listing-page/four-releated-products/four-releated-products.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit ,SimpleChanges} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { PlpResponse } from 'src/app/models/PlpResponse';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import { environment } from 'src/environments/environment';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../../pdp-quick-view/pdp-quick-view.component';
import { PdpContent } from 'src/app/models/PdpContent';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { DataService } from 'src/app/service/data.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';

\1
  standalone: true,
  selector: 'app-four-releated-products',
  templateUrl: './four-releated-products.component.html',
  styleUrls: ['./four-releated-products.component.scss']
})
export class FourReleatedProductsComponent implements OnInit {
  @Input() data:any
  @Input() categoryId:any
  themeName: string = 'FourthTheme';
  awsUrl = environment.awsKey;
  currency = this.tokenStorage.getCurrency().symbol;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  sliderStyle:string = 'DOTS';
  arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
  arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';
  @Input() pageType!:string;
  plpResponse!: PlpResponse;
  loading: boolean = true;
  errorMessage:string='';
  subdomain = '';
  productResponse: any = {
    relatedProductsEnabled: false,
    relatedProducts : [],
};
pdpContent!: PdpContent;
productPdpResponse: any = {
  relatedProductsEnabled: false,
  relatedProducts: [],
};
userWishlists: WishListResponse[] = [];
sessionResponse!: SessionResponse;
  id: any;
  AlwaysShow: boolean = true;

  constructor(
    private route: ActivatedRoute,
    private themeService: ThemeService,
    private tokenStorage: TokenStorageService,
    private router: Router,private wishlistService: WhishlistService,private dataService: DataService,
    public dialog: MatDialog,private cookieDate: CookieDataServiceService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }
    async ngOnInit() {
      if(environment.env !== 'local'){
        this.subdomain = window.location.hostname;
      } else {
        this.subdomain = this.route.snapshot.params['subdomain'];
      }
      this.route.params.subscribe(async routeParam => {
        const businessURL = await this.tokenStorage.getBusinessURL();
        if (this.subdomain && !businessURL) {
          this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
        }
        const currentUrl = this.router.url;
        if (currentUrl.includes('product')) {
          this.id = this.categoryId;
        } else {
          this.id = routeParam['id']
        }
        await this.loadPlp(this.subdomain, this.id);
        this.getPdpContent(this.subdomain);
      });
      this.getThemeName();
    }

  customOptions: OwlOptions = {
    loop: true,
    margin: 20,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 2
      },
      400: {
        items: 2
      },
      740: {
        items: 3
      },
      940: {
        items: 4
      }
    },
  }

  loadPlp(siteUrl: string, id: number){
    if (id)
      this.themeService.getBusinessProductListingPageContentBySiteUrl(siteUrl, id).subscribe(
        data => {
          if (data?.data?.getBusinessProductListingPageContentBySiteUrl) {
            this.plpResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
            this.productResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
             if(this.sessionResponse?.userType !== "GENERIC" || this.sessionResponse?.userType !== undefined){
              this.setFavItems();
            }
          }
        }
      );
  }

  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
}




  private handleDataError(errors: any[]) {
    if (errors && errors[0] && errors[0]?.errorMessage) {
      this.errorMessage = errors[0]?.errorMessage;
    } else {
      this.errorMessage = "An unknown error occurred.";
    }
  }


  getPdpContent(siteUrl: string) {
    this.themeService.getPdpContentBySiteUrl(siteUrl)
      .subscribe(
        ({ data, errors }) => {
          if (!data || !data.getPdpContent) {
            this.handleDataError(errors)
          }
          if (data && data?.getPdpContentBySiteUrl) {
            this.pdpContent = data?.getPdpContentBySiteUrl;
            this.productPdpResponse = data?.getPdpContentBySiteUrl;
             if(this.sessionResponse?.userType !== "GENERIC" || this.sessionResponse?.userType !== undefined){
              this.setFavItems();
            }
          }
        }
      );
  }

  async setFavItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      data => {
        this.userWishlists = data?.data?.getCustomerWishList;
        this.productResponse?.relatedProducts?.forEach((product: any) => {
          if (this.userWishlists?.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        })
        this.productPdpResponse?.relatedProducts?.forEach((product: any) => {
          if (this.userWishlists.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        })
      }
    );
  }

  async addItemToFovarite(product: ProductResponse) {
  (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
    data => {
      if (data?.data?.addItemToWishList != null) {
        product.addedToWishlist = true;
        this.dataService.reset();
        this.dataService.changeCount(1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
        this.dataService.notifyOther({ refresh: true });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }

  async removeItemFromFovarite(product: ProductResponse) {
  (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
    data => {
      if (data?.data?.removeItemFromWishList != null) {
        product.addedToWishlist = false;
        this.dataService.reset();
        this.dataService.changeCount(-1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }



}

--- ./site-themes/four-theme/four-new-product-listing-page/four-footer-banner/four-footer-banner.component.ts
+++ ./site-themes/four-theme/four-new-product-listing-page/four-footer-banner/four-footer-banner.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';

\1
  standalone: true,
  selector: 'app-four-footer-banner',
  templateUrl: './four-footer-banner.component.html',
  styleUrls: ['./four-footer-banner.component.scss']
})
export class FourFooterBannerComponent implements OnInit {
  @Input() data:any
  @Input() activeTheme:string=''
  constructor() { }

  ngOnInit() {
  }

}

--- ./site-themes/four-theme/four-new-product-listing-page/four-best-selling-products/four-best-selling-products.component.ts
+++ ./site-themes/four-theme/four-new-product-listing-page/four-best-selling-products/four-best-selling-products.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { PlpResponse } from 'src/app/models/PlpResponse';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import { environment } from 'src/environments/environment';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../../pdp-quick-view/pdp-quick-view.component';
import { PdpContent } from 'src/app/models/PdpContent';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';

\1
  standalone: true,
  selector: 'app-four-best-selling-products',
  templateUrl: './four-best-selling-products.component.html',
  styleUrls: ['./four-best-selling-products.component.scss']
})
export class FourBestSellingProductsComponent implements OnInit {
  @Input() data:any
  @Input() categoryId:any
  themeName: string = 'FourthTheme';
  awsUrl = environment.awsKey;
  currency = this.tokenStorage.getCurrency().symbol;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  @Input() pageType!:string;

  plpResponse!: PlpResponse;
  loading: boolean = true;
  errorMessage:string='';
  subdomain = '';
  productResponse: any = {
    bestsellerProductsEnabled: false,
    bestSellerProducts: [],

};
  pdpContent!: PdpContent;
  productPdpResponse: any = {
    bestsellerProductsEnabled: false,
    bestSellerProducts: [],
  };

sliderStyle:string = 'DOTS';
arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';
userWishlists: WishListResponse[] = [];
sessionResponse!: SessionResponse;
AlwaysShow: boolean = true;
  id: any;



  customOptions: OwlOptions = {
    loop: false,
    margin: 20,
    nav: true,
    dots: true,
    navSpeed: 700,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`, `<img src="${this.arrowright}" alt="RIGHT">`],
    responsive: {
      0: {
        items: 2
      },
      400: {
        items: 2
      },
      740: {
        items: 3
      },
      940: {
        items: 4
      }
    },
  }






  constructor(
    private route: ActivatedRoute,
    private themeService: ThemeService,
    private tokenStorage: TokenStorageService,
    private router: Router,private wishlistService: WhishlistService,private dataService: DataService,
    public dialog: MatDialog,private cookieDate: CookieDataServiceService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }
    async ngOnInit() {
      if(environment.env !== 'local'){
        this.subdomain = window.location.hostname;
      } else {
        this.subdomain = this.route.snapshot.params['subdomain'];
      }
      this.route.params.subscribe(async routeParam => {
        const businessURL = await this.tokenStorage.getBusinessURL();
        if (this.subdomain && !businessURL) {
          this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
        }
        const currentUrl = this.router.url;
        if (currentUrl.includes('product')) {
          this.id = this.categoryId;
        } else {
          this.id = routeParam['id']
        }
        await this.loadPlp(this.subdomain, this.id);
        this.getPdpContent(this.subdomain)
      });
      this.getThemeName();
    }




  loadPlp(siteUrl: string, id: number){
    if(id)
      this.themeService.getBusinessProductListingPageContentBySiteUrl(siteUrl, id).subscribe(
        data => {
          if(data?.data?.getBusinessProductListingPageContentBySiteUrl){
            this.plpResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
            this.productResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
            console.log(this.productResponse,"checking plp best selling")
             if(this.sessionResponse?.userType !== "GENERIC" || this.sessionResponse?.userType !== undefined){
              this.setFavItems();
            }
          }
        }
      );
  }


  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
}

  private handleDataError(errors: any[]) {
    if (errors && errors[0] && errors[0]?.errorMessage) {
      this.errorMessage = errors[0]?.errorMessage;
    } else {
      this.errorMessage = "An unknown error occurred.";
    }
  }

  getPdpContent(siteUrl: string) {
    this.themeService.getPdpContentBySiteUrl(siteUrl)
      .subscribe(
        ({ data, errors }) => {
          if (!data || !data?.getPdpContentBySiteUrl) {
            this.handleDataError(errors);
          }
          if (data && data?.getPdpContentBySiteUrl) {
            this.pdpContent = data?.getPdpContentBySiteUrl;
            this.productPdpResponse = data?.getPdpContentBySiteUrl;
             if(this.sessionResponse?.userType !== "GENERIC" || this.sessionResponse?.userType !== undefined){
              this.setFavItems();
            }
          }
        }
      );
  }

  async setFavItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      data => {
        this.userWishlists = data?.data?.getCustomerWishList;
        this.productResponse?.bestSellerProducts?.forEach((product: any) => {
          if (this.userWishlists?.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        })
        this.productPdpResponse?.bestSellerProducts?.forEach((product: any) => {
          if (this.userWishlists?.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        })
      }
    );
  }

  async addItemToFovarite(product: ProductResponse) {
  (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
    data => {
      if (data?.data?.addItemToWishList != null) {
        product.addedToWishlist = true;
        this.dataService.reset();
        this.dataService.changeCount(1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
        this.dataService.notifyOther({ refresh: true });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }

  async removeItemFromFovarite(product: ProductResponse) {
  (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
    data => {
      if (data?.data?.removeItemFromWishList != null) {
        product.addedToWishlist = false;
        this.dataService.reset();
        this.dataService.changeCount(-1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }


}

--- ./site-themes/four-theme/product-box-list/product-box-list.component.ts
+++ ./site-themes/four-theme/product-box-list/product-box-list.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, Input, OnInit } from '@angular/core';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ActivatedRoute, Router } from '@angular/router';
import { environment } from 'src/environments/environment';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../pdp-quick-view/pdp-quick-view.component';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { DataService } from 'src/app/service/data.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { TranslateService } from '@ngx-translate/core';
import { WishListResponse } from 'src/app/models/WishListResponse';

\1
  standalone: true,
  selector: 'app-product-box-list',
  templateUrl: './product-box-list.component.html',
  styleUrls: ['./product-box-list.component.css']
})
export class ProductBoxListComponent implements OnInit {

  @Input() attrValues!: string[];
  @Input() product: any;
  subdomain = '';
  awsUrl = environment.awsKey;
  businessId = Number(this.tokenStorage.getBusinessID());
  currency = this.tokenStorage.getCurrency()?.symbol;
  ratingValue : number = 0;
  @Input() activeTheme!: string;
  @Input() isQuickView!: boolean | undefined;
  firstTimeCalled = false;

  constructor(private catalogService: CatalogServiceService,
    private route: ActivatedRoute,private router: Router,
    private tokenStorage: TokenStorageService,
    public dialog: MatDialog, private wishlistService: WhishlistService,private dataService: DataService ) { }

  ngOnInit() {
    this.ratingValue = this.roundOffReview(this.product.averageReview);
    this.subdomain = this.route.snapshot.params['subdomain'];
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = '/'+this.subdomain;
    }
  }

  navigateTOProduct(){
    localStorage.setItem('filter-attrs', JSON.stringify(this.attrValues));
    if(environment.env !== 'local'){
      this.router.navigateByUrl('product/' +  this.product.url + '/' + this.product?.id || this.product?.productId);
    } else {
      this.router.navigateByUrl(this.subdomain, '/product/' + this.product.url + '/' + this.product?.id || this.product?.productId);
    }
  }

  // Validations Configurations & Null Pointers
  getProductName(): string {
    return this.product.name || this.product.productName;
  }
  getReviewCount(): number {
    return isNaN(this.product.reviewCount) || this.product.reviewCount === null ? 0 : this.product.reviewCount;
  }
  getReviewValidation() {
    if (isNaN(this.product.averageReview) || this.product.averageReview === null) {
      this.product.averageReview = 0;
    }
  }


  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain,
        attrValues: this.attrValues
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
  }


  async addItemToFovarite(product: ProductResponse) {
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
      data => {
        console.log(product, 'product')
        if (data.data.addItemToWishList != null) {
          console.log(product,"checking product data")
          console.log(data,"checking wishlist data")
          product.addedToWishlist = true;
          this.dataService.reset();
          this.dataService.changeCount(1);
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
          this.dataService.notifyOther({ refresh: true });
          this.firstTimeCalled = false;
        } else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data.errors[0].errorMessage }
          });
        }
      }
    );
    }

    async removeItemFromFovarite(product: ProductResponse) {
      this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
      data => {
        if (data.data.removeItemFromWishList != null) {
          product.addedToWishlist = false;
          this.dataService.reset();
          this.dataService.changeCount(-1);
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
          this.firstTimeCalled = false;
        } else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data.errors[0].errorMessage }
          });
        }
      }
    );
    }

    roundOffReview(review: number): number {
      return Math.round(review);
    }

}

--- ./site-themes/four-theme/four-theme-checkout/four-theme-checkout.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/four-theme-checkout.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { formatDate } from '@angular/common';
import { Component, ElementRef, Inject, OnInit, ViewChild, Renderer2 } from '@angular/core';
import { AbstractControl, FormBuilder, FormControl, FormGroup, NgForm, Validators } from '@angular/forms';
import { ThemePalette } from '@angular/material/core';
import { ActivatedRoute, Router, NavigationStart } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { CardResponse } from 'src/app/models/CardResponse';
import { OrderIdFormatResponse } from 'src/app/models/OrderIdFormatResponse';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { environment } from 'src/environments/environment';
import { StoreLocationModalComponent } from '../store-location-modal/store-location-modal.component';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { DeleteGuestContactInfoComponent } from '../delete-guest-contact-info/delete-guest-contact-info.component';
import { ShippingResponse } from 'src/app/models/ShippingResponse';
import { EstimateShippingResponse } from 'src/app/models/EstimateShippingResponse';
import { StripeServiceService } from 'src/app/service/stripe-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { PlaceOrderDto } from 'src/app/models/PlaceOrderDto';
import { Subject, Subscription, firstValueFrom, take} from 'rxjs';
import { AuthService } from 'src/app/service/auth.service';
import { User } from 'src/app/models/user';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';
import { SignupModalCheckoutComponent } from '../signup-modal-checkout/signup-modal-checkout.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { AddShippingAddressComponent } from './add-shipping-address/add-shipping-address.component';
import { AddCardPopupComponent } from './add-card-popup/add-card-popup.component';
import { PickOrderPersonPopupComponent } from './pick-order-person-popup/pick-order-person-popup.component';
import { AddBillingAddressPopupComponent } from './AddBillingAddressPopup/AddBillingAddressPopup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { StorehoursComponent } from './storehours/storehours.component';
import { EditShippingAddressComponent } from './edit-shipping-address/edit-shipping-address.component';
import { EditbillingaddresspopupComponent } from './editbillingaddresspopup/editbillingaddresspopup.component';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { DOCUMENT } from '@angular/common';
import { TranslateSiteService } from 'src/app/service/translate-site.service';




declare var Finix: any; // Declare Finix for TypeScript


export function creditCardType(cc: string) {
  let amex = new RegExp('^3[47][0-9]{13}$');
  let visa = new RegExp('^4[0-9]{12}(?:[0-9]{3})?$');
  let cup = new RegExp('^62[0-9]{14}$');
  let mastercard = new RegExp('^5[1-5][0-9]{14}$');
  let mastercard2 = new RegExp('^2[2-7][0-9]{14}$');
  let disco1 = new RegExp('^6011[0-9]{12}$');
  let disco2 = new RegExp('^64[4-9][0-9]{13}$');
  let disco3 = new RegExp('^65[0-9]{14}$');
  let diners = new RegExp('^3(?:0[0-5]|[68][0-9])[0-9]{11}$');
  let jcb = new RegExp('^35(?:2[89]|[3-8][0-9])[0-9]{12}$');
  let elo = new RegExp('^((636368)|(438935)|(504175)|(451416)|(509048)|(509067)|(509049)|(509069)|(509050)|(509074)|(509068)|(509040)|(509045)|(509060)|(509057)|(509042)|(509046)|(509066)|(509047)|(509062)|(509040)|(509043)|(509064)|(509040))\\d{10,12}$');

  if (visa.test(cc)) {
    return 'VISA';
  }
  if (amex.test(cc)) {
    return 'AMEX';
  }
  if (mastercard.test(cc) || mastercard2.test(cc)) {
    return 'MASTERCARD';
  }
  if (disco1.test(cc) || disco2.test(cc) || disco3.test(cc)) {
    return 'DISCOVER';
  }
  if (diners.test(cc)) {
    return 'DINERS';
  }
  if (jcb.test(cc)) {
    return 'JCB';
  }
  if (cup.test(cc)) {
    return 'CHINA_UNION_PAY';
  }
  if (elo.test(cc)) {
    return 'ELO';
  }
  return undefined;
}

\1
  standalone: true,
  selector: 'app-four-theme-checkout',
  templateUrl: './four-theme-checkout.component.html',
  styleUrls: ['./four-theme-checkout.component.scss'],
})
export class FourThemeCheckoutComponent implements OnInit {

  @ViewChild('cardElement') cardElement!: ElementRef;
  stripe: any;
  card: any;
  cardErrors!: string;
  isFinixPay: boolean = false;

  private routerSubscription!: Subscription;
  range = new FormGroup({
    start: new FormControl<Date | null>(null),
  });
  anotherform:boolean=false;
  paymentcard:boolean=false;
  paymenttypecard:boolean=false;
  paymenttypecardradiotwo:boolean=false;
  activeColumn: number = 2;
  activeMeAnother:string='me';
  activepayment:string='cashondelivery';
  cardpayment:string='visacard';
  shippingaddress:string='addnewaddress';
  activepaymentradiotwo:string='cashondeliveryradiotwo';
  cardpaymentradiotwo:string='visacardradiotwo';
  paymentcardradiotwo:boolean=false;
  paymenttypecardradiothree:boolean=false;
  hidenewpassword: boolean = true;
  paymentcardradiothree:boolean=false;
  cardpaymentradiothree:string='visacardradiothree';
  activepaymentradiothree:string='cashondeliveryradiothree';
  @ViewChild('menu') menu!: ElementRef;
  initializingPayment: boolean = false;

  shoppingCart!: ShoppingCartResponse;
  awsURL = environment.awsKey;
  subdomain!: string;
  showAddressInfo = false;
  showCreditInfo = false;
  orderType!: string;
  paymentMethod!: string;
  addressId!: number;
  message!: string;
  errorMessage!: string;
  businessAddresses: Address[] = [];
  showEmailform: boolean = true;
  paymentHandler: any = null;
  paymentToken!: string;
  cardForm!: FormGroup;
  orderIdFormat!: OrderIdFormatResponse;
  pickupPerson!: string;
  showPickupPerson = false;
  showPickupInfo = false;
  showPickupDate = false;
  pickupDetails!: FormGroup;
  isSubmitted = false;
  orderResponse!: OrderResponse;
  currencySymbol ='$';
  promocode! : string;
  promoCodeErrorMessage! : string;
  isFailed = false;
  isPromoExist: boolean = false;
  discountPrice! : number;
  promotionResponse! : any;
  totalPrice: number = 0;
  disabled = false;
  showSpinners = true;
  showSeconds = true;
  stepHour = 1;
  stepMinute = 1;
  stepSecond = 1;
  touchUi = true;
  enableMeridian = true;
  disableMinute = false;
  color:ThemePalette = 'accent';
  renderer: any;
  userCards: CardResponse[] = [];
  selectedCard!: CardResponse|null;
  cardType!: string;
  buttonDisabled = false;
  orderOnlinePickupFromStore = true;
  orderOnlineShipHome = true;
  reserveOnlineOrTryInStore = true;

  update_contact_info:boolean=false;
  list_contact_info:boolean=false;
  sameasshippingtwo:any="same as shipping";
  sameasshipping:any;
  searchText: string = '';
  phoneCode: number = 1;
  add_address_shipping:any=true;
  update_address_shipping:any=false;
  list_shipping_info:any=false;
  setaddress:any;
  selectedAddress!: any|null;
  businessID = Number(this.tokenStorage.getBusinessID());
  mapselect:boolean = false;
  shippingRates: ShippingResponse[] = [];
  shippingNotAvailable = false;
  selectedShippingRates!: ShippingResponse;
  totalShippingRate = 0;
  estimateShippingResponse: EstimateShippingResponse[] = [];
  address: string | undefined = '';
  latitude: number = 0;
  longitude: number = 0;
  zoom: number = 5;
  markerLatitude: number = 0;
  markerLongitude: number = 0;
  mapClickListener: any
  mappp: any
  addressForm!: FormGroup;
  countrytext:boolean=true;
  selectedcode:boolean=false;
  addAddress: boolean = false;
  businessPayments: string[] = [];
  isStripeEnabled = false;
  isFazealPayEnabled = false;
  isPayPalEnabled = false;
  sessionResponse!: SessionResponse;
  isPaid = false;
  paypalUrl!: string;
  user = this.tokenStorage.getUser();
  BillingAddressBox: boolean = false;
  userTypeShow: boolean = true;
  fzealUserTxt: string = '';
  fzealPassTxt: string = '';
  form: any = {};
  isLoggedIn = false;
  isLoginFailed = false;
  showPassword: boolean = false;
  isSubmittedBillingDetails = false;
  businessAddressesOn = false;
  reloadSubscription!: Subscription;
  enabledMultipleCheckouts: boolean = false;
  personDetails: any;
  paymentDetails: any;
  billingAddresses: any[] = [];
  shippingAddresses: any[] = [];
  addressNotSelected: boolean = false;
  billingAddress: any;
  agreeTermsAndConditions: boolean = false;
  isCODEnabled: boolean = false;
  storeUserTxt: string = '';
  storePassTxt: string = '';
  businessHours: any[] = [];
  allAddresses: any[] = [];
  shippingId!: number;
  filterDates = (date: Date | null): boolean => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return date ? date >= today : false;
  };
  allItemPromotionResponses: any[] = [];
  private destroy$ = new Subject<void>();
  loading: boolean = false;
  assetsAwsKey = environment.assetsAwsKey;
  placeOrderDone: boolean = false;
   logoImage: string = '';
  getOnBoardingForm: any;
  finixApplicationId: string = '';
  createdFinixIdentity: any;
  createdPaymentInstrument: any;
  createdAuthorization: any;
  captureAmount!: number;
  isFinixPayBox: boolean = false;
  isFinixFormActive: boolean = false
  finixSessionKey: string = '';
  checkoutAddressError: string = '';
  isCheckoutApiStarted: boolean = false;
  promotionExpanded: boolean = false;
   mode: string = '';
  @ViewChild('finixFormContainer', { static: false }) finixFormContainer!: ElementRef;
  isTimeCorrect: boolean = false;
  checkoutCartInProgress = false;
  isOrderIdNull: boolean = true;
  isSummarySpinner: boolean = false;
  checkOutEmail: string = '';
  checkOutUserTypeByEmail: string = '';
  isEmailInvalid: boolean = false;
  firstTimeCalled: boolean= false;
  isContinueGuest: boolean = false;
  checkOutTypePassword: string = '';
  @ViewChild('guestForm') guestForm!: NgForm;
  isShippingEnabled: boolean = false;
  matchedAddress = { addressLine1: '',
  addressLine2: '',
  city: '',
  state: '',
  country: '',
  zipCode: '',
  phoneNumber: '',
  email: '',
  firstName: '',
  lastName: ''};
  validateAddressMessages: any[] = [];
  validateAddressFailed: boolean = false;

  constructor(
    @Inject(DOCUMENT) private document: Document,
    private renderernew: Renderer2,
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private catalogService: CatalogServiceService,
    private route: ActivatedRoute,
    private promotionService : PromotionService,
    private router: Router,
    private addressService: AddressService,
    private translate: TranslateService,
    private fb: FormBuilder,
    private dataService: DataService,
    private businessSettings: BusinessSettingService,
    public dialog: MatDialog,
    private stripeService: StripeServiceService,
    private cookieService: CookieDataServiceService,
    private authService: AuthService,
    public translateSite: TranslateSiteService,
    private businessSettingService: BusinessSettingService,private sharedService: SharedService,
    )
    {
      let subdomainForSite;
          if(environment.env !== 'local'){
            subdomainForSite = window.location.hostname;
          } else {
            subdomainForSite = this.route.snapshot.params['subdomain'];
          }
          if (subdomainForSite) {
            this.translateSite.setSiteLanguage(subdomainForSite);
          }

      if(this.businessID &&  cookieService.getCookie(this.businessID!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieService.getCookie(this.businessID!.toString()));
      }

      if(!this.sessionResponse || this.sessionResponse?.userType !== 'GUEST'){
        if(!this.user || this.user === null){
          this.sessionResponse = new SessionResponse();
          this.sessionResponse.id = 1;
          this.sessionResponse.userType = 'GENERIC';
          this.cookieService.setCookie(this.businessID!.toString(), JSON.stringify(this.sessionResponse), 1);
          this.userTypeShow = true;
        }
      }
      if (this.sessionResponse?.userType === 'GUEST') {
        const guestAddress = this.getGuestAddress();
        if (guestAddress) {
          this.shippingAddresses = [guestAddress];
        }
      }
    }

   async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];

      // Add the class immediately (not inside setTimeout)
  this.renderernew.addClass(this.document.body, 'checkout-optimized');

  // Listen for route changes and remove the class
  this.routerSubscription = this.router.events.subscribe((event) => {
    if (event instanceof NavigationStart) {
      this.renderernew.removeClass(this.document.body, 'checkout-optimized');
    }
  });


     this.cardForm = this.fb.group({
       nameOnCard: ['', [Validators.required]],
       cardNumber: ['', [Validators.required]],
       expMonth: ['', [Validators.required]],
       expYear: ['', [Validators.required]],
       cvc: [''],
     });
     this.pickupDetails = this.fb.group({
       pickupDate: ['', [Validators.required]],
       pickupTime: ['', [Validators.required]],
     });
     if (environment.env !== 'local') {
       this.subdomain = window.location.hostname;
     } else {
       this.subdomain = this.route.snapshot.params['subdomain'];
     }
     this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
     this.orderType = 'ORDER_ONLINE_PICK_IN_STORE';
     this.paymentMethod = 'COD';
     this.pickupPerson = 'FAZEAL_CUSTOMER';
     this.isCheckoutApiStarted = true;
     this.reloadSubscription = this.sharedService
       .getReloadObservable()
       .subscribe(() => {
         this.loadUserType();
       });
     await this.loadUserType();
     await this.getStoreLogo();
     this.getCheckOutTypeById();
     this.isShipEngineEnabled();
     await this.getOnboardingFormLink();
     if (this.user && this.user?.userType === 'FAZEAL_REGISTERED') {
       this.loadAddresses(true);
     }
     if (this.user && this.user?.userType === 'STORE_REGISTERED') {
       this.loadAddresses(false);
     }
     this.personDetails = {
       firstName: this.user?.firstName,
       lastName: this.user?.lastName,
       email: this.user?.email,
       phoneNumber: this.user?.phone,
     };
     if (
       this.personDetails.phoneNumber === undefined ||
       this.personDetails.phoneNumber === 'null'
     ) {
       this.personDetails.phoneNumber = '';
     }
     if (this.sessionResponse?.userType !== 'GENERIC') {
       this.listUserCartItems();
     }
     this.getBusinessHoursOfOperation();
     this.getOrderIdFormatByBusinessId();
     this.listBusinessAddresses();
     this.initForm();
     this.getEnablePickInStoreAddressStatus();
     if (this.sessionResponse?.userType !== 'GENERIC') {
       this.refreshAddToCart();
     }
     setTimeout(() => {
       window.scrollTo({ top: 0, behavior: 'smooth' });
     }, 50);

   }

   private getGuestAddress(): any {
     const storageItem = localStorage.getItem('guest-address');
     if (!storageItem) return null;
     const storageData = JSON.parse(storageItem);
     const now = new Date().getTime();
     if (now > storageData.expirationTime) {
       localStorage.removeItem('guest-address');
       return null;
     }
     return storageData.data;
   }

   async getCheckoutUserTypeByEmail(){
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!this.checkOutEmail.trim() || !emailPattern.test(this.checkOutEmail.trim())) {
      this.isEmailInvalid = true;
      console.log(this.isEmailInvalid, 'this.isEmailInvalid')
      return;
    }
    console.log(this.isEmailInvalid, 'this.isEmailInvalid')
    this.isEmailInvalid = false;
    this.firstTimeCalled = true;
    (await this.shoppingCartService.getCheckoutUserTypeByEmail(this.checkOutEmail.trim())).subscribe(
      data => {
        console.log(data?.data?.getCheckoutUserTypeByEmail, 'data?.data?.getCheckoutUserTypeByEmail')
        if(data?.errors){
          this.firstTimeCalled = false;
          return;
        }
        if(data?.data?.getCheckoutUserTypeByEmail){
          this.firstTimeCalled = false;
          this.checkOutUserTypeByEmail = data?.data?.getCheckoutUserTypeByEmail;
          this.showEmailform = false;
        }
      }
    );
  }


    InitializingTokenNew() {
    setTimeout(() => {
      if (typeof Finix === 'undefined') {
          console.error('Finix SDK not loaded. Ensure it is included in index.html');
          this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.translate.instant('Finix SDK not loaded. Ensure it is included in index.html') }
        });
        return;
      }
    this.mode = environment.env === 'prod' ? 'live' : 'sandbox';
    try {
      const formElement = document.getElementById('finix-form');
      if (!formElement) {
        console.error('Finix form container not found');
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.translate.instant('Finix form container not found') }
        });
        return;
      }

      const FinixAuth = Finix.Auth(this.mode, this.getOnBoardingForm?.merchantId);
      const form = Finix.CardTokenForm('finix-form', {
        showAddress: true,
        onSubmit: () => {
          this.initializingPayment = true;
          form.submit(this.mode, this.finixApplicationId, (err: any, res: any) => {
            this.initializingPayment = false;
            if (err) {
              console.error('Error:', err);
              this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: err }
            });
            return;
            }
            const token = res?.data?.id;
            const sessionKey = FinixAuth.getSessionKey();
            this.finixSessionKey = sessionKey;
            this.createFinixIdentity(token);
          });
        }
      });
    } catch (error) {
      console.error('Finix initialization error:', error);
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'Finix initialization error:', message: error }
      });
      this.initializingPayment = false;
    }
  }, 100);
}


   ngOnDestroy(): void {
    this.reloadSubscription.unsubscribe();
    this.destroy$.next();
    this.destroy$.complete();

    // Prevent memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    // Also remove class if component is destroyed directly
    this.renderernew.removeClass(this.document.body, 'checkout-optimized');
  }


   getStoreLogo() {
    this.businessSettings.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

   async loadUserType(){
    this.sessionResponse = JSON.parse(this.cookieService.getCookie(this.tokenStorage.getBusinessID()!));
    if(this.sessionResponse.userType == 'GENERIC'){
      this.userTypeShow = true;
      return;
    }
    if(this.sessionResponse.userType == 'GUEST'){
      const guest = sessionStorage.getItem('guestInfo');
      if(guest){
        let guestInfo = JSON.parse(guest);
        this.user = new User();
        this.user.firstName= guestInfo.firstName;
        this.user.lastName= guestInfo.lastName;
        this.user.email= guestInfo.email;
        this.user.phone= guestInfo.phone;
        this.userTypeShow = false;
        return;
      } else {
        this.userTypeShow = true;
        return;
      }
    }
    if(this.sessionResponse.userType == 'STORE_REGISTERED' || this.sessionResponse.userType == 'FAZEAL_REGISTERED'){
      this.userTypeShow = false;
      return;
    } else {
      this.userTypeShow = true;
      return;
    }
   }

   loadStripeDta() {
    this.businessSettings.getBusinessPaymentMethodsForCustomerSide(this.businessID).subscribe(
      data => {
        console.log(data);
        this.businessPayments = data?.data?.getBusinessPaymentMethodsForCustomerSide;

        // Set payment method availability flags
        if (this.businessPayments.length > 0 && this.businessPayments.includes('FAZEAL_PAY')) {
          this.isFazealPayEnabled = true;
        }
        if (this.businessPayments.length > 0 && this.businessPayments.includes('PAYPAL')) {
          this.isPayPalEnabled = true;
        }
        if (this.businessPayments.length > 0 && this.businessPayments.includes('CASH_ON_DELIVERY')) {
          this.isCODEnabled = true;
        }

        if (this.businessPayments.length === 3) {
          this.activepayment = 'CASH_ON_DELIVERY';
          this.paymentMethod = 'COD';
        }
        else if (this.businessPayments.length === 2) {
          if (this.businessPayments.includes('FAZEAL_PAY') && this.businessPayments.includes('PAYPAL')) {
            this.activepayment = 'FAZEAL_PAY';
            this.paymentMethod = 'CREDIT_CARD';
          }
          else if (this.businessPayments.includes('CASH_ON_DELIVERY') && this.businessPayments.includes('PAYPAL')) {
            this.activepayment = 'CASH_ON_DELIVERY';
            this.paymentMethod = 'COD';
          }
          else if (this.businessPayments.includes('CASH_ON_DELIVERY') && this.businessPayments.includes('FAZEAL_PAY')) {
            this.activepayment = 'CASH_ON_DELIVERY';
            this.paymentMethod = 'COD';
          }
        }
        else if (this.businessPayments.length === 1) {
          if (this.businessPayments.includes('PAYPAL')) {
            this.activepayment = 'PAYPAL';
            this.paymentMethod = 'PAYPAL';
          }
          else if (this.businessPayments.includes('FAZEAL_PAY')) {
            this.activepayment = 'FAZEAL_PAY';
            this.paymentMethod = 'CREDIT_CARD';
          }
          else if (this.businessPayments.includes('CASH_ON_DELIVERY')) {
            this.activepayment = 'CASH_ON_DELIVERY';
            this.paymentMethod = 'COD';
          }
        }
        if (!this.activepayment && this.businessPayments.length > 0) {
          this.activepayment = this.businessPayments[0];
          if(this.activepayment == 'FAZEAL_PAY'){
            this.paymentMethod = 'CREDIT_CARD';
          }
          else if(this.activepayment == 'PAYPAL'){
            this.paymentMethod = 'PAYPAL';
          }
          else if(this.activepayment == 'CASH_ON_DELIVERY'){
            this.paymentMethod = 'COD';
          }
        }
      }
    );
  }


   setupStripe() {
    const elements = this.stripe.elements();
    this.card = elements?.create('card');
    this.card.mount(this.cardElement?.nativeElement);
    this.card.on('change', (event: any) => {
      this.cardErrors = event.error ? event.error.message : '';
    });
  }

   async listUserCartItems(){
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      async data => {
        if(data?.data?.listUserCartItems){
          this.shoppingCart = data?.data?.listUserCartItems;
          this.loadStripeDta();
          if(this.shippingId && this.shippingId !== null){
            this.getCheckoutCart(this.orderType, this.selectedAddress?.state, this.selectedAddress?.city, this.selectedAddress?.zipCode, this.shippingId,
              this.selectedAddress?.streetNumber + ' ' + this.selectedAddress?.addressLine1+ ', ' +
              this.selectedAddress?.state + ', '+ this.selectedAddress?.city + ' ' + this.selectedAddress?.zipCode + ', '+ this.selectedAddress?.country,
              this.selectedAddress?.longitude !== undefined ? this.selectedAddress.longitude : null,
              this.selectedAddress?.latitude !== undefined ? this.selectedAddress.latitude : null, []);
          } else {
            await this.getCheckoutCart(this.orderType, '','','',null!,'',null!,null!, []);
          }
        }
      }
    );
   }

 async getCheckoutCart(
  orderType: string,
  state: string,
  city: string,
  zipcode: string,
  shippingId: number,
  address: string,
  longitude: number,
  latitude: number,
  promoCodes: string[]
): Promise<void> {
  return new Promise(async (resolve) => {
  this.checkoutAddressError = '';
  if (this.checkoutCartInProgress) {
    resolve();
    return;
  }
  if (this.promocode && this.shoppingCart?.manualPromoCodes?.length > 0 && this.shoppingCart?.rejectedPromoCodes?.length == 0) {
    this.dialog.open(NotifacationMessageComponent, {
      backdropClass: 'notificationmodal-popup',
      width: '450px',
      data: { title: 'ERROR', message: this.translate.instant('Promocode has already been applied') }
    });
    this.isSummarySpinner = false;
    resolve();
    return;
  }
  this.checkoutCartInProgress = true;
  this.isSummarySpinner = true;
  try {
    (await this.shoppingCartService.getCheckoutCart(
      orderType, state, city, zipcode, shippingId, address, longitude, latitude, promoCodes
    )).subscribe({
      next: (data) => {
        this.checkoutCartInProgress = false;
        resolve();
        if (data?.errors) {
          if (data?.errors[0].errorCode === 'STATE_NOT_FOUND') {
            this.checkoutAddressError = data?.errors[0]?.errorMessage;
            this.isOrderIdNull = true;
          }
          if (data?.errors && data?.errors[0].errorCode !== 'STATE_NOT_FOUND') {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
            });
            this.isSummarySpinner = false;
            this.isOrderIdNull = true;
            return;
          }
        }
        if (data?.data?.getCheckoutCart) {
          this.shoppingCart = data?.data?.getCheckoutCart;
          this.isOrderIdNull = this.shoppingCart.orderId == null;
          if (this.shoppingCart?.rejectedPromoCodes?.length > 0 &&
              this.shoppingCart?.rejectedPromoCodes?.includes(this.promocode)) {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: this.translate.instant('PROMO_CODE_DIDNT_APPLIED_SUCCESS') }
            });
            this.isSummarySpinner = false;
            return;
          }
          if (this.promocode && !this.shoppingCart?.rejectedPromoCodes?.includes(this.promocode)) {
            this.dialog.open(SucessmsgPopupComponent, {
              backdropClass: 'notificationmodal-popup-sucess',
              data: {
                title: 'SUCCESS',
                message: this.translate.instant('PROMO_CODE_APPLIED_SUCCESS')
              }
            });
            this.loading = true;
            this.promotionExpanded = true;
            setTimeout(() => {
              this.loading = false;
            }, 1000);
          }

          this.allItemPromotionResponses = [];
          this.shoppingCart?.cartItemResponseList?.forEach(item => {
            item?.cartItemPromotionResponses?.forEach(prom => {
              this.allItemPromotionResponses.push(prom);
            });
          });
          this.promocode = '';
        }
        this.isSummarySpinner = false;
      },
      error: (err) => {
        this.checkoutCartInProgress = false;
        console.error('API Error:', err);
        this.isSummarySpinner = false;
        this.isOrderIdNull = true;
        resolve();
      }
    });
  } catch (error) {
    this.checkoutCartInProgress = false;
    console.error('Error in getCheckoutCart:', error);
    this.isSummarySpinner = false;
    resolve();
  }
})
}




   listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
        // if(this.businessAddresses?.length > 0){
        //   this.setActiveAddress(this.businessAddresses[0], 0);
        // }
      }
    });
   }

   getOrderIdFormatByBusinessId(){
    this.catalogService.getOrderIdFormatByBusinessId(Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if(data?.data?.getOrderIdFormatByBusinessId != null){
          this.orderIdFormat = data?.data?.getOrderIdFormatByBusinessId;
        }
      }
    );
   }

   async isShipEngineEnabled(){
    (await this.shoppingCartService.isShipEngineEnabled()).subscribe(
      data => {
        console.log(data?.data?.isShipEngineEnabled, 'data?.data?.isShipEngineEnabled')
        if(data?.data?.isShipEngineEnabled != null){
          this.isShippingEnabled = data?.data?.isShipEngineEnabled;
        }
      }
    );
   }

   async validateShipEngineAddress(shippingAddress: any): Promise<boolean> {
    this.validateAddressMessages = [];
    this.validateAddressFailed = false;

    try {
      const result = await (await this.shoppingCartService.validateShipEngineAddressForCst(
        shippingAddress.firstName.trim() + ' ' + shippingAddress.lastName.trim(),
        shippingAddress.phoneNumber,
        shippingAddress.addressLine1,
        shippingAddress.addressLine2,
        shippingAddress.city,
        shippingAddress.state,
        shippingAddress.zipCode,
        shippingAddress.country
      )).toPromise();

      console.log(result?.data?.validateShipEngineAddressForCst, 'data?.data?.validateShipEngineAddress');

      if (result?.errors) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: result?.errors[0]?.errorMessage }
        });
        this.validateAddressFailed = true;
        return false;
      }

      if (result?.data?.validateShipEngineAddressForCst[0].messages?.length > 0) {
        this.validateAddressMessages = result?.data?.validateShipEngineAddressForCst[0].messages;
      }

      const matchedAddress = result?.data?.validateShipEngineAddressForCst[0].matched_address;
      this.matchedAddress.addressLine1 = matchedAddress.address_line1;
      this.matchedAddress.addressLine2 = matchedAddress.address_line2;
      this.matchedAddress.city = matchedAddress.city_locality;
      this.matchedAddress.state = matchedAddress.state_province;
      this.matchedAddress.country = matchedAddress.country_code;
      this.matchedAddress.zipCode = matchedAddress.postal_code;
      this.matchedAddress.phoneNumber = matchedAddress.phone;
      this.matchedAddress.email = shippingAddress.email;
      this.matchedAddress.firstName = shippingAddress.firstName;
      this.matchedAddress.lastName = shippingAddress.lastName;

      this.dialog.open(SucessmsgPopupComponent, {
        backdropClass: 'notificationmodal-popup-sucess',
        data: { title: '', message: 'Address Validated Success' }
      });

      this.validateAddressFailed = false;
      return true;
    } catch (error) {
      console.error('Error validating address:', error);
      this.validateAddressFailed = true;
      return false;
    }
  }

   getBusinessHoursOfOperation(){
    this.businessSettings.getBusinessHoursOfOperation(Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if(data?.data?.getBusinessHoursOfOperation != null){
          this.businessHours = data?.data?.getBusinessHoursOfOperation;
        }
      }
    );
   }

   getCheckOutTypeById() {
    this.businessSettings.getCheckOutTypeById(Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if(data?.errors){
          return;
        }
        if (data?.data?.getCheckOutTypeById) {
          this.orderOnlinePickupFromStore = data?.data?.getCheckOutTypeById.orderOnlinePickupFromStore;
          this.orderOnlineShipHome = data?.data?.getCheckOutTypeById?.orderOnlineShipHome;
          this.reserveOnlineOrTryInStore = data?.data?.getCheckOutTypeById?.reserveOnlineOrTryInStore;

          // Check the number of available methods
          const availableMethods = [
            this.orderOnlinePickupFromStore,
            this.orderOnlineShipHome,
            this.reserveOnlineOrTryInStore
          ].filter(method => method).length;

          // Set orderType and active column based on availability
          if (availableMethods === 1) {
            if (this.orderOnlinePickupFromStore) {
              this.orderType = 'ORDER_ONLINE_PICK_IN_STORE';
          //    this.getCheckoutCart(this.orderType, '','','',null!,'',null!,null!, []);
              this.setActiveColumn(1);
            } else if (this.orderOnlineShipHome) {
              this.orderType = 'ORDER_ONLINE_SHIP_TO_HOME';
              this.setActiveColumn(2);
            } else if (this.reserveOnlineOrTryInStore) {
              this.orderType = 'RESERVE_ONLINE_TRY_IN_STORE';
          //      this.getCheckoutCart(this.orderType, '','','',null!,'',null!,null!, []);
              this.setActiveColumn(3);
            }
          } else if (availableMethods === 3) {
            // If all 3 methods are available, set active column to 3
            this.orderType = 'ORDER_ONLINE_SHIP_TO_HOME';
        //      this.getCheckoutCart(this.orderType, '','','',null!,'',null!,null!, []);
            this.setActiveColumn(2);
          } else {
            // If multiple but not all, apply the first true condition
            if (this.orderOnlinePickupFromStore && this.orderOnlineShipHome) {
              this.orderType = 'ORDER_ONLINE_SHIP_TO_HOME';
              this.setActiveColumn(2);
            }

            else if (this.orderOnlineShipHome && this.reserveOnlineOrTryInStore) {
              this.orderType = 'ORDER_ONLINE_SHIP_TO_HOME';
              this.setActiveColumn(2);
            }

             else if (this.orderOnlinePickupFromStore && this.reserveOnlineOrTryInStore) {
              this.orderType = 'ORDER_ONLINE_PICK_IN_STORE';
              this.setActiveColumn(1);
            }
          }
          this.isCheckoutApiStarted = false;
        }
      });
  }



  setActiveColumn(columnNumber: number) {
    this.activeColumn = columnNumber;
  }

  anotherstep(step:any,columnText: string, pickupPerson: string){
    this.anotherform = step;
    this.activeMeAnother = columnText;
    this.pickupPerson = pickupPerson;
  }

  paymentmethodcard(payment:any,columnText: string){
    this.paymentcard = payment;
    this.activepayment = columnText;
    if(columnText == 'CASH_ON_DELIVERY') {
      this.isFinixPayBox = false;
      this.BillingAddressBox = false;
      this.isFinixFormActive = false;
    }
    if(columnText == 'PAYPAL') {
      this.isFinixPayBox = false;
      this.BillingAddressBox = true;
      this.isFinixFormActive = false;
    }
    if(columnText == 'FAZEAL_PAY'){
      this.isFinixPay = true;
      this.isFinixPayBox = true;
      this.isFinixFormActive = true;
      this.InitializingTokenNew();
    }
  }

  paymentmethodcardRadioTwo(payment:any,columnText: string){
    this.paymentcardradiotwo = payment;
    this.activepaymentradiotwo = columnText;
  }

  paymentmethodcardRadioThree(payment:any,columnText: string){
    this.paymentcardradiothree = payment;
    this.activepaymentradiothree = columnText;
  }

  paymenttype(paymentcard:any,columnText: string, card: CardResponse|null){
    this.paymenttypecard = paymentcard;
    this.cardpayment = columnText;
    if(this.cardpayment == 'visacard'){
      this.selectedCard = card;
    }
  }


  shippingaddresstoggle(paymentcard:any,columnText: string){
    this.shippingaddress = columnText
  }

  onMenuOpened() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.add('countrycode-panel');
    }
  }
  onMenuClosed() {
    const menuPanel = this.menu.nativeElement.querySelector('.mat-menu-panel');
    if (menuPanel) {
      menuPanel.classList.remove('custom-menu-panel');
    }
  }

  get getControl(): { [key: string]: AbstractControl; } {
    return this.pickupDetails.controls;
  }

  get getCardControl(): { [key: string]: AbstractControl; } {
    return this.cardForm.controls;
  }

 async toggleAddressInfo(show: any, orderType: string) {
  this.loading = true;
  this.isCheckoutApiStarted = true;
  this.promocode = '';

  if (orderType === 'ORDER_ONLINE_PICK_IN_STORE') {
    this.showAddressInfo = false;
    this.showPickupInfo = true;
    this.showPickupDate = true;
    this.paymentMethod = 'COD';
    this.activepayment = this.businessPayments[0];
    this.paymentcard = false;
    this.pickupDetails.get('pickupDate')?.setValue(null);
    this.pickupDetails.get('pickupTime')?.setValue(null);
    await this.getCheckoutCart(orderType, '', '', '', null!, '', null!, null!, []);
    }
    else if(orderType == 'ORDER_ONLINE_SHIP_TO_HOME'){
      this.showAddressInfo = true;
      this.showPickupInfo = false;
      this.showPickupDate = false;
      // this.selectedAddress = null;
      this.paymentMethod = 'COD';
      this.activepayment = this.businessPayments[0];
      this.paymentcard = false;
      this.pickupDetails.get('pickupDate')?.setValue(null);
      this.pickupDetails.get('pickupTime')?.setValue(null);
      if(this.selectedAddress && this.selectedAddress !== null && this.selectedAddress !== undefined){
         await this.getCheckoutCart(orderType, this.selectedAddress?.state, this.selectedAddress?.city, this.selectedAddress?.zipCode, this.shippingId !== undefined ? this.shippingId : null!,
          this.selectedAddress?.streetNumber + ' ' + this.selectedAddress?.addressLine1+ ', ' +
          this.selectedAddress?.state + ', '+ this.selectedAddress?.city + ' ' + this.selectedAddress?.zipCode + ', '+ this.selectedAddress?.country,
          this.selectedAddress?.longitude !== undefined ? this.selectedAddress.longitude : null,
          this.selectedAddress?.latitude !== undefined ? this.selectedAddress.latitude : null, [])
      } else{
        this.getCheckoutCart(orderType, '','','',null!,'',null!,null!, []);
      }
    }else if(orderType == 'RESERVE_ONLINE_TRY_IN_STORE'){
      this.showAddressInfo = false;
      this.showPickupInfo = false;
      this.showPickupDate = true;
      this.paymentMethod = 'COD';
      this.activepayment = this.businessPayments[0];
      this.paymentcard = false;
      this.pickupDetails.get('pickupDate')?.setValue(null);
      this.pickupDetails.get('pickupTime')?.setValue(null);
      this.getCheckoutCart(orderType, '','','',null!,'',null!,null!, []);
      // if(this.businessAddresses.length > 0){
      //   this.setActiveAddress(this.businessAddresses[0], 0);
      // }
    }
    this.orderType = orderType;
    this.loadStripeDta();
    setTimeout(() => {
      this.loading = false;
      this.isCheckoutApiStarted = false;
      if(orderType === 'ORDER_ONLINE_PICK_IN_STORE'){
         if (!this.isOrderIdNull) {
           if (
             (!this.isCODEnabled && this.isFinixPay && this.isPayPalEnabled) ||
             (!this.isCODEnabled && this.isFinixPay && !this.isPayPalEnabled)
           ) {
             this.paymentmethodcard(true, 'FAZEAL_PAY');
             console.log('function initiated');
           }
         }
      }
    }, 500);
  }

  toggleCreditInfo(show: any, paymentMethod: string){
    this.showCreditInfo = show;
    this.paymentMethod = paymentMethod;
    if(this.paymentMethod == 'PAYPAL'){
      this.errorMessage = '';
      const address = this.billingAddress?.addressLine1;
      const firstName = this.personDetails?.firstName;
      const lastName = this.personDetails?.lastName;
      const email = this.personDetails?.email;
      if(this.personDetails?.phoneNumber === undefined || this.personDetails?.phoneNumber === 'null'){
        this.personDetails.phoneNumber = '';
      }
      const phoneNumber = this.personDetails?.phoneNumber;
      const country = this.billingAddress?.country ? this.billingAddress?.country : this.billingAddress?.shortName;
      const city = this.billingAddress?.city;
      const state = this.billingAddress?.state;
      const zipCode = this.billingAddress?.zipCode;
      let formattedDateTime;
      const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
      const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
      if (pickupDateValue && pickupTimeValue) {
        const [hours, minutes] = pickupTimeValue.split(':');
        const combinedDateTime = new Date(pickupDateValue);
        combinedDateTime.setHours(Number(hours), Number(minutes));
        const browserLocale = navigator.language || 'en-US';
        formattedDateTime = formatDate(combinedDateTime, 'yyyy-MM-ddTHH:mm:ss', browserLocale);
      }
      let tax = 0;
      let shipping = 0;
      let subTotal = 0;
      tax = this.shoppingCart.totalApplicableTaxes;
      shipping = this.shoppingCart.shippingCost;
      subTotal = this.shoppingCart.totalPrice - (tax + shipping);
      this.shoppingCartService.createPaymentIntent(this.sessionResponse.id, Number(this.tokenStorage.getBusinessID()!), this.sessionResponse.userType,
      'PAYPAL', firstName + ' '+lastName, email, address ? address : '', zipCode ? zipCode : '', city ? city : '', state ? state : '', country ? country : '',
      subTotal, tax, shipping).subscribe(data => {
        console.log(data)
        this.paypalUrl = data?.data?.createPaymentIntent?.paypalRedirectUrl;
        let placeOrderDto = new PlaceOrderDto();
        placeOrderDto.businessId = Number(this.tokenStorage.getBusinessID());
        placeOrderDto.cartId = this.shoppingCart.id;
        placeOrderDto.paymentType = this.paymentMethod;
        placeOrderDto.addressId = this.addressId;
        placeOrderDto.orderType = this.orderType;
        placeOrderDto.orderId = this.shoppingCart.orderId;
        placeOrderDto.pickupPerson = this.pickupPerson;
        placeOrderDto.pickupTime = formattedDateTime!;
        placeOrderDto.pickUpPersonDTO = {firstName: firstName, lastName: lastName, email: email, phoneNumber: phoneNumber};
        placeOrderDto.tax = this.shoppingCart.totalApplicableTaxes;
        placeOrderDto.surcharges = this.shoppingCart.totalSurchargesTaxes;
        this.tokenStorage.saveUserOrderInfo(placeOrderDto);

      })
    }else if(this.paymentMethod == 'PAYPAL' && !this.paypalUrl){
      this.errorMessage = 'PAYPAL Url not configured!';
      return;
    } else if(this.paymentMethod == 'COD'){
      this.billingAddress = null;
    }
  }

  saveBillingAddress(address: any){
    this.billingAddress = address;
    this.isSubmittedBillingDetails = true;
    if(this.paymentMethod == 'PAYPAL'){
      this.errorMessage = '';
      this.toggleCreditInfo(false, 'PAYPAL');
    }else if(this.paymentMethod == 'PAYPAL' && !this.paypalUrl){
      this.errorMessage = 'Paypal Url not configured!';
      return;
    }
  }

  toggleMe(pickupPerson: string){
    this.showPickupPerson = !this.showPickupPerson;
    this.personDetails.firstName = this.user?.firstName;
    this.personDetails.lastName = this.user?.lastName;
    this.personDetails.email = this.user?.email;
    if(this.user?.phone === undefined || this.user?.phone === 'null'){
      this.user.phone = '';
    }
    this.personDetails.phoneNumber = this.user?.phone;
    this.pickupPerson = pickupPerson;
  }

  togglePickupPerson(show: any, pickupPerson: string){
    this.showPickupPerson = show;
    this.pickupPerson = pickupPerson;
  }

  selectAddress(addressId: number){
    this.addressId = addressId;
  }

  async checkTimeAvailable() {
    let formattedDateTime;
    const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
    const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
    if (!pickupDateValue || !pickupTimeValue) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: 'Missing date or time value' }
      });
      return;
    }
    try {
      let hours: number;
      let minutes: number;
      if (typeof pickupTimeValue === 'string' && pickupTimeValue.match(/[AP]M/i)) {
        const timeParts = pickupTimeValue.split(/:| /);
        hours = parseInt(timeParts[0], 10);
        minutes = parseInt(timeParts[1], 10);
        const period = pickupTimeValue.toUpperCase().includes('PM') ? 'PM' : 'AM';
        if (period === 'PM' && hours < 12) {
          hours += 12;
        }
        if (period === 'AM' && hours === 12) {
          hours = 0;
        }
      } else {
        const timeParts = pickupTimeValue.split(':');
        hours = parseInt(timeParts[0], 10);
        minutes = parseInt(timeParts[1] || '0', 10);
      }
      if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: 'Invalid time values' }
        });
        return;
      }
      const combinedDateTime = new Date(pickupDateValue);
      if (isNaN(combinedDateTime.getTime())) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: 'Invalid date value' }
        });
        return;
      }
      combinedDateTime.setHours(hours, minutes, 0, 0);
      formattedDateTime = formatDate(combinedDateTime, 'yyyy-MM-ddTHH:mm:ss', 'en-US');

      (await this.shoppingCartService.isTimeAvailable(formattedDateTime)).subscribe(
        data => {
          if (data?.errors) {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
            });
            this.isTimeCorrect = false;
            return;
          }

          if (data?.data?.isTimeAvailable?.timeAvailable === false) {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: this.translate.instant('PLEASE_SELECT_BUSINESS_TIME') }
            });
            this.isTimeCorrect = false;
            return;
          }

          this.isTimeCorrect = true;
        },
        error => {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: 'Failed to check time availability' }
          });
          this.isTimeCorrect = false;
        }
      );
    } catch (error) {
      console.error('Error processing date/time:', error);
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: 'Invalid date or time format' }
      });
      this.isTimeCorrect = false;
    }
  }

  async placeOrder(): Promise<boolean>{
    this.isSubmitted = true;
    if(this.orderType == null){
      this.errorMessage = 'PLEASE_SELECT_ORDER_TYPE';
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }
    if(this.paymentMethod == null){
      this.errorMessage = 'PLEASE_SELECT_PAYMENT_METHOD';
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }
    if(this.orderType == 'ORDER_ONLINE_PICK_IN_STORE' && this.pickupPerson == 'ANOTHER_PERSON' && (this.personDetails?.firstName == '' ||
    this.personDetails?.lastName == '' || this.personDetails?.email == '' ||
    this.personDetails?.phoneNumber == '')){
      this.errorMessage = 'PLEASE_SELECT_PICKUP_PERSON_DETAILS';
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }
    if(this.orderType == 'ORDER_ONLINE_SHIP_TO_HOME' && !this.selectedAddress){
      this.errorMessage = 'PLEASE_SELECT_SHIPPING_ADDRESS';
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }
    if(this.orderType == 'ORDER_ONLINE_SHIP_TO_HOME' && this.shippingNotAvailable){
      this.errorMessage = 'SHIPPING_IS_NOT_AVAILABLE_TO_YOUR_ADDRESS';
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }
    if((this.paymentMethod == 'PAYPAL') && !this.paypalUrl){
      this.errorMessage = 'Paypal URL not configured!';
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }
    if((this.orderType == 'ORDER_ONLINE_PICK_IN_STORE' || this.orderType == 'RESERVE_ONLINE_TRY_IN_STORE') && this.pickupDetails.get('pickupDate')!.value == ''){
      this.errorMessage = 'PLEASE_SELECT_PICKUP_DATE';
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }
    if((this.orderType == 'ORDER_ONLINE_PICK_IN_STORE' || this.orderType == 'RESERVE_ONLINE_TRY_IN_STORE') && this.pickupDetails.get('pickupTime')!.value == ''){
      this.errorMessage = 'PLEASE_SELECT_PICKUP_TIME';
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }
    if(this.paymentMethod == 'CREDIT_CARD' && this.isFinixPay == true && (!this.createdAuthorization?.id || this.createdAuthorization.id == null)){
      this.errorMessage = 'YOu should complete the Credit Card form first!';
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }

    let formattedDateTime;
    try {
        formattedDateTime = this.processPickupDateTime();
    } catch (error) {
        this.buttonDisabled = false;
        this.errorMessage = 'Invalid date or time format';
        setTimeout(() => {
          this.errorMessage = '';
          }, 4000);
        return false;
    }

    const firstName = this.personDetails?.firstName !== undefined ? this.personDetails?.firstName : '';
    const lastName = this.personDetails?.lastName !== undefined ? this.personDetails?.lastName : '';
    const email = this.personDetails?.email;
    if(this.personDetails?.phoneNumber === undefined || this.personDetails?.phoneNumber === 'null'){
      this.personDetails.phoneNumber = '';
    }
    const phoneNumber = this.personDetails?.phoneNumber;
    let nameOnCard: string = '';
    let cardNumber: string = '';
    let expMonth:string = '';
    let expYear: string = '';
    let cvc: string = '';
    if(this.paymentDetails){
      nameOnCard = this.paymentDetails?.cardHolderName;
      cardNumber = this.paymentDetails?.cardNumberWithoutSpaces;
      let parts: string[] = this.paymentDetails?.expiryDate?.split('/');
      expMonth = parts[0];
      expYear = parts[1];
      cvc = this.paymentDetails?.cvv;
    }
    if((!phoneNumber || phoneNumber === '') && this.sessionResponse.userType === 'FAZEAL_REGISTERED'){
      this.errorMessage = 'Phone number must be provided from social user settings';
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }

    if(cardNumber != '' && this.isFazealPayEnabled){
      this.checkCardType();
    }

    const orderDetails = {
      businessId: Number(this.tokenStorage.getBusinessID()),
      shoppingCartId: this.shoppingCart.id,
      paymentMethod: this.paymentMethod,
      addressId: this.addressId ? this.addressId : null,
      orderType: this.orderType,
      paymentToken: this.paymentToken,
      orderId: this.shoppingCart.orderId,
      pickupPerson: this.pickupPerson,
      formattedDateTime: formattedDateTime!,
      firstName: firstName,
      lastName: lastName,
      email: email,
      phoneNumber: phoneNumber,
      cardNumber: cardNumber,
      expMonth: expMonth,
      expYear: expYear,
      cvc: cvc,
      cardType: this.cardType ? this.cardType : null,
      selectedCardId: this.selectedCard?.id ? this.selectedCard?.id : null,
      totalApplicableTaxes: this.shoppingCart.totalApplicableTaxes,
      totalSurchargesTaxes: this.shoppingCart.totalSurchargesTaxes,
      selectedAddress: this.selectedAddress ? this.selectedAddress : null,
      userType: this.sessionResponse.userType,
      userId: this.sessionResponse.id,
      billingAddress: this.billingAddress ? this.billingAddress : null
    };
    this.tokenStorage.savePlaceOrderRequest(orderDetails);

    if(this.paymentMethod == 'PAYPAL'){
      return true;
    }
    if((this.validateAddressMessages.length > 0 || this.validateAddressFailed) && this.orderType == 'ORDER_ONLINE_SHIP_TO_HOME'){
      this.errorMessage = 'Shipping Address not Valid!';
      this.initializingPayment = false;
      setTimeout(() => {
        this.errorMessage = '';
         }, 4000);
      return false;
    }
    if(this.orderType == 'RESERVE_ONLINE_TRY_IN_STORE'){
      this.paymentMethod = 'COD';
    }
    let addressPassed;
    if(this.orderType == 'ORDER_ONLINE_PICK_IN_STORE'){
      addressPassed = this.selectedAddress;
    }
    if(this.orderType == 'ORDER_ONLINE_SHIP_TO_HOME'){
      addressPassed = this.matchedAddress;
    }
    if((this.orderType == 'ORDER_ONLINE_PICK_IN_STORE' || this.orderType == 'RESERVE_ONLINE_TRY_IN_STORE')){
      addressPassed = {firstName: this.user?.firstName, lastName: this.user?.lastName, phoneNumber: this.user?.phone, email: this.user?.email};
    }
    this.buttonDisabled = true;
    this.shoppingCartService.placeOrder(Number(this.tokenStorage.getBusinessID()), this.shoppingCart.id, this.paymentMethod,
    this.addressId? this.addressId : null, this.orderType, this.paymentToken, this.shoppingCart.orderId,
    this.pickupPerson, formattedDateTime!, firstName, lastName, email, phoneNumber,null,
    cardNumber, expMonth, expYear, cvc, this.cardType ? this.cardType : null, this.selectedCard?.id ? this.selectedCard?.id : null, this.shoppingCart.totalApplicableTaxes, this.shoppingCart.totalSurchargesTaxes, addressPassed? addressPassed:null,
    this.sessionResponse.userType, this.sessionResponse.id, this.billingAddress? this.billingAddress:null,
    this.createdAuthorization ? this.createdAuthorization.id : '', this.captureAmount ? this.captureAmount : 0).subscribe(
      async data => {
        if(data.errors){
          this.buttonDisabled = false;
          this.initializingPayment = false;
          return;
        }
        if(data?.data?.placeOrder != null){
          this.placeOrderDone = true;
          this.message = data?.data?.placeOrder?.message;
          this.orderResponse = data?.data?.placeOrder?.data;
          // if(this.promotionResponse?.id){
          //   this.promotionService.increaseAppliedCount(this.promotionResponse.id,Number(this.tokenStorage.getBusinessID())).subscribe(
          //     data => {
          //     }
          //   );
          // }
          // this.catalogService.updateLastOrderId(Number(this.tokenStorage.getBusinessID())).subscribe(
          //   data => {
          //   }
          // );

          if(this.paymentMethod == 'PAYPAL'){
            return true;
          }
          if (environment.env !== 'local') {
            this.subdomain = '';
          }
          this.router.navigateByUrl(this.subdomain + '/place-an-order',{state: {order: this.orderResponse, orderFormat: this.orderIdFormat }});
          //this.dataService.notifyOther({refresh: true});
          this.sharedService.notifyRefreshShoppingCart();
          return true;
        }else {
          this.placeOrderDone = false;
          this.errorMessage = data?.errors[0]?.errorMessage;
          this.buttonDisabled = false;
          setTimeout(() => {
            this.errorMessage = '';

             }, 3000);
             return false;
        }
      }
    );
    return true;
  }

  private processPickupDateTime(): string | undefined {
    const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
    const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
    if (!pickupDateValue || !pickupTimeValue) return undefined;
    const { hours, minutes } = this.normalizeTime(pickupTimeValue);
    const combinedDateTime = new Date(pickupDateValue);
    combinedDateTime.setHours(hours, minutes);
    return formatDate(combinedDateTime, 'yyyy-MM-ddTHH:mm:ss', 'en-US');
}


private normalizeTime(timeString: string): { hours: number, minutes: number } {
  if (!timeString) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: 'Pickup Time is empty!' }
      });
      return { hours: 0, minutes: 0 };
  }
  const cleanTime = timeString.trim().toUpperCase();
  let hours: number;
  let minutes: number;
  let isPM = false;
  if (cleanTime.includes('AM') || cleanTime.includes('PM')) {
      const period = cleanTime.includes('PM') ? 'PM' : 'AM';
      const timeWithoutPeriod = cleanTime.replace(/[AP]M/, '').trim();
      const [h, m] = timeWithoutPeriod.split(':').map(Number);
      if (isNaN(h) || h < 1 || h > 12) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: `Invalid hour value: ${h}` }
        });
      }
      if (isNaN(m) || m < 0 || m > 59) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: `Invalid minute value: ${m}` }
        });
      }
      hours = h;
      if (period === 'PM' && hours < 12) {
          hours += 12;
      } else if (period === 'AM' && hours === 12) {
          hours = 0;
      }
      minutes = m;
  } else {
      const [h, m] = cleanTime.split(':').map(Number);
      if (isNaN(h) || h < 0 || h > 23) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: `Invalid hour value: ${h}` }
        });
      }
      if (isNaN(m) || m < 0 || m > 59) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: `Invalid minute value: ${m}` }
        });
      }
      hours = h;
      minutes = m || 0;
  }
  return { hours, minutes };
}

  applyPromocode(){
    let promoCodes = [];
    promoCodes.push(this.promocode);
    this.getCheckoutCart(this.orderType, this.selectedAddress?.state, this.selectedAddress?.city, this.selectedAddress?.zipCode,
      this.shippingId !== undefined ? this.shippingId : null!,
      this.selectedAddress?.streetNumber + ' ' + this.selectedAddress?.addressLine1+ ', ' +
      this.selectedAddress?.state + ', '+ this.selectedAddress?.city + ' ' + this.selectedAddress?.zipCode + ', '+ this.selectedAddress?.country,
      this.selectedAddress?.longitude !== undefined ? this.selectedAddress.longitude : null,
      this.selectedAddress?.latitude !== undefined ? this.selectedAddress.latitude : null, promoCodes)
  }

  checkCardType(){
    this.cardType = creditCardType(this.paymentDetails?.cardNumberWithoutSpaces)!;
  }

  storelocationmodal(address: Address){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'store_location_modal';
    dialogConfig.data = address;
    this.dialog.open(StoreLocationModalComponent, dialogConfig);
  }

  selectMobileCode(list : any){
    this.phoneCode = list.code;
    this.countrytext = false;
    this.selectedcode = true;
  }

  onMenuItemClick(event: MouseEvent): void {
    event.stopPropagation();
  }
  onMenuClosedCountry() {
    this.searchText = '';
  }
  deletepopup(){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'delete_modal';
    this.dialog.open(DeleteGuestContactInfoComponent, dialogConfig);
  }

  async setActiveAddress(address: any, index: any) {
    this.addressNotSelected = false;
    this.setaddress = index;
    this.selectedAddress = address;
    this.selectedAddress.firstName = this.user?.firstName;
    this.selectedAddress.lastName = this.user?.lastName;
    this.selectedAddress.phoneNumber = this.user?.phone;
    this.selectedAddress.email = this.user?.email;
    this.totalShippingRate = 0;

    if (this.isShippingEnabled) {
      await this.validateShipEngineAddress(this.selectedAddress);
      if (this.validateAddressFailed || this.validateAddressMessages.length > 0) {
        return;
      }
    }

    await this.getCheckoutCart(
      this.orderType,
      this.selectedAddress?.state,
      this.selectedAddress?.city,
      this.selectedAddress?.zipCode,
      null!,
      this.selectedAddress?.streetNumber + ' ' + this.selectedAddress?.addressLine1 + ', ' +
      this.selectedAddress?.state + ', ' + this.selectedAddress?.city + ' ' + this.selectedAddress?.zipCode + ', ' +
      this.selectedAddress?.country,
      this.selectedAddress?.longitude !== undefined ? this.selectedAddress.longitude : null,
      this.selectedAddress?.latitude !== undefined ? this.selectedAddress.latitude : null,
      []
    );

    await this.getListOfBusinessShippingRates();
  }

  getListOfBusinessShippingRates(){
    this.shippingNotAvailable = false;
    this.addressService.listAllShippingRatesByStateNameAndBusinessId(this.businessID, this.selectedAddress?.state)
    .subscribe(data => {
      if(data?.data?.listAllShippingRatesByStateNameAndBusinessId){
        this.shippingRates = data?.data?.listAllShippingRatesByStateNameAndBusinessId;
        if(this.shippingRates?.length == 0){
          this.shippingNotAvailable = true;
        }
        if (this.shippingRates.length > 0) {
          this.setActiveShippingRate(this.shippingRates[0]);

      }
    }
    });
  }

  convertShippingDays(shippingDays: string): string | null {
    const currentDate = new Date();
    let startDate: Date;
    let endDate: Date;
    switch (shippingDays) {
      case 'SAME_DAY':
        startDate = endDate = currentDate;
        break;

      case 'NEXT_BUSINESS_DAY':
        startDate = endDate = this.getNextBusinessDay(currentDate);
        break;

      case 'ONE_DAY':
        startDate = currentDate;
        startDate = endDate = this.addDays(currentDate, 1);
        break;

      case 'ONE_TO_TWO_DAYS':
        startDate = currentDate;
        endDate = this.addDays(currentDate, 2);
        break;

      case 'ONE_TO_THREE_DAYS':
        startDate = currentDate;
        endDate = this.addDays(currentDate, 3);
        break;

      case 'THREE_TO_FIVE_DAYS':
        startDate = currentDate;
        endDate = this.addDays(currentDate, 5);
        break;

      case 'FIVE_TO_TEN_DAYS':
        startDate = currentDate;
        endDate = this.addDays(currentDate, 10);
        break;

      default:
        return null;
    }

    if(startDate == endDate){
      return `${this.formatDate(startDate)}`;
    }
    return `${this.formatDate(this.addDays(startDate, 1))} - ${this.formatDate(endDate)}`;
  }

  addDays(date: Date, days: number): Date {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
  }

  getRandomInt(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  getNextBusinessDay(date: Date): Date {
    let result = new Date(date);
    result.setDate(result.getDate() + 1);
    if (result.getDay() === 6) {
      result.setDate(result.getDate() + 2);
    } else if (result.getDay() === 0) {
      result.setDate(result.getDate() + 1);
    }
    return result;
  }

  formatDate(date: Date): string {
    const options = { day: 'numeric', month: 'long' };
    return date.toLocaleDateString();
  }


 async setActiveShippingRate(rate: ShippingResponse) {
  this.addressNotSelected = false;

  if (!this.selectedAddress) {
    this.addressNotSelected = true;
    return;
  }

  this.totalShippingRate = 0;
  this.selectedShippingRates = rate;

  let products: { productId: number; skuId: number | null }[] = [];
  this.shoppingCart?.cartItemResponseList?.forEach(item =>
    products.push({ productId: item.productId, skuId: item.skuId ? item.skuId : null })
  );

  this.shippingId = rate.id;

  await this.getCheckoutCart(
    this.orderType,
    this.selectedAddress?.state,
    this.selectedAddress?.city,
    this.selectedAddress?.zipCode,
    rate.id,
    this.selectedAddress?.addressLine1 + ' ' + this.selectedAddress?.addressLine2 + ', ' +
    this.selectedAddress?.state + ', ' + this.selectedAddress?.city + ' ' + this.selectedAddress?.zipCode + ', ' +
    this.selectedAddress?.country,
    this.selectedAddress?.longitude !== undefined ? this.selectedAddress.longitude : null,
    this.selectedAddress?.latitude !== undefined ? this.selectedAddress.latitude : null,
    []
  );

 if (!this.isOrderIdNull) {
  if (
    (!this.isCODEnabled && this.isFinixPay && this.isPayPalEnabled) ||
    (!this.isCODEnabled && this.isFinixPay && !this.isPayPalEnabled)
  ) {
    this.paymentmethodcard(true, 'FAZEAL_PAY');
    console.log('function initiated');
  }
}
}


  initForm() {
    this.addressForm = this.fb.group({
      country: [this.selectedAddress?.country],
      state: [this.selectedAddress?.state],
      city: [this.selectedAddress?.city],
      zipcode: [this.selectedAddress?.zipCode],
      phoneNumber: [this.selectedAddress?.phoneNumber],
      streetNumber: [this.selectedAddress?.streetNumber],
      poBox: [this.selectedAddress?.poBox],
      formattedAddress: [this.selectedAddress?.addressLine1],
    });
  }

  refreshAddToCart() {
  this.dataService.getReflectCartItems().pipe(
    take(1)
  ).subscribe(res => {
    if (res) {
      this.listUserCartItems();
    }
  });
}

  validateUsername(username: string): boolean {
    const usernamePattern = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){2,16}[a-zA-Z0-9]$/;
    if (!usernamePattern.test(username)) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: this.translate.instant('THE_USERNAME_IS_NOT_VALID') }
      });
      return false;
    }
    return true;
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: this.translate.instant('EMAIL_ERROR') }
        });
        return false;
    }
    return true;
}

   async loginFazealUser() {
    const username = this.fzealUserTxt.trim();
    const password = this.fzealPassTxt.trim();
    if (!this.validateUsername(username)) {
      return;
    }
    const loginData = await firstValueFrom(this.authService.login(username, password, "SOCIAL", this.businessID, this.tokenStorage.getRememberMe()));
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      const errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: errorMessage }
      });
      this.isLoginFailed = true;
      this.userTypeShow = true;
      return;
    }
    const data = loginData?.data?.authenticateUser;
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName;
    this.user.lastName = data.lastName;
    this.user.username = data.username;
    this.user.id = data.id;
    this.user.userType = 'FAZEAL_REGISTERED';
    this.user.profile = data.profile;
    this.user.coverPhoto = data.cover;
    this.user.email = data.email;
    this.user.isSubscribed = false;
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;
    this.isLoggedIn = true;
    this.isLoginFailed = false;

    this.cookieService.deleteUserCookie('user');
    this.cookieService.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveUser(this.user, true);
    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');

    this.sharedService.triggerReload();
    this.sessionResponse = JSON.parse(this.cookieService.getCookie(this.tokenStorage.getBusinessID()!));
    if (this.sessionResponse.userType == 'GUEST') {
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, this.sessionResponse.id, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data.data.cartMerge) {
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'FAZEAL_REGISTERED';
            this.cookieService.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.loadSubscribeModal();
            // await this.loadCartAndFav()
            return;
          }
        });
    }

    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = 'FAZEAL_REGISTERED';
    this.cookieService.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
    this.ngOnInit();
    this.userTypeShow = false;
  }

  async loginStoreUser() {
    const username = this.storeUserTxt.trim();
    const password = this.storePassTxt.trim();
    if (!this.validateEmail(username)) {
      return;
    }
    const loginData = await firstValueFrom(this.authService.login(username, password, "STORE", this.businessID, this.tokenStorage.getRememberMe()));
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      const errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: errorMessage }
      });
      this.isLoginFailed = true;
      this.userTypeShow = true;
      return;
    }
    const data = loginData?.data?.authenticateUser;
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName;
    this.user.lastName = data.lastName;
    this.user.phone = data.phoneNumber;
    this.user.id = data.id;
    this.user.email = data.email;
    this.user.userType = 'STORE_REGISTERED';
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;
    this.user.accessToken = data.accessToken;
    this.user.refreshToken = data.refreshToken;
    this.user.profile = data.profile;
    this.user.countryCode = data.countryCode;
    this.user.emailVerified = data.emailVerified;
    this.isLoggedIn = true;
    this.isLoginFailed = false;

    this.cookieService.deleteUserCookie('user');
    this.cookieService.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveUser(this.user, true);
    this.userTypeShow = false;
    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');

    this.sharedService.triggerReload();
    this.sessionResponse = JSON.parse(this.cookieService.getCookie(this.tokenStorage.getBusinessID()!)!);
    if (this.sessionResponse.userType == 'GUEST') {
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, this.sessionResponse.id, 'STORE_REGISTERED')
        .subscribe(async data => {
          if (data.data.cartMerge) {
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = 'STORE_REGISTERED';
            this.cookieService.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.loadSubscribeModal();
            // await this.loadCartAndFav()
            return;
          }
        });
    }
    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = 'STORE_REGISTERED';
    this.cookieService.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
    this.ngOnInit();
    this.userTypeShow = false;
  }


  async loginByCheckoutType() {
    const username = this.checkOutEmail.trim();
    const password = this.checkOutTypePassword.trim();
    // if (!this.validateUsername(username)) {
    //   return;
    // }
    this.firstTimeCalled = true;
    const loginData = await firstValueFrom(this.authService.login(username, password, this.checkOutUserTypeByEmail, this.businessID, this.tokenStorage.getRememberMe()));
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      const errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: errorMessage }
      });
      this.isLoginFailed = true;
      this.userTypeShow = true;
      this.firstTimeCalled = false;
      return;
    }
    const data = loginData?.data?.authenticateUser;
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName = data.firstName;
    this.user.lastName = data.lastName;
    this.user.username = data.username;
    this.user.id = data.id;
    this.user.userType = this.checkOutUserTypeByEmail;
    this.user.profile = data.profile;
    this.user.coverPhoto = data.cover;
    this.user.email = data.email;
    this.user.isSubscribed = false;
    this.user.phone = data.phone;
    this.user.addressList = data.addressList;
    this.user.paymentDetails = data.paymentDetails;
    this.isLoggedIn = true;
    this.isLoginFailed = false;

    this.cookieService.deleteUserCookie('user');
    this.cookieService.setUserCookie(data?.firstName + ' ' + data?.lastName, 1);
    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveUser(this.user, true);
    this.sharedService.setUserData(this.user);
    sessionStorage.removeItem('guestInfo');

    this.sharedService.triggerReload();
    this.sessionResponse = JSON.parse(this.cookieService.getCookie(this.tokenStorage.getBusinessID()!));
    if (this.sessionResponse.userType == 'GUEST') {
      this.shoppingCartService.cartMerge(Number(this.tokenStorage.getBusinessID()!), this.user.id, this.sessionResponse.id, 'FAZEAL_REGISTERED')
        .subscribe(async data => {
          if (data.data.cartMerge) {
            this.sessionResponse.id = this.user.id;
            this.sessionResponse.userType = this.checkOutUserTypeByEmail;
            this.cookieService.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
            this.loadSubscribeModal();
            return;
          }
        });
    }

    this.sessionResponse.id = this.user.id;
    this.sessionResponse.userType = this.checkOutUserTypeByEmail;
    this.cookieService.setCookie(this.tokenStorage.getBusinessID()!, JSON.stringify(this.sessionResponse), 1);
    this.ngOnInit();
    this.userTypeShow = false;
    this.firstTimeCalled = false;
  }

  private loadSubscribeModal() {
    this.catalogService.getCustomer(this.tokenStorage.getUser().id, Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if (data?.data?.getCustomer == null) {
            return
        } else {
          this.user.isSubscribed = true;
          this.tokenStorage.saveUser(this.user, true);
        }
      }
    );
  }

  setUser(data: any): void {
    this.authService.setLoggedIn();
    this.user = new User();
    this.user.firstName= data.firstName,
    this.user.lastName= data.lastName,
    this.user.username= data.username,
    this.user.id= data.id,
    this.user.profilePicture= data.profile,
    this.user.coverPhoto= data.cover
    this.isLoggedIn = true;
    this.isLoginFailed = false;
  }

  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent,{ panelClass: 'modal-medium-width' });
  }

  signupmodal() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'signup_modal_checkout';
    const dialogRef = this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.event && result?.email !== '' && result?.password !== '') {
        this.checkOutEmail = result?.email;
        this.checkOutTypePassword = result?.password;
        this.checkOutUserTypeByEmail = 'STORE_REGISTERED';
        this.loginByCheckoutType();
      }
    });
  }

  continueAsGuest(guestForm: NgForm) {
    if (guestForm.invalid) {
      return;
    }
    this.user = new User();
    this.user.firstName= guestForm.value.firstName,
    this.user.lastName= guestForm.value.lastName,
    this.user.email= guestForm.value.email,
    this.user.phone= guestForm.value.phoneNumber
    sessionStorage.setItem('guestInfo', JSON.stringify(this.user));
    guestForm.reset();
    this.userTypeShow = false;
    this.getCheckOutTypeById();
    if(this.sessionResponse.userType !== "GENERIC"){
      this.listUserCartItems();
    }
    this.getOrderIdFormatByBusinessId();
    this.listBusinessAddresses();
    this.initForm();
  }

  getEnablePickInStoreAddressStatus(){
    this.loading = true;
    this.businessSettingService.getEnablePickInStoreAddressStatus(Number(this.tokenStorage.getBusinessID())).subscribe(
    data => {
      if(data?.errors){
        this.loading = false;
        return;
      }
      if(data?.data?.getEnablePickInStoreAddressStatus != null){
        this.businessAddressesOn = data?.data?.getEnablePickInStoreAddressStatus;
        setTimeout(() => {
          this.loading = false;
        }, 1000);
        console.log('this.businessAddressesOn, this.businessAddressesOn', this.businessAddressesOn)
        if (!this.businessAddressesOn) {
          setTimeout(() => {
            this.setActiveColumn(2);
          }, 200);
        }
      }
    }
  );
 }

  togglePasswordVisibility() {
    this.showPassword = !this.showPassword;
  }

  async placePaypalOrder(){
    const result = await this.placeOrder();
    if (result === false) {
      return;
    }
    if (result === true) {
      window.location.href = this.paypalUrl;
    }
  }



  addshippingAddressPopup() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(AddShippingAddressComponent, { panelClass: 'modal-x-medium-width' });
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.data && result?.data !== undefined) {
        if(this.shippingAddresses === undefined){
          this.shippingAddresses = [];
        }
        this.shippingAddresses?.push(result?.data);
        if(this.sessionResponse?.userType == 'GUEST'){
          localStorage.removeItem('guest-address');
          const storageData = {
            data: result?.data,
            expirationTime: new Date().getTime() + 120000
          };
          localStorage.setItem('guest-address', JSON.stringify(storageData));
          this.shippingAddresses = [];
          this.shippingAddresses?.push(result?.data);
        }
        if (this.shippingAddresses.length == 1) {
          this.setActiveAddress(this.shippingAddresses[0], 0);
        }
      }
    });
  }

  addCard() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(AddCardPopupComponent, { panelClass: 'modal-medium-width' });
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.data && result?.data !== undefined) {
        this.paymentDetails = result?.data;
        let lastFourDigits = this.paymentDetails?.cardNumberWithoutSpaces?.slice(-4);
        let maskedDigits = 'X'.repeat(this.paymentDetails?.cardNumberWithoutSpaces?.length - 4);
        this.paymentDetails.lastFourDigits = maskedDigits + lastFourDigits;
        this.userCards.push(this.paymentDetails);
      }
    });
  }


  PickPerson() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(PickOrderPersonPopupComponent, { panelClass: 'modal-x-medium-width' });
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.data && result?.data !== undefined) {
        this.personDetails = result?.data;
      }
    });
  }

  addBillingAddressPopup() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open( AddBillingAddressPopupComponent, { panelClass: 'modal-x-medium-width' });
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.data && result?.data !== undefined) {
        this.billingAddress = result?.data;
        if(this.billingAddresses === undefined){
          this.billingAddresses = [];
        }
        this.billingAddresses?.push(result?.data);
        if(this.paymentMethod === 'PAYPAL'){
          this.toggleCreditInfo(false, 'PAYPAL');
        }
      }
    });
  }

  loadAddresses(fazealUser: boolean) {
    this.addressService.getUserAllAddresses(Number(this.tokenStorage.getBusinessID()), this.user.id, fazealUser).subscribe(
      data => {
        if(data.errors){
          return;
        }
        this.allAddresses = data?.data?.getAddress;
        this.getBillingAddresses();
        this.getShippingAddresses();
      }
    );
}

  getBillingAddresses(){
    this.billingAddresses = this.allAddresses?.filter(address => address?.defaultBilling == true);
  }

  getShippingAddresses(){
    this.shippingAddresses = this.allAddresses?.filter(address => address?.defaultShipping == true);
    if (this.shippingAddresses.length > 0) {
      this.setActiveAddress(this.shippingAddresses[0], 0);
    }
  }

  viewStoreHours(){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = this.businessHours;
    this.dialog.open( StorehoursComponent, dialogConfig);
  }


  editShippingAddressPopup(address: any) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    dialogConfig.data = address;
    const dialogRef = this.dialog.open(EditShippingAddressComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.data) {
        const index = this.shippingAddresses?.indexOf(address);
        if (index !== -1) {
          this.shippingAddresses[index] = result.data;
        }
        if(this.sessionResponse?.userType == 'GUEST'){
          localStorage.removeItem('guest-address');
          const storageData = {
            data: result?.data,
            expirationTime: new Date().getTime() + 120000
          };
          localStorage.setItem('guest-address', JSON.stringify(storageData));
        }
        this.setActiveAddress(this.shippingAddresses[index], index);
      }
    });
  }

  editBillingAddressPopup(address: any) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    dialogConfig.data = address;
    const dialogRef =  this.dialog.open(EditbillingaddresspopupComponent , dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.data) {
        const index = this.billingAddresses?.indexOf(address);
        if (index !== -1) {
          this.billingAddresses[index] = result.data;
        }
      }
    });
  }

  removeTemporaryBilling(address: any) {
    const index = this.billingAddresses?.indexOf(address);
    if (index !== -1) {
      this.billingAddresses?.splice(index, 1);
    }
  }

  removeTemporaryShipping(address: any) {
    const index = this.shippingAddresses?.indexOf(address);
    if (index !== -1) {
      this.shippingAddresses?.splice(index, 1);
      localStorage.removeItem('guest-address');
    }
  }

  getOpenCloseMessage(): string {
    const daysOfWeek = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
    const todayIndex = new Date().getDay();

    // Check if today is open directly
    const todayInfo = this.businessHours?.find(day => day?.days === daysOfWeek[todayIndex]);

    if (todayInfo?.isOpen === 'YES') {
      if (todayInfo?.allDay) {
        return `<p class='font-weight-500 text-black m-0'> ${this.translate.instant('TODAY')} <span class="text-success-lighter font-weight-600">${this.translate.instant('OPEN')}</span> ${this.translate.instant('FULLHOURS')} </p>`;
      } else {
        const currentTime = new Date();
        const closingTime = this.getTimeFromHours(
          todayInfo?.endingHours,
          todayInfo?.endingMinute,
          todayInfo?.amORPmEndingHours
        );

        if (currentTime < closingTime) {
          return `<p class='font-weight-500 text-black m-0'>Today <span class="text-success-lighter font-weight-600">Open</span> until ${todayInfo?.endingHours}:${todayInfo?.endingMinute} ${todayInfo?.amORPmEndingHours}</p>`;
        } else {
          // Find the next open day information starting from the day after today
          const nextOpenDayInfo = this.findNextOpenDayInfo(todayIndex + 1);
          if (nextOpenDayInfo.dayInfo) {
            return `<p class='font-weight-500 text-black m-0'> ${this.translate.instant('TODAY')} <span class="text-danger font-weight-600">  ${this.translate.instant('CLOSED')} </span>,  ${this.translate.instant('SIGNUP_NEXTBTN')}  <span class="text-success"> ${this.translate.instant('OPEN')} </span> ${nextOpenDayInfo.daysUntilOpen} ${this.translate.instant('FROM')}  ${this.formatHours(nextOpenDayInfo.dayInfo)}</p>`;
          } else {
            return `<p class='font-weight-500 text-black m-0'><span class="text-danger font-weight-600"> ${this.translate.instant('CLOSED')} </span> ${this.translate.instant('FOR_THE_WEEK')} </p>`;
          }
        }
      }
    }

    // If today is not open, check the next days
    for (let i = 1; i < daysOfWeek.length; i++) {
      const index = (todayIndex + i) % 7;
      const dayInfo = this.businessHours?.find(day => day?.days === daysOfWeek[index]);

      if (dayInfo?.isOpen === 'YES') {
        const daysUntilOpen = i === 1 ? 'Tomorrow' : daysOfWeek[index];
        if (dayInfo?.allDay) {
          return `<p class='font-weight-500 text-black m-0'>${daysUntilOpen} <span class="text-success-lighter font-weight-600">${this.translate.instant('OPEN')}</span>  ${this.translate.instant('FULLHOURS')} </p>`;
        } else {
          return `<p class='font-weight-500 text-black m-0'>${daysUntilOpen} <span class="text-success-lighter font-weight-600">${this.translate.instant('OPEN')}</span> from ${this.formatHours(dayInfo)}</p>`;
        }
      }
    }

    return `<p class='font-weight-500 text-black m-0'>
  <span class="text-danger font-weight-600">${this.translate.instant('CLOSED')}</span>
  ${this.translate.instant('FOR_THE_WEEK')}
</p>`;


  }

  getTimeFromHours(hours: string, minutes: string, period: string): Date {
    const time = new Date();
    const hours24 = period === 'PM' && +hours !== 12 ? +hours + 12 : +hours;
    time.setHours(hours24);
    time.setMinutes(+minutes);
    time.setSeconds(0);
    return time;
  }

  findNextOpenDayInfo(startIndex: number): { daysUntilOpen: string, dayInfo: any } {
    for (let i = 0; i < 7; i++) {
      const nextIndex = (startIndex + i) % 7;
      const nextDayInfo = this.businessHours?.find(day => day.days === ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'][nextIndex]);
      if (nextDayInfo && nextDayInfo.isOpen === 'YES') {
        const daysUntilOpen = i === 0 ? 'Tomorrow' : nextDayInfo.days;
        return { daysUntilOpen, dayInfo: nextDayInfo };
      }
    }
    return { daysUntilOpen: 'later this week', dayInfo: null };
  }

  formatHours(dayInfo: any): string {
    return `${dayInfo?.startingHours}:${dayInfo?.startingMinute} ${dayInfo?.amORPmStartingHours} - ${dayInfo?.endingHours}:${dayInfo?.endingMinute} ${dayInfo?.amORPmEndingHours}`;
  }

  async getOnboardingFormLink(){
    (await this.shoppingCartService.getOnboardingFormLink()).subscribe(
      data => {
        if(data?.errors){
          return;
        }
        if(data?.data?.getOnboardingFormLinkForCustomer){
          this.getOnBoardingForm = data?.data?.getOnboardingFormLinkForCustomer;
          if (this.getOnBoardingForm?.merchantId && this.getOnBoardingForm?.merchantId !== null && this.getOnBoardingForm?.status === 'APPROVED') {
            this.isFinixPay = true;
            this.finixApplicationId = this.getOnBoardingForm?.applicationId;
          }
        }
      }
    );
  }

  getTokenDetails(event: any) {
    const result = event;
    this.initializingPayment = true;
    this.createFinixIdentity(result.id);
  }

  getSessionKey(event: any) {
    this.finixSessionKey = event;
  }

  async createFinixIdentity(token: string){
    this.initializingPayment = true;
    (await this.shoppingCartService.createFinixIdentity(this.selectedAddress ? this.selectedAddress?.city : '', this.selectedAddress ? this.selectedAddress?.country : '',
       this.personDetails.email, this.personDetails.firstName,
       this.personDetails.lastName, this.selectedAddress?.addressLine1 ? this.selectedAddress.addressLine1 : '',
        this.selectedAddress?.addressLine2 ? this.selectedAddress.addressLine2 : '',
        this.personDetails.phoneNumber, '')).subscribe(
      data => {
        if(data?.errors){
          this.initializingPayment = false;
          return;
        }
        if(data?.data?.createFinixIdentity){
          console.log(data, 'createFinixIdentity')
          this.createdFinixIdentity = data?.data?.createFinixIdentity;
          this.createFinixPaymentInstruments(token, this.createdFinixIdentity.id);
        }
      }
    );
   }

   async createFinixPaymentInstruments(token: string, identityId: string){
    this.initializingPayment = true;
    (await this.shoppingCartService.createPaymentInstruments(token, "TOKEN", identityId)).subscribe(
      data => {
        if(data?.errors){
          this.initializingPayment = false;
          return;
        }
        if(data?.data?.createPaymentInstruments){
          console.log(data, 'createPaymentInstruments')
          this.createdPaymentInstrument = data?.data?.createPaymentInstruments;
          this.createAuthorization();
        }
      }
    );
   }

   async createAuthorization() {
    this.initializingPayment = true;
    const amount = (this.shoppingCart.totalPrice * 100).toFixed(0)
    this.captureAmount = Number(amount);
    (await this.shoppingCartService.createAuthorization(
        this.captureAmount,
        this.createdPaymentInstrument.currency,
        this.getOnBoardingForm?.merchantId,
        this.createdPaymentInstrument.id,
        this.finixSessionKey
    )).subscribe(
      (data) => {
        if(data?.errors){
          this.initializingPayment = false;
          const errorMessage = data?.errors[0]?.errorMessage;
          let failureMessage = 'The transaction was declined';
          let failureCode = 'GENERIC_DECLINE';
          if (errorMessage) {
            try {
                const embeddedErrorMatch = errorMessage.match(/"failure_message"\s*:\s*"([^"]+)"/);
                const codeMatch = errorMessage.match(/"failure_code"\s*:\s*"([^"]+)"/);
                if (embeddedErrorMatch && embeddedErrorMatch[1]) {
                    failureMessage = embeddedErrorMatch[1];
                }
                if (codeMatch && codeMatch[1]) {
                    failureCode = codeMatch[1];
                }
            } catch (e) {
                console.error('Error parsing error message:', e);
                this.initializingPayment = false;
            }
          }
          this.showErrorDialog(
              this.translate.instant(failureCode),
              failureMessage
          );
          this.initializingPayment = false;
          return;
        }
        if (data?.data?.createAuthorization?.id) {
            console.log(data, 'createAuthorization');
            this.createdAuthorization = data?.data?.createAuthorization;
            if(this.checkoutAddressError && this.checkoutAddressError !== ''){
              this.showErrorDialog('ERROR', this.checkoutAddressError);
              this.initializingPayment = false;
              return;
            }
            this.placeOrder();
        }
      });
}

private showErrorDialog(title: string, message: string) {
    this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: {
            title: title,
            message: message
        }
    });
}

continueEmailAddress() {
this.showEmailform = false;
}

getSingleCheckoutMethodKey(): string | null {
  const isReserve = this.reserveOnlineOrTryInStore && this.businessAddressesOn;
  const isPickup = this.orderOnlinePickupFromStore && this.businessAddressesOn;
  const isShip = this.orderOnlineShipHome;

  const count = [isReserve, isPickup, isShip].filter(Boolean).length;
  if (count !== 1) return null;

  if (isReserve) return 'RESERVE_ONLINE_TRYINSTOREE';
  if (isPickup) return 'ORDER_ONLINE_PICKUP_FROM_STORE';
  if (isShip) return 'ORDER_ONLINE_SHIP_TO_HOMEE';

  return null;
}


getSingleCheckoutMethodCount(): number {
  let count = 0;
  if (this.reserveOnlineOrTryInStore && this.businessAddressesOn) count++;
  if (this.orderOnlinePickupFromStore && this.businessAddressesOn) count++;
  if (this.orderOnlineShipHome) count++;
  return count;
}

continueGuest() {
  this.isContinueGuest = true;
  setTimeout(() => {
    if (this.guestForm) {
      const emailToSet = this.checkOutEmail;
      this.guestForm.form.patchValue({ email: emailToSet });
    }
  });
}

}

--- ./site-themes/four-theme/four-theme-checkout/add-card-popup/add-card-popup.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/add-card-popup/add-card-popup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, OnInit } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';

\1
  standalone: true,
  selector: 'app-add-card-popup',
  templateUrl: './add-card-popup.component.html',
  styleUrls: ['./add-card-popup.component.css']
})
export class AddCardPopupComponent implements OnInit {

  cardType!: string | undefined;
  cardHolderName!: string;
  cardNumber: string = '';
  expiryDate: string = '';
  isDefault: boolean = false;
  expirationDateNotValid: boolean = true;
  cvvNotValid: boolean = false;
  cvv: string = '';
  ccErrorMessage: string = '';
  cardNameValidation: string = '';
  message: string = '';
  invalidCardNumber = false;
  paymentButton: boolean = false;
  constructor(private translate: TranslateService, private dialogRef: MatDialogRef<AddCardPopupComponent>) { }

  ngOnInit() {
  }

  addPayment() {
    this.ccErrorMessage = '';
    this.cardNameValidation = '';
    if(!this.expirationDateNotValid){
      return;
    }
    this.validateInputs();
    if (this.ccErrorMessage) {
      return;
    }
    if(this.cardNameValidation){
      return
    }
    if (this.invalidCardNumber) {
      return;
    }
    const cardNumberWithoutSpaces = this.cardNumber.replace(/\s+/g, '');
    this.paymentButton = true;
    let payment = {cardHolderName: this.cardHolderName, cardNumberWithoutSpaces: cardNumberWithoutSpaces, expiryDate: this.expiryDate,
      cardType: this.cardType!, isDefault: this.isDefault == undefined ? false : this.isDefault,
      cvv: this.cvv}
     this.dialogRef.close({ event: 'close', data: payment});
  }

  hasTwoWords(inputString: string): boolean {
    const pattern = /\b\w+\s\w+\b/;
    return pattern.test(inputString);
  }

  validateInputs() {
    this.ccErrorMessage = '';
    this.cardNameValidation = '';
    if ( !this.cardNumber || !this.expirationDateNotValid || this.cardType == 'no_value' || !this.cvv) {
      this.ccErrorMessage = 'PLEASE_FILL_IN_ALL_REQUIRED_FIELDS';
      return;
    }
    if (!this.hasTwoWords(this.cardHolderName) || this.cardHolderName === undefined) {
      this.cardNameValidation = 'CARD_HOLDER_NAME_SHOULD_BE_FULLNAME'
      return;
    }
    if (!this.validateExpirationDate(this.expiryDate)) {
      this.ccErrorMessage = this.translate.instant('EXPIRY_DATE_NOT_VALID')
      return;
    }
    if(this.cardNumber?.length === 0 || this.cardNumber?.length < 13 || this.cardNumber?.length > 19){
      this.invalidCardNumber = true;
      return;
    }
  }

  resetMessages() {
    setTimeout(() => {
      this.ccErrorMessage = '';
      this.message = '';
      this.cardNameValidation = '';
    }, 3000);
  }

  onExpirationDateInputChange(event: any) {
    let inputVal: string = event.target.value;
    inputVal = inputVal?.replace(/\D/g, '');
    if (inputVal.length > 6) {
      inputVal = inputVal?.substring(0, 6);
    }
    if (inputVal.length > 2) {
      inputVal = inputVal?.substring(0, 2) + '/' + inputVal?.substring(2);
    }
    this.expiryDate = inputVal;
    this.expirationDateNotValid = this.validateExpirationDate(inputVal);
  }

  validateExpirationDate(expirationDateString: string): boolean {
    const currentDate = new Date();
    const expirationDateComponents = expirationDateString.split('/');
    if (expirationDateComponents.length !== 2) {
      return false;
    }
    const expMonth = parseInt(expirationDateComponents[0], 10);
    let expYear = parseInt(expirationDateComponents[1], 10);

    if(expYear.toString().length < 4){
      return false;
    }
    if (isNaN(expMonth) || isNaN(expYear)) {
      return false;
    }
    if (expirationDateComponents[1].length === 2) {
      expYear = expYear + 2000;
    }
    if (expYear < currentDate.getFullYear()) {
      return false;
    }
    if (expYear === currentDate.getFullYear() && expMonth <= currentDate.getMonth()) {
      return false;
    }
    return true;
  }

  checkCardType(){
    this.cardType = creditCardType(this.cardNumber);
  }

  formatCardNumber(event: any) {
    let inputVal: string = event.target.value;
    inputVal = inputVal?.replace(/\D/g, '');
    inputVal = inputVal?.slice(0, 19);
    inputVal = inputVal?.replace(/(\d{4})(?=\d)/g, '$1 ');
    this.cardNumber = inputVal;
    this.checkCardType();
  }
}

export function creditCardType(cc: string) {
  cc = cc.replace(/\s/g, '');
  let amex = new RegExp('^3[47][0-9]{13}$');
  let visa = new RegExp('^4[0-9]{12}(?:[0-9]{3})?$');
  let cup = new RegExp('^62[0-9]{14}$');
  let mastercard = new RegExp('^5[1-5][0-9]{14}$');
  let mastercard2 = new RegExp('^2[2-7][0-9]{14}$');
  let disco1 = new RegExp('^6011[0-9]{12}$');
  let disco2 = new RegExp('^64[4-9][0-9]{13}$');
  let disco3 = new RegExp('^65[0-9]{14}$');
  let diners = new RegExp('^3(?:0[0-5]|[68][0-9])[0-9]{11}$');
  let jcb = new RegExp('^35(?:2[89]|[3-8][0-9])[0-9]{12}$');
  let elo = new RegExp('^((636368)|(438935)|(504175)|(451416)|(509048)|(509067)|(509049)|(509069)|(509050)|(509074)|(509068)|(509040)|(509045)|(509060)|(509057)|(509042)|(509046)|(509066)|(509047)|(509062)|(509040)|(509043)|(509064)|(509040))\\d{10,12}$');

  if (visa.test(cc)) {
    return 'VISA';
  }
  if (amex.test(cc)) {
    return 'AMEX';
  }
  if (mastercard.test(cc) || mastercard2.test(cc)) {
    return 'MASTERCARD';
  }
  if (disco1.test(cc) || disco2.test(cc) || disco3.test(cc)) {
    return 'DISCOVER';
  }
  if (diners.test(cc)) {
    return 'DINERS';
  }
  if (jcb.test(cc)) {
    return 'JCB';
  }
  if (cup.test(cc)) {
    return 'CHINA_UNION_PAY';
  }
  if (elo.test(cc)) {
    return 'ELO';
  }
  return undefined;
}

--- ./site-themes/four-theme/four-theme-checkout/AddBillingAddressPopup/AddBillingAddressPopup.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/AddBillingAddressPopup/AddBillingAddressPopup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { AddressService } from 'src/app/service/Address.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-AddBillingAddressPopup',
  templateUrl: './AddBillingAddressPopup.component.html',
  styleUrls: ['./AddBillingAddressPopup.component.css']
})
export class AddBillingAddressPopupComponent implements OnInit {
  AddressInstructions: boolean = false;
  order!: OrderResponse;
  errorMessage: any;
  countries: any[] = [];
  cities: any[] = [];
  states: any[] = [];
  selectedState : any;
  selectedCountry: any;
  selectedCity: any;
  addAddressSuccessful: boolean = false;
  countryName: string = '';
  stateName: string = '';
  cityName: string = '';
  sessionResponse!: SessionResponse;
  isFazealUser: boolean = false;
  shortName: string = '';
  AddressOnMap: boolean = false;
  addressInstruction: string = '';
  addressLine1: string = '';
  addressLine2: string = '';
  addAddressFail: boolean = false;
  addressButton: boolean = false;
  address!: any;
  user = this.tokenStorageService.getUser();
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  postalCode: any;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog, private cdr: ChangeDetectorRef,
  private addressService: AddressService,private cookieService: CookieDataServiceService,
  private tokenStorageService: TokenStorageService, public dialogRef: MatDialogRef<AddBillingAddressPopupComponent>) {
    if(this.businessId &&  cookieService.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieService.getCookie(this.businessId!.toString()));
    }
  }

  async ngOnInit() {
    await this.loadCountries();
  }

  async loadCountries() {
    await this.addressService.getAllCountriesForBusiness().subscribe(data => {
       this.countries = data?.data?.getAllCountries;
       this.cdr.detectChanges();
     });
   }

   async loadStates(countryId: number) {
     await this.addressService.getAllStatesOfCountry(countryId).subscribe(data => {
        this.states = data?.data?.getAllStatesOfCountry;
        this.cdr.detectChanges();
      });
    }

    async loadCities(stateId: number) {
     await this.addressService.getAllCitiesOfState(stateId).subscribe(data => {
        this.cities = data?.data?.getAllCitiesOfState;
        this.cdr.detectChanges();
      });
    }

    onCountryChange(countryId: number) {
     this.selectedCountry = countryId;
     this.selectedState = null;
     this.selectedCity = null;
     this.stateName = '';
     this.cityName = '';
     this.states = [];
     this.cities = [];
     const country = this.countries.find(c => c.id === countryId);
     this.countryName = country ? country.name : '';
     this.shortName = country ? country.shortName : '';
     if (countryId) {
       this.loadStates(countryId);
     }
   }

   onStateChange(stateId: number) {
     this.selectedState = stateId;
     this.selectedCity = null;
     this.cityName = '';
     this.cities = [];
     const state = this.states.find(s => s.id === stateId);
     this.stateName = state ? state.name : '';
     if (stateId) {
       this.loadCities(stateId);
     }
   }

   onCityChange(cityId: any) {
     this.selectedCity = cityId.name;
     const city = this.cities.find(c => c.id === cityId.id);
     this.cityName = city ? city.name : '';
   }


  saveUserAddress() {
    console.log(this.stateName, this.selectedCity, this.countryName, this.shortName, this.postalCode, this.addressLine1)
    this.addressButton = true;
    const addressInstruction = this.addressInstruction ? this.addressInstruction?.trim() : '';
    const addressLine1 = this.addressLine1 ? this.addressLine1?.trim() : '';
    const addressLine2 = this.addressLine2 ? this.addressLine2?.trim() : '';
    const country = this.countryName ? this.countryName?.trim() : '';
    const shortName = this.shortName ? this.shortName?.trim() : '';
    const state = this.stateName ? this.stateName?.trim() : '';
    const city = this.cityName ? this.cityName?.trim() : '';
    const postalCode = this.postalCode ? this.postalCode?.trim() : '';
    if (
      (!country ||
      !addressLine1 ||
      !state ||
      !city ||
      !postalCode)
    ) {
      this.addAddressFail = true;
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: 'ALL_ADDRESS_INFO_REQUIRED' }
      });
      this.addressButton = false;
      return;
    }
    if(this.sessionResponse.userType === 'FAZEAL_REGISTERED'){
      this.isFazealUser = true;
    } else {
      this.isFazealUser = false;
    }
    this.addressButton = true;
    this.address = { addressDescription: 'description',addressLine1: addressLine1, addressLine2: addressLine2 !== undefined || addressLine2 !== null ? addressLine2 : '', shortName: shortName, country: country, state:state, city:city,
      zipCode: postalCode, defaultBilling: true, defaultShipping: false, userId: this.user ? this.user.id : null, businessId: this.businessId,
      fazealUserId: this.isFazealUser, addressInstruction }
    this.addAddressSuccessful = true;
    this.addAddressFail = false;
    this.dialogRef.close({ event: 'close', data: this.address });
    this.dialog.open(SucessmsgPopupComponent, {
      backdropClass: 'notificationmodal-popup-sucess',
        data: { title: 'SUCCESS', message: 'ADDRESS_SUCCESS_ONLY'
        }
    });
  }


}

--- ./site-themes/four-theme/four-theme-checkout/pick-order-person-popup/pick-order-person-popup.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/pick-order-person-popup/pick-order-person-popup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { Country } from 'src/app/models/country';
import { AddressService } from 'src/app/service/Address.service';
import { firstValueFrom } from 'rxjs/internal/firstValueFrom';
import { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatDialogRef } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-pick-order-person-popup',
  templateUrl: './pick-order-person-popup.component.html',
  styleUrls: ['./pick-order-person-popup.component.css']
})
export class PickOrderPersonPopupComponent implements OnInit {

  phoneCode: string = '1';
  searchText: string = '';
  countries: Country[] = [];
  pickupDetails!: FormGroup;

  constructor(public addressService: AddressService,private cdr: ChangeDetectorRef,private fb: FormBuilder,private dialogRef: MatDialogRef<PickOrderPersonPopupComponent>) { }

 async ngOnInit() {
  this.pickupDetails = this.fb.group({
    firstName: ['', [Validators.required]],
    lastName: ['', [Validators.required]],
    email: ['', [Validators.required]],
    phoneNumber: ['', [Validators.required]]
  });
  await this.loadCountries();
  }

  get getControl(): { [key: string]: AbstractControl; } {
    return this.pickupDetails.controls;
  }

  savePerson(){
    console.log(this.pickupDetails.valid, 'savePerson');
    if(this.pickupDetails.valid){
      const firstName = this.pickupDetails.get('firstName')!.value;
      const lastName = this.pickupDetails.get('lastName')!.value;
      const email = this.pickupDetails.get('email')!.value;
      const phoneNumber = this.pickupDetails.get('phoneNumber')!.value;
      let personDetails = {firstName: firstName, lastName: lastName, email: email, phoneNumber: phoneNumber}
      this.dialogRef.close({ event: 'close', data: personDetails });
    }

  }

  selectCode(code: string) {
    this.phoneCode = code;
  }

  onMenuClosedCountry() {
    this.searchText = '';
  }

  onMenuItemClick(event: MouseEvent): void {
    event.stopPropagation();
  }


  async loadCountries() {
    const response = await firstValueFrom(this.addressService.getAllCountriesForBusiness())
    this.countries = response?.data?.getAllCountries;
    this.cdr.detectChanges();
  }


}

--- ./site-themes/four-theme/four-theme-checkout/edit-shipping-address/edit-shipping-address.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/edit-shipping-address/edit-shipping-address.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { AddressService } from 'src/app/service/Address.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-edit-shipping-address',
  templateUrl: './edit-shipping-address.component.html',
  styleUrls: ['./edit-shipping-address.component.css']
})
export class EditShippingAddressComponent implements OnInit {
  userInfo: any = this.tokenStorageService.getUser();
  message: any;
  errormessage: any;
  addressDesc!: string;
  route!: string;
  addressLine2!: string;
  countryName: any;
  stateName: any;
  cityName: any;
  zipCode!: string;
  streetNumber!: string;
  addressId!:number
  addAddressSuccessful!: boolean;
  addAddressFail!: boolean;
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  addressButton: boolean = false;
  errorMessage: any;
  countries: any[] = [];
  cities: any[] = [];
  states: any[] = [];
  selectedState : any;
  selectedCountry: any;
  selectedCity: any;
  address: any;
  AddressInstructions: boolean = true;
  shortName: string = '';


  constructor(private dialog: MatDialog, private addressService: AddressService, private tokenStorageService: TokenStorageService,
    public dialogRef: MatDialogRef<EditShippingAddressComponent>,private cdr: ChangeDetectorRef, @Inject(MAT_DIALOG_DATA) public data: any) {

     }

  async ngOnInit() {
    this.address = this.data;
    await this.getAllCountries();
    this.selectedCountry = this.countries?.filter((e) => {
      return e.name == this.data?.country;
    })[0];
    await this.getAllStatesOfCountry(this.selectedCountry?.id);
    this.selectedState = this.states?.filter((e) => {
      return e.name == this.data?.state;
    })[0];
    await this.getAllCitiesOfState(this.selectedState?.id);
    this.selectedCity = this.cities?.filter((e) => {
      return e.name == this.data?.city;
    })[0];
  }

  updateAddress() {
    this.address = { addressDescription: '', addressLine1: this.address.addressLine1, addressLine2: this.address.addressLine2 !== undefined || this.address.addressLine2 !== null ? this.address.addressLine2 : '',
       country: this.selectedCountry.name, state:this.selectedState.name, city:this.selectedCity.name,
      zipCode: this.address.zipCode, defaultBilling: true, defaultShipping: false, userId: this.userInfo ? this.userInfo.id : null, businessId: this.businessId,
      fazealUserId: false, longitude: null, latitude: null, addressInstruction: this.address.addressInstruction }
      this.addAddressSuccessful = true;
      this.addAddressFail = false;
      this.dialogRef.close({ event: 'close', data: this.address });
      this.dialog.open(SucessmsgPopupComponent, {
        backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'ADDRESS_UPDATE_SUCCESS_ONLY'
          }
      });
  }

  public async getAllCountries() {
    await this.addressService.getAllCountriesForBusiness().toPromise().then(
      data => {
        if (data?.data?.getAllCountries == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.countries = data?.data?.getAllCountries;
      }
    )
  }

  private async getAllStatesOfCountry(id : number) {
    await this.addressService.getAllStatesOfCountry(id).toPromise().then(
      data => {
        if (data?.data?.getAllStatesOfCountry == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.states = data?.data?.getAllStatesOfCountry;
      }
    );
  }
  private async getAllCitiesOfState(id : number) {
    await this.addressService.getAllCitiesOfState(id).toPromise().then(
      data => {
        if (data?.data?.getAllCitiesOfState == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.cities = data?.data?.getAllCitiesOfState;
      }
    );
  }

 countrySelected(country: any) {
  this.selectedCountry = country;
  this.selectedState = null;
  this.selectedCity = null;

  this.countryName = country?.name || '';
  this.shortName = country?.shortName || '';

  if (country?.id) {
    this.getAllStatesOfCountry(country.id);
  }
}

 stateSelected(state: any) {
  this.selectedState = state;
  this.selectedCity = null;

  if (state?.id) {
    this.getAllCitiesOfState(state.id);
  }
}

}

--- ./site-themes/four-theme/four-theme-checkout/finix-payment-checkout/finix-payment-checkout.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/finix-payment-checkout/finix-payment-checkout.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit, AfterViewInit, ElementRef, ViewChild, Output, EventEmitter, Input } from '@angular/core';
import { environment } from 'src/environments/environment';

declare var Finix: any; // Declare Finix for TypeScript

\1
  standalone: true,
  selector: 'app-finix-payment-checkout',
  templateUrl: './finix-payment-checkout.component.html',
  styleUrls: ['./finix-payment-checkout.component.css']
})
export class FinixPaymentCheckoutComponent implements OnInit, AfterViewInit {
  @ViewChild('finixFormContainer', { static: false }) finixFormContainer!: ElementRef;
  @Input() finixApplicationId!: string;
  @Input() merchantId!: string;
  @Output() tokenEmitter = new EventEmitter<any>();
  @Output() finixSessionKeyEmitter = new EventEmitter<any>();
  mode: string = '';

  constructor() { }

  ngOnInit() {}

  ngAfterViewInit() {
    if (typeof Finix === 'undefined') {
      console.error('Finix SDK not loaded. Ensure it is included in index.html');
      return;
    }
    if(environment.env === 'prod'){
      this.mode = 'live';
    } else {
      this.mode = 'sandbox';
    }
    const FinixAuth = Finix.Auth(this.mode, this.merchantId);
    const form = Finix.CardTokenForm('finix-form', {
      showAddress: true,
      onSubmit: () => {
        form.submit(this.mode, this.finixApplicationId, (err: any, res: any) => {
          if (err) {
            console.error('Error:', err);
            return;
          }
          const token = res?.data?.id;
          const sessionKey = FinixAuth.getSessionKey();
          this.tokenEmitter.emit(res.data);
          this.finixSessionKeyEmitter.emit(sessionKey);
          console.log(res,"checking response of token")
        });
      }
    });
  }
}

--- ./site-themes/four-theme/four-theme-checkout/BillingAddressPopup/BillingAddressPopup.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/BillingAddressPopup/BillingAddressPopup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { AddBillingAddressPopupComponent } from '../AddBillingAddressPopup/AddBillingAddressPopup.component';

\1
  standalone: true,
  selector: 'app-BillingAddressPopup',
  templateUrl: './BillingAddressPopup.component.html',
  styleUrls: ['./BillingAddressPopup.component.css']
})
export class BillingAddressPopupComponent implements OnInit {

  constructor(public dialog: MatDialog) { }

  ngOnInit() {
  }

  addBillingAddressPopup() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open( AddBillingAddressPopupComponent, { panelClass: 'modal-x-medium-width' });
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.data && result?.data !== undefined) {
        console.log(result?.data, 'result?.data')
      }
    });
  }

}

--- ./site-themes/four-theme/four-theme-checkout/storehours/storehours.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/storehours/storehours.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-storehours',
  templateUrl: './storehours.component.html',
  styleUrls: ['./storehours.component.css']
})
export class StorehoursComponent implements OnInit {
  businessHours: any[] = [];

  constructor(@Inject(MAT_DIALOG_DATA) public data: any ) { }

  ngOnInit() {
    this.businessHours = this.data;
  }

  getFormattedTime(hours: string, minutes: string, amPm: string): string {
    const hour = parseInt(hours, 10);
    const minute = parseInt(minutes, 10);
    const formattedMinute = minute < 10 ? `0${minute}` : minute;
    return `${hour}:${formattedMinute} ${amPm}`;
  }

}

--- ./site-themes/four-theme/four-theme-checkout/add-shipping-address/add-shipping-address.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/add-shipping-address/add-shipping-address.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { Country } from 'src/app/models/country';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { Address } from 'src/app/models/user';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { AddressService } from 'src/app/service/Address.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-add-shipping-address',
  templateUrl: './add-shipping-address.component.html',
  styleUrls: ['./add-shipping-address.component.css']
})
export class AddShippingAddressComponent implements OnInit {


  AddressInstructions: boolean = false;
  AddressOnMap: boolean = false;
  addressInstruction: string = '';
  addressLine1: string = '';
  addressLine2: string = '';
  zipCode: string = '';
  addAddressFail: boolean = false;
  addAddressSuccessful: boolean = false;
  defaultBillingOnCreateAddress: boolean = false;
  defaultShippingOnCreateAddress: boolean = false;
  address!: any;
  user = this.tokenStorageService.getUser();
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  addressButton: boolean = false;
  countries: Country[] = [];
  states: any[] = [];
  cities: any[] = [];
  selectedCountry: number | null = null;
  selectedState: number | null = null;
  selectedCity: number | null = null;
  countryName: string = '';
  stateName: string = '';
  cityName: string = '';
  sessionResponse!: SessionResponse;
  isFazealUser: boolean = false;
  latitude: number = 0;
  longitude: number = 0;
  zoom: number = 5;
  // searchResults: google.maps.places.PlaceResult[] = [];
  markerLatitude: number = 0;
  markerLongitude: number = 0;
  mapClickListener: any
  mappp: any;
  searchText: string = '';
  shortName: string = '';


  constructor(private dialog: MatDialog, private addressService: AddressService, private tokenStorageService: TokenStorageService,
    public dialogRef: MatDialogRef<AddShippingAddressComponent>,private cdr: ChangeDetectorRef,private cookieService: CookieDataServiceService) {
      if(this.businessId &&  cookieService.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieService.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    await this.loadCountries();
  }

  async loadCountries() {
   await this.addressService.getAllCountriesForBusiness().subscribe(data => {
      this.countries = data?.data?.getAllCountries;
      this.cdr.detectChanges();
    });
  }

  async loadStates(countryId: number) {
    await this.addressService.getAllStatesOfCountry(countryId).subscribe(data => {
       this.states = data?.data?.getAllStatesOfCountry;
       this.cdr.detectChanges();
     });
   }

   async loadCities(stateId: number) {
    await this.addressService.getAllCitiesOfState(stateId).subscribe(data => {
       this.cities = data?.data?.getAllCitiesOfState;
       this.cdr.detectChanges();
     });
   }

   onCountryChange(countryId: number) {
    this.selectedCountry = countryId;
    this.selectedState = null;
    this.selectedCity = null;
    this.stateName = '';
    this.cityName = '';
    this.states = [];
    this.cities = [];
    const country = this.countries.find(c => c.id === countryId);
    this.countryName = country ? country.name : '';
    this.shortName = country ? country.shortName : '';
    if (countryId) {
      this.loadStates(countryId);
    }
  }

  onStateChange(stateId: number) {
    this.selectedState = stateId;
    this.selectedCity = null;
    this.cityName = '';
    this.cities = [];
    const state = this.states.find(s => s.id === stateId);
    this.stateName = state ? state.name : '';
    if (stateId) {
      this.loadCities(stateId);
    }
  }

  onCityChange(cityId: number) {
    this.selectedCity = cityId;
    const city = this.cities.find(c => c.id === cityId);
    this.cityName = city ? city.name : '';
  }

  saveUserAddress() {
    this.addressButton = true;
    const addressInstruction = this.addressInstruction ? this.addressInstruction?.trim() : '';
    const addressLine1 = this.addressLine1 ? this.addressLine1?.trim() : '';
    const addressLine2 = this.addressLine2 ? this.addressLine2?.trim() : '';
    const country = this.countryName ? this.countryName?.trim() : '';
    const shortName = this.shortName ? this.shortName?.trim() : '';
    const state = this.stateName ? this.stateName?.trim() : '';
    const city = this.cityName ? this.cityName?.trim() : '';
    const zipCode = this.zipCode ? this.zipCode?.trim() : '';
    if (
      (!country ||
      !addressLine1 ||
      !state ||
      !city ||
      !zipCode)
    ) {
      this.addAddressFail = true;
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: 'ALL_ADDRESS_INFO_REQUIRED' }
      });
      this.addressButton = false;
      return;
    }
    if(this.sessionResponse.userType === 'FAZEAL_REGISTERED'){
      this.isFazealUser = true;
    } else {
      this.isFazealUser = false;
    }
    this.addressButton = true;
    this.address = { addressDescription: 'description',addressLine1: addressLine1, addressLine2: addressLine2 !== undefined || addressLine2 !== null ? addressLine2 : '', shortName: shortName, country: country, state:state, city:city,
      zipCode: zipCode, defaultBilling: false, defaultShipping: true, userId: this.user ? this.user.id : null, businessId: this.businessId,
      fazealUserId: this.isFazealUser, longitude: this.longitude, latitude: this.latitude, addressInstruction }
    this.addAddressSuccessful = true;
    this.addAddressFail = false;
    this.dialogRef.close({ event: 'close', data: this.address });
    this.dialog.open(SucessmsgPopupComponent, {
      backdropClass: 'notificationmodal-popup-sucess',
        data: { title: 'SUCCESS', message: 'ADDRESS_SUCCESS_ONLY'
        }
    });
  }

}

--- ./site-themes/four-theme/four-theme-checkout/shipping-address-popup/shipping-address-popup.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/shipping-address-popup/shipping-address-popup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { AddShippingAddressComponent } from '../add-shipping-address/add-shipping-address.component';

\1
  standalone: true,
  selector: 'app-shipping-address-popup',
  templateUrl: './shipping-address-popup.component.html',
  styleUrls: ['./shipping-address-popup.component.css']
})
export class ShippingAddressPopupComponent implements OnInit {

  constructor(public dialog: MatDialog) { }

  ngOnInit() {
  }

  addshippingAddressPopup() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(AddShippingAddressComponent, { panelClass: 'modal-x-medium-width' });
  }




}

--- ./site-themes/four-theme/four-theme-checkout/editbillingaddresspopup/editbillingaddresspopup.component.ts
+++ ./site-themes/four-theme/four-theme-checkout/editbillingaddresspopup/editbillingaddresspopup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { AddressService } from 'src/app/service/Address.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-editbillingaddresspopup',
  templateUrl: './editbillingaddresspopup.component.html',
  styleUrls: ['./editbillingaddresspopup.component.css']
})
export class EditbillingaddresspopupComponent implements OnInit {
  userInfo: any = this.tokenStorageService.getUser();
  message: any;
  errormessage: any;
  addressDesc!: string;
  route!: string;
  addressLine2!: string;
  countryName: any;
  stateName: any;
  cityName: any;
  zipCode!: string;
  streetNumber!: string;
  addressId!:number
  addAddressSuccessful!: boolean;
  addAddressFail!: boolean;
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  addressButton: boolean = false;
  errorMessage: any;
  countries: any[] = [];
  cities: any[] = [];
  states: any[] = [];
  selectedState : any;
  selectedCountry: any;
  selectedCity: any;
  address: any;


  constructor(private dialog: MatDialog, private addressService: AddressService, private tokenStorageService: TokenStorageService,
    public dialogRef: MatDialogRef<EditbillingaddresspopupComponent>,private cdr: ChangeDetectorRef, @Inject(MAT_DIALOG_DATA) public data: any) {

     }

  async ngOnInit() {
    this.address = this.data;
    await this.getAllCountries();
    this.selectedCountry = this.countries?.filter((e) => {
      return e.name == this.data?.country;
    })[0];
    await this.getAllStatesOfCountry(this.selectedCountry?.id);
    this.selectedState = this.states?.filter((e) => {
      return e.name == this.data?.state;
    })[0];
    await this.getAllCitiesOfState(this.selectedState?.id);
    this.selectedCity = this.cities?.filter((e) => {
      return e.name == this.data?.city;
    })[0];
  }

  updateAddress() {
    this.address = { addressDescription: '', addressLine1: this.address.addressLine1, addressLine2: this.address.addressLine2 !== undefined || this.address.addressLine2 !== null ? this.address.addressLine2 : '',
       country: this.selectedCountry.name, state:this.selectedState.name, city:this.selectedCity.name,
      zipCode: this.address.zipCode, defaultBilling: true, defaultShipping: false, userId: this.userInfo ? this.userInfo.id : null, businessId: this.businessId,
      fazealUserId: false, longitude: null, latitude: null, addressInstruction: this.address.addressInstruction }
      this.addAddressSuccessful = true;
      this.addAddressFail = false;
      this.dialogRef.close({ event: 'close', data: this.address });
      this.dialog.open(SucessmsgPopupComponent, {
        backdropClass: 'notificationmodal-popup-sucess',
          data: { title: 'SUCCESS', message: 'ADDRESS_UPDATE_SUCCESS_ONLY'
          }
      });
  }

  public async getAllCountries() {
    await this.addressService.getAllCountriesForBusiness().toPromise().then(
      data => {
        if (data?.data?.getAllCountries == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.countries = data?.data?.getAllCountries;
      }
    )
  }

  private async getAllStatesOfCountry(id : number) {
    await this.addressService.getAllStatesOfCountry(id).toPromise().then(
      data => {
        if (data?.data?.getAllStatesOfCountry == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.states = data?.data?.getAllStatesOfCountry;
      }
    );
  }
  private async getAllCitiesOfState(id : number) {
    await this.addressService.getAllCitiesOfState(id).toPromise().then(
      data => {
        if (data?.data?.getAllCitiesOfState == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.cities = data?.data?.getAllCitiesOfState;
      }
    );
  }

  countrySelected(country: any) {
    if (country && country.id) {
      this.cdr.detectChanges();
      this.getAllStatesOfCountry(country.id);
    }
  }

  stateSelected(state : any){
    if(state && state.id){
      this.selectedState = state;
      this.getAllCitiesOfState(state.id);
      this.cdr.detectChanges();
    }
  }

}

--- ./site-themes/four-theme/cookiesbar/cookiesbar.component.ts
+++ ./site-themes/four-theme/cookiesbar/cookiesbar.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';

\1
  standalone: true,
  selector: 'app-cookiesbar',
  templateUrl: './cookiesbar.component.html',
  styleUrls: ['./cookiesbar.component.css']
})
export class CookiesbarComponent implements OnInit {

  ShowCookiesBar: boolean = true;
  cookiesData: any;
  browserCookies = this.tokenStorage.getCookies();

  constructor(private businessSettingService: BusinessSettingService, private tokenStorage: TokenStorageService) { }

  async ngOnInit() {
    await this.getCookies();
  }

  hideCookiesBar() {
    this.cookiesData.enabled = false;
  }

  async getCookies(){
    (await this.businessSettingService.getCookiesDataByBusiness(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
       if(data?.data?.getBusinessCookiesByBusinessId != null) {
        this.cookiesData = data?.data?.getBusinessCookiesByBusinessId;
       }
      })
  }

  saveCookies(){
    this.tokenStorage.saveCookiesonBrowser(this.cookiesData?.bannerText);
    this.cookiesData.enabled = false;
  }
}

--- ./site-themes/four-theme/place-an-order/place-an-order.component.ts
+++ ./site-themes/four-theme/place-an-order/place-an-order.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, OnInit,  Renderer2, Inject } from '@angular/core';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { StorehoursComponent } from '../four-theme-checkout/storehours/storehours.component';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { TranslateService } from '@ngx-translate/core';
import { ViewStoreLocationComponent } from './view-store-location/view-store-location.component';
import { Subject, Subscription, firstValueFrom, take} from 'rxjs';
import { ActivatedRoute, Router, NavigationStart } from '@angular/router';
import { DOCUMENT } from '@angular/common';
import { environment } from 'src/environments/environment';


\1
  standalone: true,
  selector: 'app-place-an-order',
  templateUrl: './place-an-order.component.html',
  styleUrls: ['./place-an-order.component.scss']
})
export class PlaceAnOrderComponent implements OnInit {
  orderResponse!: OrderResponse;
  renderer: any;
  businessHours: any[] = [];
  businessID = Number(this.tokenStorage.getBusinessID());
  private routerSubscription!: Subscription;
  reloadSubscription!: Subscription;
  subdomain: string = '';


  constructor( @Inject(DOCUMENT) private document: Document, private renderernew: Renderer2, private router: Router,private route: ActivatedRoute,
   public dialog: MatDialog,private translate: TranslateService, private businessSettings: BusinessSettingService, private tokenStorage: TokenStorageService) { }

  ngOnInit(): void {
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.orderResponse = window.history.state.order;
    if(!this.orderResponse || this.orderResponse == null){
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);

    this.getBusinessHoursOfOperation();
    this.renderernew.addClass(this.document.body, 'thankyou-optimized');
    this.routerSubscription = this.router.events.subscribe((event) => {
      if (event instanceof NavigationStart) {
        this.renderernew.removeClass(this.document.body, 'thankyou-optimized');
      }
    });
  }


  ngOnDestroy(): void {
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    this.renderernew.removeClass(this.document.body, 'checkout-optimized');
  }


  copyOrderId() {
    const orderId = this.orderResponse?.businessOrderId;
    if (orderId) {
      navigator.clipboard.writeText(orderId).then(() => {
        this.dialog.open(SucessmsgPopupComponent, {
          backdropClass: 'notificationmodal-popup-sucess',
          data: {
            title: 'COPIED',
            message: 'ORDER_ID_IS_COPIED'
          }
        });
      }).catch(err => {
        console.error('Failed to copy order ID: ', err);
      });
    }
  }



  viewStoreHours(){
      const dialogConfig = new MatDialogConfig();
      dialogConfig.panelClass = 'modal-medium-width';
      dialogConfig.data = this.businessHours;
      this.dialog.open( StorehoursComponent, dialogConfig);
  }

  viewStoreLocation(){
    const dialogConfig = new MatDialogConfig();
      dialogConfig.panelClass = 'modal-x-medium-width';
      this.dialog.open( ViewStoreLocationComponent, dialogConfig);
  }

   getBusinessHoursOfOperation(){
    this.businessSettings.getBusinessHoursOfOperation(Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if(data?.data?.getBusinessHoursOfOperation != null){
          this.businessHours = data?.data?.getBusinessHoursOfOperation;
        }
      }
    );
   }
}

--- ./site-themes/four-theme/place-an-order/view-store-location/view-store-location.component.ts
+++ ./site-themes/four-theme/place-an-order/view-store-location/view-store-location.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, OnInit } from '@angular/core';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { Address } from 'src/app/models/address';
import { AddressService } from 'src/app/service/Address.service';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { StoreLocationModalComponent } from '../../store-location-modal/store-location-modal.component';
import { TranslateService } from '@ngx-translate/core';

\1
  standalone: true,
  selector: 'app-view-store-location',
  templateUrl: './view-store-location.component.html',
  styleUrls: ['./view-store-location.component.css']
})
export class ViewStoreLocationComponent implements OnInit {


  businessHours: any[] = [];
  businessAddresses: Address[] = [];
   businessID = Number(this.tokenStorage.getBusinessID());


  constructor(public dialog: MatDialog, private translate: TranslateService, private businessSettings: BusinessSettingService,private tokenStorage: TokenStorageService) { }

  ngOnInit() {
    this.listBusinessAddresses();
  }


   listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');

      }
    });
   }


   storelocationmodal(address: Address){
       const dialogConfig = new MatDialogConfig();
       dialogConfig.panelClass = 'store_location_modal';
       dialogConfig.data = address;
       this.dialog.open(StoreLocationModalComponent, dialogConfig);
    }


      getOpenCloseMessage(): string {
    const daysOfWeek = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
    const todayIndex = new Date().getDay();

    // Check if today is open directly
    const todayInfo = this.businessHours?.find(day => day?.days === daysOfWeek[todayIndex]);

    if (todayInfo?.isOpen === 'YES') {
      if (todayInfo?.allDay) {
        return `<p class='font-weight-500 text-black m-0'> ${this.translate.instant('TODAY')} <span class="text-success-lighter font-weight-600">${this.translate.instant('OPEN')}</span> ${this.translate.instant('FULLHOURS')} </p>`;
      } else {
        const currentTime = new Date();
        const closingTime = this.getTimeFromHours(
          todayInfo?.endingHours,
          todayInfo?.endingMinute,
          todayInfo?.amORPmEndingHours
        );

        if (currentTime < closingTime) {
          return `<p class='font-weight-500 text-black m-0'>Today <span class="text-success-lighter font-weight-600">Open</span> until ${todayInfo?.endingHours}:${todayInfo?.endingMinute} ${todayInfo?.amORPmEndingHours}</p>`;
        } else {
          // Find the next open day information starting from the day after today
          const nextOpenDayInfo = this.findNextOpenDayInfo(todayIndex + 1);
          if (nextOpenDayInfo.dayInfo) {
            return `<p class='font-weight-500 text-black m-0'> ${this.translate.instant('TODAY')} <span class="text-danger font-weight-600">  ${this.translate.instant('CLOSED')} </span>,  ${this.translate.instant('SIGNUP_NEXTBTN')}  <span class="text-success"> ${this.translate.instant('OPEN')} </span> ${nextOpenDayInfo.daysUntilOpen} ${this.translate.instant('FROM')}  ${this.formatHours(nextOpenDayInfo.dayInfo)}</p>`;
          } else {
            return `<p class='font-weight-500 text-black m-0'><span class="text-danger font-weight-600"> ${this.translate.instant('CLOSED')} </span> ${this.translate.instant('FOR_THE_WEEK')} </p>`;
          }
        }
      }
    }

    // If today is not open, check the next days
    for (let i = 1; i < daysOfWeek.length; i++) {
      const index = (todayIndex + i) % 7;
      const dayInfo = this.businessHours?.find(day => day?.days === daysOfWeek[index]);

      if (dayInfo?.isOpen === 'YES') {
        const daysUntilOpen = i === 1 ? 'Tomorrow' : daysOfWeek[index];
        if (dayInfo?.allDay) {
          return `<p class='font-weight-500 text-black m-0'>${daysUntilOpen} <span class="text-success-lighter font-weight-600">${this.translate.instant('OPEN')}</span>  ${this.translate.instant('FULLHOURS')} </p>`;
        } else {
          return `<p class='font-weight-500 text-black m-0'>${daysUntilOpen} <span class="text-success-lighter font-weight-600">${this.translate.instant('OPEN')}</span> from ${this.formatHours(dayInfo)}</p>`;
        }
      }
    }

    return `<p class='font-weight-500 text-black m-0'>
  <span class="text-danger font-weight-600">${this.translate.instant('CLOSED')}</span>
  ${this.translate.instant('FOR_THE_WEEK')}
</p>`;


  }


findNextOpenDayInfo(startIndex: number): { daysUntilOpen: string, dayInfo: any } {
    for (let i = 0; i < 7; i++) {
      const nextIndex = (startIndex + i) % 7;
      const nextDayInfo = this.businessHours?.find(day => day.days === ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'][nextIndex]);
      if (nextDayInfo && nextDayInfo.isOpen === 'YES') {
        const daysUntilOpen = i === 0 ? 'Tomorrow' : nextDayInfo.days;
        return { daysUntilOpen, dayInfo: nextDayInfo };
      }
    }
    return { daysUntilOpen: 'later this week', dayInfo: null };
  }


   getTimeFromHours(hours: string, minutes: string, period: string): Date {
    const time = new Date();
    const hours24 = period === 'PM' && +hours !== 12 ? +hours + 12 : +hours;
    time.setHours(hours24);
    time.setMinutes(+minutes);
    time.setSeconds(0);
    return time;
  }


  formatHours(dayInfo: any): string {
    return `${dayInfo?.startingHours}:${dayInfo?.startingMinute} ${dayInfo?.amORPmStartingHours} - ${dayInfo?.endingHours}:${dayInfo?.endingMinute} ${dayInfo?.amORPmEndingHours}`;
  }





}

--- ./site-themes/four-theme/four-theme-cancel-order/four-theme-cancel-order.component.ts
+++ ./site-themes/four-theme/four-theme-cancel-order/four-theme-cancel-order.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';
\1
  standalone: true,
  selector: 'app-four-theme-cancel-order',
  templateUrl: './four-theme-cancel-order.component.html',
  styleUrls: ['./four-theme-cancel-order.component.scss']
})
export class FourThemeCancelOrderComponent implements OnInit {
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  constructor() { }

  ngOnInit(): void {
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

}

--- ./site-themes/four-theme/four-theme-write-edit-reviews/four-theme-write-edit-reviews.component.ts
+++ ./site-themes/four-theme/four-theme-write-edit-reviews/four-theme-write-edit-reviews.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';

\1
  standalone: true,
  selector: 'app-four-theme-write-edit-reviews',
  templateUrl: './four-theme-write-edit-reviews.component.html',
  styleUrls: ['./four-theme-write-edit-reviews.component.scss']
})
export class FourThemeWriteEditReviewsComponent implements OnInit {
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  constructor() { }

  ngOnInit(): void {
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

}

--- ./site-themes/four-theme/track-order/track-order.component.ts
+++ ./site-themes/four-theme/track-order/track-order.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DrawerControlService } from 'src/app/service/drawer-control.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-track-order',
  templateUrl: './track-order.component.html',
  styleUrls: ['./track-order.component.scss']
})
export class TrackOrderComponent implements OnInit {

  businessOrderId: string = '';
  email: string = '';
  subdomain: string = '';
  user = this.tokenStorage.getUser();
  businessId = Number(this.tokenStorage.getBusinessID()!);
  sessionResponse!: SessionResponse;

  constructor(public shoppingCart: ShoppingCartService,private drawerControlService: DrawerControlService, private route: ActivatedRoute, private router: Router, public dialog: MatDialog,
    private tokenStorage: TokenStorageService,private cookieDate: CookieDataServiceService,
  ) {
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }
  }

  ngOnInit(): void {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }


  async getOrderTracking(){
      (await this.shoppingCart.getOrderTracking(this.businessOrderId.trim(), this.email.trim())).subscribe(
        data => {
          if(data?.errors){
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: '', message: data?.errors[0]?.errorMessage}
            });
            return;
          }
          if(data?.data?.getOrderTracking){
            if(this.sessionResponse.userType !== 'FAZEAL_REGISTERED' && this.sessionResponse.userType !== 'STORE_REGISTERED'){
              this.sessionResponse = new SessionResponse();
              this.sessionResponse.id = 1;
              this.sessionResponse.userType = 'GUEST';
              this.cookieDate.setCookie(this.businessId!.toString(), JSON.stringify(this.sessionResponse), 1);
            }
            const order = data?.data?.getOrderTracking;
            const orderId = data?.data?.getOrderTracking.id;
            if (environment.env !== 'local') {
              this.subdomain = '';
            }
            const url = `/${this.subdomain}/order-details/${orderId}`;
            this.tokenStorage.saveOrderForOrderDetails(order);
            this.router.navigateByUrl(url, {state: {order: order, orderhistory: true}});
          }
        }
      )
  }

  openUserProfileDrawerAndDropdown() {
    this.drawerControlService.triggerOpenDrawer();
    this.drawerControlService.triggerOpenDropdown();
  }


}

--- ./site-themes/four-theme/four-checkout-without-login/four-checkout-without-login.component.ts
+++ ./site-themes/four-theme/four-checkout-without-login/four-checkout-without-login.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit, ViewChild } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { SignupModalCheckoutComponent } from '../signup-modal-checkout/signup-modal-checkout.component';
import { StoreLocationModalComponent } from '../store-location-modal/store-location-modal.component';
import { DeleteGuestContactInfoComponent } from '../delete-guest-contact-info/delete-guest-contact-info.component';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { Subscription, firstValueFrom } from 'rxjs';
import { ActivatedRoute, Router } from '@angular/router';
import { AbstractControl, FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';
import { Address } from 'src/app/models/address';
import { OrderIdFormatResponse } from 'src/app/models/OrderIdFormatResponse';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { GuestShoppingCartService } from 'src/app/service/guest-shopping-cart.service';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { environment } from 'src/environments/environment';
import { formatDate } from '@angular/common';
import { creditCardType } from '../four-theme-checkout/four-theme-checkout.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { DataService } from 'src/app/service/data.service';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { AddressService } from 'src/app/service/Address.service';
import { ShippingResponse } from 'src/app/models/ShippingResponse';
import { ForgotpasswordcheckoutComponent } from 'src/app/forgotpasswordcheckout/forgotpasswordcheckout.component';

\1
  standalone: true,
  selector: 'app-four-checkout-without-login',
  templateUrl: './four-checkout-without-login.component.html',
  styleUrls: ['./four-checkout-without-login.component.scss']
})
export class FourCheckoutWithoutLoginComponent implements OnInit {
  setaddress: any;
  update_contact_info: boolean = false;
  list_contact_info: boolean = false;
  sameasshippingtwo: any = "same as shipping";
  sameasshipping: any;
  activeColumn: number = 1;
  searchText: string = '';
  phoneCode: number = 1;
  activepayment_two: any = 'cashondelivery';
  anotherform: boolean = false;
  paymentcard: boolean = false;
  paymentcard_two: boolean = false;
  paymenttypecard: boolean = false;
  paymenttypecardradiotwo: boolean = false;
  activeMeAnother: string = 'me';
  activepayment: string = 'cashondelivery';
  cardpayment: string = 'visacard';
  shippingaddress: string = 'addnewaddress';
  activepaymentradiotwo: string = 'cashondeliveryradiotwo';
  cardpaymentradiotwo: string = 'visacardradiotwo';
  paymentcardradiotwo: boolean = false;
  paymenttypecardradiothree: boolean = false;
  paymentcardradiothree: boolean = false;
  cardpaymentradiothree: string = 'visacardradiothree';
  activepaymentradiothree: string = 'cashondeliveryradiothree';
  showPassword: boolean = false;

  add_address_shipping: any = true;
  update_address_shipping: any = false;
  list_shipping_info: any = false;
  mapselect: boolean = true;
  addressForm!: FormGroup;
  billingaddressForm!: FormGroup;

  form: any = {};
  errorMessage = '';
  isLoggedIn = false;
  isLoginFailed = false;
  user: any = {};
  fzealUserTxt: string = '';
  fzealPassTxt: string = '';
  userTypeShow: boolean = true;
  // @ViewChild(AgmMap) map!: AgmMap;

  address: string | undefined = '';
  latitude: number = 0;
  longitude: number = 0;
  zoom: number = 5;
  // searchResults: google.maps.places.PlaceResult[] = [];
  markerLatitude: number = 0;
  markerLongitude: number = 0;
  mapClickListener: any
  mappp: any
  guestInfo: any = {};
  addressDTO: Address = new Address();
  countrytext:boolean=true;
  selectedcode:boolean=false;
  cardForm!: FormGroup;
  orderIdFormat!: OrderIdFormatResponse;
  pickupPerson!: string;
  pickupDetails!: FormGroup;
  subdomain!: string;
  currencySymbol ='$';
  orderType!: string;
  paymentMethod!: string;
  businessAddresses: Address[] = [];
  tax = 0.0;
  surcharges = 0.0;
  shippingTax = 0.0;
  isSubmitted = false;
  businessId = Number(this.tokenStorage.getBusinessID());
  shoppingCart!: ShoppingCartResponse;
  private cartSubscription: Subscription | undefined;
  awsURL = environment.awsKey;
  totalShippingRate = 0;
  cardType!: string;
  buttonDisabled = false;
  isPromoExist: boolean = false;
  message!: string;
  orderResponse!: OrderResponse;
  selectedAddress!: Address;
  shippingNotAvailable = false;
  shippingRates: ShippingResponse[] = [];
  selectedShippingRates!: ShippingResponse;
  orderOnlinePickupFromStore = true;
  orderOnlineShipHome = true;
  reserveOnlineOrTryInStore = true;
  BillingAddressBox: boolean = false;
  BillingAddressBoxNew: boolean = false;

  constructor(
    public dialog: MatDialog,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private fb: FormBuilder,
    private router:Router,
    private route: ActivatedRoute,
    private businessSettings: BusinessSettingService,
    private guestShoppingCartService: GuestShoppingCartService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    private catalogService: CatalogServiceService,
    private addressService: AddressService
  ) { }

  ngOnInit(): void {
    this.checkUserType();
    this.initForm();
    this.checkLoginUser();
    this.listBusinessAddresses();
    this.getOrderIdFormatByBusinessId()
 //   this.getLocation();
    this.getCheckOutTypeById();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }
  checkLoginUser(){
    const sessionstorage = sessionStorage.getItem('auth-user');
    const currentUrl = this.router.url;
    const segments = currentUrl.split('/');
    const lastSegment = segments[segments.length - 1];
    if (sessionstorage && lastSegment === 'checkout-guest') {
      this.router.navigate([`${segments[1]}/checkout`]);
    }else{
      this.router.navigate([`${segments[1]}/checkout-guest`]);
    }
  }
  checkUserType(): void {
    const storedGuestInfo = sessionStorage.getItem('guestInfo');
    if (this.tokenStorage.getUser()) {
      this.userTypeShow = false;
    } else if (storedGuestInfo) {
      this.guestInfo = JSON.parse(storedGuestInfo);
      this.listUserCartItems();
      this.userTypeShow = false;
    }
  }

  getCheckOutTypeById() {
    this.businessSettings.getCheckOutTypeById(Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if(data.data.getCheckOutTypeById){
          this.orderOnlinePickupFromStore = data.data.getCheckOutTypeById.orderOnlinePickupFromStore;
          this.orderOnlineShipHome = data.data.getCheckOutTypeById.orderOnlineShipHome;
          this.reserveOnlineOrTryInStore = data.data.getCheckOutTypeById.reserveOnlineOrTryInStore;
          if(!this.orderOnlinePickupFromStore){
            this.setActiveColumn(2);
          }
          if(!this.orderOnlineShipHome){
            this.setActiveColumn(3);
          }
        }
      });
   }

  async listUserCartItems(){
    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        this.shoppingCart = data.data.listUserCartItems;
        this.shoppingCart.totalPromoitionDiscount = this.shoppingCart.orderLevelPromotionResponses.map(promo => promo.discountAmount).reduce((acc, num) => acc + num, 0);
      }
    );
   }


  setActiveColumn(columnNumber: number) {
    this.activeColumn = columnNumber;
  }

  signupmodal() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'signup_modal_checkout';
    this.dialog.open(SignupModalCheckoutComponent, dialogConfig);
  }

  storelocationmodal() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'store_location_modal';
    this.dialog.open(StoreLocationModalComponent, dialogConfig);
  }

  deletepopup() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'delete_modal';
    this.dialog.open(DeleteGuestContactInfoComponent, dialogConfig)
    .afterClosed().subscribe(result => {
      if(result){
        this.addressDTO = new Address();
        this.addressForm.reset();
        this.searchText = '';
        this.list_shipping_info = false;
        this.add_address_shipping = true;
        this.shippingNotAvailable = true;
      }
    });
  }

  anotherstep(step:any,columnText: string, pickupPerson: string){
    this.anotherform = step;
    this.activeMeAnother = columnText;
    this.pickupPerson = pickupPerson;
  }

  selectMobileCode(list: any) {
    this.phoneCode = list.code;
    this.countrytext = false;
    this.selectedcode = true;
  }

  onMenuItemClick(event: MouseEvent): void {
    event.stopPropagation();
  }
  onMenuClosedCountry() {
    this.searchText = '';
  }

  paymentmethodcard_one(payment: any, columnText: string) {
    this.paymentcard = payment;
    this.activepayment = columnText;
    if(columnText == 'cashondelivery') {
      this.BillingAddressBox = false;
    }
    if(columnText == 'creditcard') {
      this.BillingAddressBox = true;
    }
  }
  paymentmethodcard_two(payment: any, columnText: string) {
    this.paymentcard_two = payment;
    this.activepayment_two = columnText;
    if(columnText == 'cashondelivery') {
      this.BillingAddressBoxNew = false;
    }
    if(columnText == 'creditcard') {
      this.BillingAddressBoxNew = true;
    }
  }

  paymentmethodcardRadioTwo(payment: any, columnText: string) {
    this.paymentcardradiotwo = payment;
    this.activepaymentradiotwo = columnText;
  }

  paymentmethodcardRadioThree(payment: any, columnText: string) {
    this.paymentcardradiothree = payment;
    this.activepaymentradiothree = columnText;
  }

  paymenttype(paymentcard: any, columnText: string) {
    this.paymenttypecard = paymentcard;
    this.cardpayment = columnText;
  }

  shipping_address_one(shipping: any) {
    this.sameasshipping = shipping;
    this.mapselect = true;
 //   this.getLocation()
    this.initForm()
  }

  billig_address_one(shipping: any) {
    this.sameasshipping = shipping;
    this.mapselect = true;
 //  this.getLocation()
    this.initForm()
  }

  initForm() {
    this.addressForm = this.fb.group({
      country: [this.addressDTO.country],
      state: [this.addressDTO.state],
      city: [this.addressDTO.city],
      zipcode: [this.addressDTO.zipCode],
      phoneNumber: [this.addressDTO.phoneNumber],
      streetNumber: [this.addressDTO.streetNumber],
      poBox: [this.addressDTO.poBox],
      formattedAddress: [this.addressDTO.addressLine1],
    });
    this.billingaddressForm = this.fb.group({
      country: [this.addressDTO.country],
      state: [this.addressDTO.state],
      city: [this.addressDTO.city],
      zipcode: [this.addressDTO.zipCode],
      phoneNumber: [this.addressDTO.phoneNumber],
      streetNumber: [this.addressDTO.streetNumber],
      poBox: [this.addressDTO.poBox],
      formattedAddress: [this.addressDTO.addressLine1],
    });
    this.cardForm = this.fb.group({
      nameOnCard: ['', [Validators.required]],
      cardNumber: ['', [Validators.required]],
      expMonth: ['', [Validators.required]],
      expYear: ['', [Validators.required]],
      cvc: ['']
    });
    this.pickupDetails = this.fb.group({
      pickupDate: ['', [Validators.required]],
      firstName: ['', [Validators.required]],
      lastName: ['', [Validators.required]],
      email: ['', [Validators.required]],
      phoneNumber: ['', [Validators.required]]
    });
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.orderType = 'ORDER_ONLINE_PICK_IN_STORE';
    this.paymentMethod = 'COD';
    this.pickupPerson = 'FAZEAL_CUSTOMER';
  }


  billing_address_two(shipping: any) {
    this.sameasshippingtwo = shipping;
  }

  addcontactinfo() {
    this.anotherform = false;
    this.update_contact_info = false;
    this.list_contact_info = true;
  }
  editcontactinfo() {
    this.anotherform = false;
    this.list_contact_info = false;
    this.update_contact_info = true;
  }

  updatecontactinfo() {
    this.anotherform = false;
    this.update_contact_info = false;
    this.list_contact_info = true;
  }

  cancelupdateinfo() {
    this.anotherform = false;
    this.update_contact_info = false;
    this.list_contact_info = true;
  }

  setActiveAddress(address:Address){
    this.setaddress = address.addressId;
    this.selectedAddress = address;
    this.totalShippingRate = 0;
    this.shippingTax = 0;
    this.generateTaxRate();
    this.generateSurcharges();
    // if(this.userAddresses.map(address => address.addressId).includes(this.selectedAddress.addressId)){
    //   this.getListOfBusinessShippingRates();
    // }
  }

  generateTaxRate(){
    this.addressService.getTaxByCityAndStateAndZipCode(this.businessId, 'SALE_TAX', this.selectedAddress.city, this.selectedAddress.state,
    this.selectedAddress.zipCode).subscribe(
      data => {
        console.log(data);
        if(data.data.getTaxByCityAndStateAndZipCode != null){
          const taxRate = data.data.getTaxByCityAndStateAndZipCode.taxRate;
          this.tax = this.shoppingCart ? this.shoppingCart.totalPrice * (taxRate/100): 0;
          console.log(this.tax)
        }
      }
    );
  }

  generateSurcharges(){
    this.addressService.getTaxByCityAndStateAndZipCode(this.businessId, 'SURCHARGE', this.selectedAddress.city, this.selectedAddress.state,
    this.selectedAddress.zipCode).subscribe(
      data => {
        console.log(data);
        if(data.data.getTaxByCityAndStateAndZipCode != null){
          const surcharges = data.data.getTaxByCityAndStateAndZipCode.taxRate;
          this.surcharges = this.shoppingCart? this.shoppingCart.totalPrice * (surcharges/100): 0;
        }
      }
    );
  }

  generateShippingTax(){
    this.addressService.getTaxByCityAndStateAndZipCode(this.businessId, 'SHIPPING_TAX', this.selectedAddress.city, this.selectedAddress.state,
    this.selectedAddress.zipCode).subscribe(
      data => {
        if(data.data.getTaxByCityAndStateAndZipCode != null){
          const shippingTax = data.data.getTaxByCityAndStateAndZipCode.taxRate;
          this.shippingTax = this.totalShippingRate * (shippingTax/100);
        }
      }
    );
  }

  addshippinginfo() {
    this.add_address_shipping = false;
    this.update_address_shipping = false;
    this.list_shipping_info = true;
  }

  editshippinginfo() {
    this.add_address_shipping = false;
    this.update_address_shipping = true;
    this.list_shipping_info = false;
  }

  updateshippinginfo() {
    this.add_address_shipping = false;
    this.update_address_shipping = false;
    this.list_shipping_info = true;
    sessionStorage.setItem('guestAddress', JSON.stringify(this.addressDTO))
  }

  cancleshippinginfo() {
    this.add_address_shipping = true;
    this.update_address_shipping = false;
    this.list_shipping_info = true;
  }

  async loginFazealUser() {
    const username = this.fzealUserTxt.trim()
    const password = this.fzealPassTxt.trim()
    const loginData = await firstValueFrom(this.authService.login(username, password, "SOCIAL", this.businessId, this.tokenStorage.getRememberMe()));
    if (loginData?.errors && loginData?.errors[0]?.errorMessage) {
      this.errorMessage = loginData?.errors[0].errorMessage.replace('/]/[', '')
      this.isLoginFailed = true;
      this.userTypeShow = true
      return
    }
    const data = loginData.data.authenticateUser;
    this.authService.setLoggedIn();
    this.setUser(data);

    this.isLoggedIn = true;
    this.isLoginFailed = false;

    this.tokenStorage.saveToken(data.accessToken);
    this.tokenStorage.saveRefreshToken(data.refreshToken);
    this.tokenStorage.saveUser(this.user, true);

    window.location.reload();
    this.userTypeShow = false
  }

  setUser(data: any): void {
    this.authService.setLoggedIn();
    this.user = {
      firstName: data.firstName,
      lastName: data.lastName,
      username: data.username,
      id: data.id,
      profilePicture: data.profile,
      coverPhoto: data.cover
    };
    this.isLoggedIn = true;
    this.isLoginFailed = false;
  }

  continueAsGuest(guestForm: NgForm) {
    if (guestForm.invalid) {
      return;
    }
    this.guestInfo = {
      firstName: guestForm.value.firstName,
      lastName: guestForm.value.lastName,
      email: guestForm.value.email,
      phoneNumber: guestForm.value.phoneNumber
    };
    sessionStorage.setItem('guestInfo', JSON.stringify(this.guestInfo));
    guestForm.reset();
    this.userTypeShow = false;
    this.checkUserType();
  }

  togglePasswordVisibility() {
    this.showPassword = !this.showPassword;
  }

  updateLocationDetails(place: any) {
    this.address = place.formatted_address;
    this.latitude = place.geometry?.location.lat() || 0;
    this.longitude = place.geometry?.location.lng() || 0;
    this.searchText = place.formatted_address;
    this.markerLatitude = this.latitude;
    this.markerLongitude = this.longitude;
  }

  placeChangedCallback(place: any) {
    this.updateLocationDetails(place);
    this.addressForm.get("formattedAddress")?.setValue(place.formatted_address)
    this.populateAddressFields(place.address_components);
  }

  populateAddressFields(addressComponents: any[]) {
    this.addressForm.get('country')?.setValue('');
    this.addressForm.get('state')?.setValue('');
    this.addressForm.get('city')?.setValue('');
    this.addressForm.get('zipcode')?.setValue('');
    this.addressForm.get('streetNumber')?.setValue('');

    addressComponents.forEach(component => {
      switch (component.types[0]) {
        case 'country':
          this.addressForm.get('country')?.setValue(component.long_name);
          this.addressDTO.country = component.long_name;
          break;
        case 'administrative_area_level_1':
          this.addressForm.get('state')?.setValue(component.long_name);
          this.addressDTO.state = component.long_name;
          break;
        case 'locality':
          this.addressForm.get('city')?.setValue(component.long_name);
          this.addressDTO.city = component.long_name;
          break;
        case 'postal_code':
          this.addressForm.get('zipcode')?.setValue(component.long_name);
          this.addressDTO.zipCode = component.long_name;
          break;
        case 'route':
          this.addressForm.get('streetNumber')?.setValue(component.long_name);
          this.addressDTO.streetNumber = component.long_name;
          break;
      }
    });
    this.getListOfBusinessShippingRates(this.addressForm.get('city')?.value);


  }

  getOrderIdFormatByBusinessId(){
    this.catalogService.getOrderIdFormatByBusinessId(Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if(data.data.getOrderIdFormatByBusinessId != null){
          this.orderIdFormat = data.data.getOrderIdFormatByBusinessId;
        }
      }
    );
   }

  setActiveShippingRate(rate: ShippingResponse){
    this.totalShippingRate = 0;
    this.selectedShippingRates = rate;
    let products:{productId: number, skuId: number|null}[] = [];
    this.shoppingCart.cartItemResponseList.forEach(item =>
      products.push({productId: item.productId, skuId: item.skuId? item.skuId: null})
      );
    this.addressService.getEstimateShipping(rate.id, null, null, this.selectedAddress.streetNumber + ' ' + this.selectedAddress.addressLine1+ ', ' +
      this.selectedAddress.state + ', '+ this.selectedAddress.city + ' ' + this.selectedAddress.zipCode + ', '+ this.selectedAddress.country,
      products, this.businessId).subscribe( data => {
        console.log(data);
        if(data.data.getEstimateShipping){
          this.totalShippingRate = data.data.getEstimateShipping.shippingRate;
          if(this.totalShippingRate > 0){
            this.generateShippingTax();
          }
        }
      });
  }

  getListOfBusinessShippingRates(state: string){
    this.shippingNotAvailable = false;
    this.addressService.listAllShippingRatesByStateNameAndBusinessId(this.businessId, state)
    .subscribe(data => {
      console.log(data)
      if(data.data.listAllShippingRatesByStateNameAndBusinessId){
        this.shippingRates = data.data.listAllShippingRatesByStateNameAndBusinessId;
        if(this.shippingRates.length == 0){
          this.shippingNotAvailable = true;
        }else{
          this.setActiveAddress(this.selectedAddress);
        }
      }
    });
  }


  // mapReadyHandler(map: any): void {
  //   this.mappp = map;
  //   this.mapClickListener = this.mappp.addListener('click', (event: google.maps.MouseEvent) => {
  //     this.markerLatitude = event.latLng.lat()
  //     this.markerLongitude = event.latLng.lng()
  //     const geocoder = new google.maps.Geocoder();
  //     geocoder.geocode({ location: event.latLng }, (results, status) => {
  //       if (status === 'OK' && results[0]) {
  //         console.log(results[0])
  //         this.updateLocationDetails(results[0]);
  //         this.addressForm.get("formattedAddress")?.setValue(results[0].formatted_address)
  //         this.addressDTO.addressDescription = results[0].formatted_address;
  //         this.populateAddressFields(results[0].address_components);
  //       } else {
  //         console.error('Geocoder failed due to: ' + status);
  //       }
  //     });
  //   });
  // }

  // onMarkerDragEnd(event: any): void {
  //   this.markerLatitude = event.latLng.lat();
  //   this.markerLongitude = event.latLng.lng();
  //   this.latitude = this.markerLatitude;
  //   this.longitude = this.markerLongitude;

  //   const geocoder = new google.maps.Geocoder();
  //   const latlng = { lat: this.latitude, lng: this.longitude };
  //   geocoder.geocode({ location: latlng }, (results, status) => {
  //     if (status === 'OK') {
  //       if (results[0]) {
  //         this.updateLocationDetails(results[0]);
  //         this.addressForm.get("formattedAddress")?.setValue(results[0].formatted_address)
  //         this.populateAddressFields(results[0].address_components);
  //       } else {
  //         console.error('No results found');
  //       }
  //     } else {
  //       console.error('Geocoder failed due to: ' + status);
  //     }
  //   });
  // }

  // getLocation() {
  //   if (navigator.geolocation) {
  //     navigator.geolocation.getCurrentPosition(
  //       (position) => {
  //         this.latitude = position.coords.latitude;
  //         this.longitude = position.coords.longitude;
  //         this.markerLatitude = position.coords.latitude;
  //         this.markerLongitude = position.coords.longitude;
  //         this.zoom = this.zoom;

  //         const geocoder = new google.maps.Geocoder();
  //         const latlng = { lat: this.latitude, lng: this.longitude };
  //         geocoder.geocode({ location: latlng }, (results, status) => {
  //           if (status === 'OK') {
  //             if (results[0]) {
  //               this.updateLocationDetails(results[0]);
  //               this.addressForm.get("formattedAddress")?.setValue(results[0].formatted_address)
  //               this.populateAddressFields(results[0].address_components);
  //             } else {
  //               console.error('No address found for the location.');
  //             }
  //           } else {
  //             console.error('Geocoder failed due to: ' + status);
  //           }
  //         });
  //       },
  //       (error) => {
  //         console.error('Error getting location:', error);
  //       }
  //     );
  //   } else {
  //     console.error('Geolocation is not supported by this browser.');
  //   }
  // }

  countries = [
    { name: 'Jordan', flag: 'JO',code: '400'  },
    { name: 'Saudi Arabia', flag: 'SA' ,code: '682'},
    { name: 'United States', flag: 'US' ,code: '840'},
    { name: 'Canada', flag: 'CA',code: '124' },
    { name: 'United Kingdom', flag: 'GB', code: '826' },
    // Add more countries as needed
  ];

  toggleAddressInfo(show: any, orderType: string){
    this.tax = 0;
    this.surcharges = 0;
    if(orderType == 'ORDER_ONLINE_PICK_IN_STORE'){
      if(this.businessAddresses.length > 0){
        this.setActiveAddress(this.businessAddresses[0]);
      }
    }else if(orderType == 'ORDER_ONLINE_SHIP_TO_HOME'){
      this.tax = 0;
      this.surcharges = 0;
    }else if(orderType == 'RESERVE_ONLINE_TRY_IN_STORE'){
      if(this.businessAddresses.length > 0){
        this.setActiveAddress(this.businessAddresses[0]);
      }
    }
    this.orderType = orderType;
  }

  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data.data.getBusinessAddressesByBusinessId){
        this.businessAddresses = data.data.getBusinessAddressesByBusinessId;
        this.businessAddresses = this.businessAddresses.filter(address => address.addressType == 'STORE');
        if(this.businessAddresses.length > 0){
          this.setActiveAddress(this.businessAddresses[0]);
        }
      }
    });
   }

   get getControl(): { [key: string]: AbstractControl; } {
    return this.pickupDetails.controls;
  }

  get getCardControl(): { [key: string]: AbstractControl; } {
    return this.cardForm.controls;
  }

  togglePickupPerson(show: any, pickupPerson: string){
    this.pickupPerson = pickupPerson;
  }

  toggleCreditInfo(show: any, paymentMethod: string){
    this.paymentMethod = paymentMethod;
  }

  placeOrder(){
    this.isSubmitted = true;
    if(this.orderType == null){
      this.errorMessage = 'Please Select Order Type';
      setTimeout(() => {
        this.errorMessage = '';
         }, 2000);
      return;
    }
    if(this.orderType == 'ORDER_ONLINE_SHIP_TO_HOME' && !this.addressDTO.state){
      this.errorMessage = 'Please Select Shipping Address';
      setTimeout(() => {
        this.errorMessage = '';
         }, 2000);
      return;
    }
    if(this.paymentMethod == null){
      this.errorMessage = 'Please Select Payment Method';
      setTimeout(() => {
        this.errorMessage = '';
         }, 2000);
      return;
    }
    const format = 'yyy-MM-ddTHH:mm:ss';
    const locale = 'en-US';
    const pichkpTime = this.pickupDetails.get('pickupDate')!.value != '' ? formatDate(this.pickupDetails.get('pickupDate')!.value, format, locale): '';
    const firstName = this.pickupDetails.get('firstName')!.value;
    const lastName = this.pickupDetails.get('lastName')!.value;
    const email = this.pickupDetails.get('email')!.value;
    const phoneNumber = this.pickupDetails.get('phoneNumber')!.value;
    const nameOnCard = this.cardForm.get('nameOnCard')?.value;
    const cardNumber = this.cardForm.get('cardNumber')?.value;
    const expMonth = this.cardForm.get('expMonth')?.value;
    const expYear = this.cardForm.get('expYear')?.value;
    const cvc = this.cardForm.get('cvc')?.value;
    if(cardNumber != ''){
      this.checkCardType();
    }
    let address = new Address();
    address.addressLine1 = this.addressForm.get('formattedAddress')?.value;
    address.country = this.addressForm.get('country')?.value;
    address.city = this.addressForm.get('city')?.value;
    address.state = this.addressForm.get('state')?.value;
    address.zipCode = this.addressForm.get('zipcode')?.value;
    address.streetNumber = this.addressForm.get('streetNumber')?.value;
    address.firstName = this.guestInfo.firstName;
    address.lastName = this.guestInfo.lastName;
    address.phoneNumber = this.guestInfo.phoneNumber;
    address.email = this.guestInfo.email;
    this.buttonDisabled = true;
    this.shoppingCartService.placeGuestOrder(Number(this.tokenStorage.getBusinessID()), this.paymentMethod,
       this.orderType,  this.orderIdFormat.lastOrderId + 1,
      this.pickupPerson, pichkpTime, firstName, lastName, email, phoneNumber,
      cardNumber, expMonth, expYear, cvc, this.cardType, this.tax, this.surcharges,address, this.shoppingCart.cartItemResponseList).subscribe(
        data => {
          console.log(data)
          if(data.data.placeGuestOrder != null){
            this.message = data.data.placeGuestOrder.message;
            this.orderResponse = data.data.placeGuestOrder.data;
            this.guestShoppingCartService.emptyCart();

            this.dataService.notifyOther({refresh: true});
            this.catalogService.updateLastOrderId(Number(this.tokenStorage.getBusinessID())).subscribe(
              data => {
              }
            );
            setTimeout(() => {
              this.router.navigateByUrl(this.subdomain + '/place-an-order',{state: {order: this.orderResponse, orderFormat: this.orderIdFormat }});
               }, 3000);
          }else {
            this.errorMessage = data.errors[0].errorMessage;
            this.buttonDisabled = false;
            setTimeout(() => {
              this.errorMessage = '';
               }, 3000);
          }
        }
      );
  }

  checkCardType(){
    this.cardType = creditCardType(this.cardForm.get('cardNumber')!.value)!;
  }

  forgotPassword() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(ForgotpasswordcheckoutComponent,{ panelClass: 'modal-medium-width' });
  }

}

--- ./site-themes/four-theme/browser-history/browser-history.component.ts
+++ ./site-themes/four-theme/browser-history/browser-history.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { environment } from 'src/environments/environment';
import { Component, HostListener, OnInit } from '@angular/core';
import { CurrencyResponse } from 'src/app/models/CurrencyResponse';
import { PdpContent } from 'src/app/models/PdpContent';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ProductService } from 'src/app/service/product.service';
import { GuestFavoriteService } from 'src/app/service/guest-favorite.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { DataService } from 'src/app/service/data.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { PdpQuickViewComponent } from '../pdp-quick-view/pdp-quick-view.component';
import { ActivatedRoute, Router } from '@angular/router';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';

\1
  standalone: true,
  selector: 'app-browser-history',
  templateUrl: './browser-history.component.html',
  styleUrls: ['./browser-history.component.scss']
})
export class BrowserHistoryComponent implements OnInit {
  pdpResponse!: PdpContent;
  product!: ProductResponse;
  businessId: number = Number(this.tokenStorageService.getBusinessID())
  pageNum: number = 1;
  sortField: string = 'addedDate';
  sortDir: string = 'desc';
  historyProductsInfo: ProductBrowseHistory[] = []
  currency!: CurrencyResponse;
  awsUrl = environment.awsKey;
  loading: boolean = false;
  AlwaysShow: boolean = true;
  userWishlists: WishListResponse[] = [];
  subdomain = '';
  sessionResponse!: SessionResponse;
  user = this.tokenStorageService.getUser();
  filterType: string = 'ALL';
  canLoadMoreData = true;
  noOfPages!: number;
  themeName: string = 'FourthTheme';
  firstTimeCalled: boolean = false;

  constructor(
    private route: ActivatedRoute,
    private productService: ProductService,
    private tokenStorageService: TokenStorageService,
    private guestFavoriteService: GuestFavoriteService,
    private wishlistService: WhishlistService,
    public dialog: MatDialog,
    private dataService: DataService,
    private cookieService: CookieDataServiceService,private router: Router,
  ) {
    if(this.businessId &&  cookieService.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieService.getCookie(this.businessId!.toString()));
    }
  }

  ngOnInit(): void {
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    if(!this.user){
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      this.router.navigate([this.subdomain+'/home']);
    }
    this.currency = this.tokenStorageService.getCurrency();
    this.getThemeName();
    this.loadHistory();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  filterProducts(filterType: any){
    this.filterType = filterType;
    this.historyProductsInfo = [];
    this.canLoadMoreData = true;
    this.loadHistory();
  }

  async loadHistory(): Promise<void> {
    this.loading = true;
    (await this.productService.listUserProductsBrowseHistory(
      this.businessId, 1, 8, this.sortField, this.sortDir, this.filterType)).subscribe(response => {
        if (response?.errors) {
          this.loading = false;
          return;
        }
        const formattedProducts = response?.data?.listUserProductsBrowseHistory?.map((historyItem: { productResponse: { price: string; salePrice: string; }; }) => {
          return {
            ...historyItem,
            productResponse: {
              ...historyItem.productResponse,
              price: historyItem.productResponse.price ? +parseFloat(historyItem.productResponse.price).toFixed(2) : null,
              salePrice: historyItem.productResponse.salePrice ? +parseFloat(historyItem.productResponse.salePrice).toFixed(2) : null
            }
          };
        });

        this.historyProductsInfo = [...this.historyProductsInfo, ...formattedProducts];
        if(this.sessionResponse.userType !== "GENERIC"){
          this.setFavItems();
        }
        this.loading = false;
      });
  }

  async addItemToFovarite(product: ProductResponse) {
    if (!this.tokenStorageService.getUser()) {
      product.addedToWishlist = true
      this.guestFavoriteService.addToFavorite(product)
      return
    }
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
      data => {
        if (data?.data?.addItemToWishList != null) {
          product.addedToWishlist = true;
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess',
            data: { title: '', message: data?.data?.addItemToWishList?.message } });
            this.firstTimeCalled = false;
          this.dataService.notifyOther({ refresh: true });
        } else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
  }

  async setFavItems() {
    if (this.tokenStorageService.getUser()) {
      (await this.wishlistService.getCustomerWishList()).subscribe(
        data => {
          this.userWishlists = data?.data?.getCustomerWishList;
          this.historyProductsInfo?.forEach(product => {
            if (this.userWishlists.map(fav => fav.itemId).includes(product?.productResponse?.id)) {
              product.productResponse.addedToWishlist = true;
            }
          })
        }
      );
    }
  }


  async removeItemFromFovarite(product: ProductResponse) {
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
      data => {
        if (data?.data?.removeItemFromWishList != null) {
          product.addedToWishlist = false;
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess',
            data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
            this.firstTimeCalled = false;
        } else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
  }

  async loadMoreProductsBrowseHistory() {
    if (this.loading || this.pageNum === this.noOfPages) {
      return;
    }
    this.loading = true;
    (await this.productService.listUserProductsBrowseHistory(this.businessId, this.pageNum + 1, 8, this.sortField, this.sortDir, this.filterType)).subscribe(
      (data) => {
        if (data && data?.data && data?.data?.listUserProductsBrowseHistory) {
          const formattedProducts = data?.data?.listUserProductsBrowseHistory?.map((historyItem: { productResponse: { price: string; salePrice: string; }; }) => {
            return {
              ...historyItem,
              productResponse: {
                ...historyItem.productResponse,
                price: historyItem.productResponse.price ? +parseFloat(historyItem.productResponse.price).toFixed(2) : null,
                salePrice: historyItem.productResponse.salePrice ? +parseFloat(historyItem.productResponse.salePrice).toFixed(2) : null
              }
            };
          });
          if (formattedProducts?.length > 0) {
            for (const audit of formattedProducts) {
              if (!this.historyProductsInfo?.some((existingAudit) => existingAudit.id === audit.id)) {
                this.historyProductsInfo.push(audit);
              }
            }
            this.noOfPages = data?.data?.listUserProductsBrowseHistory[0]?.noOfPages;
            this.pageNum++;
          } else {
            this.canLoadMoreData = false;
          }
          this.loading = false;
        } else {
          this.loading = false;
        }
      },
      (error) => {
        this.loading = false;
      }
    );
  }

  @HostListener('window:scroll', ['$event'])
  onScroll(event: any): void {
    const scrollPosition = window.pageYOffset + window.innerHeight;
    const pageHeight = document.documentElement.scrollHeight;
    const distanceToBottom = pageHeight - scrollPosition;
    if (distanceToBottom < 100 && this.canLoadMoreData) {
      this.loadMoreProductsBrowseHistory();
    }
  }

  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
}

getThemeName(): void {
  let storeKey;
  if(environment.env !== 'local'){
    storeKey = window.location.hostname;
  } else {
    const path = window.location.pathname;
    storeKey = path.split('/')[1];
  }

  const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}

}

export interface ProductBrowseHistory {
  id: string;
  customerId: string;
  businessId: string;
  addedDate: string;
  productResponse: ProductResponse;
}

export interface ProductResponse {
  id: number;
  productName: string;
  mainImageUrl: string;
  quantity: number;
  price: number;
  salePrice: number;
  averageReview: number;
  reviewsCount: number;
  reviewsResponse: ReviewsResponse;
  addedToWishlist: boolean;
}

export interface ReviewsResponse {
  reviewResponses: ReviewResponse[];
}

export interface ReviewResponse {
  id: string;
  headline: string;
  comment: string;
  rating: number;
  customerId: string;
  reviewTime: string;
  userName: string;
  profileImageUrl: string;
  userEmail: string;
  imageUrl: string;
  productName: string;
}

--- ./site-themes/four-theme/forgotpasswordforstore/forgotpasswordforstore.component.ts
+++ ./site-themes/four-theme/forgotpasswordforstore/forgotpasswordforstore.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit} from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { AuthService } from 'src/app/service/auth.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-forgotpasswordforstore',
  templateUrl: './forgotpasswordforstore.component.html',
  styleUrls: ['./forgotpasswordforstore.component.css']
})
export class ForgotpasswordforstoreComponent implements OnInit {

  hidenewpassword: boolean = true;
  hideconfirmpassword: boolean = true;
  email: string = '';
  emailInvalid: boolean = false;
  otpGenerated: boolean = false;
  correctOTP = '123456';
  receivedResponse: boolean = false;
  emailVerified: boolean = false;
  verifyTokenNotValid: boolean = false;
  newPassword: string = '';
  confirmPassword: string = '';
  passwordMismatch: boolean = false;
  token: string = '';
  errorMessage: any;
  showErrors: boolean = false;
  changedPassword: boolean = false;
  successMessageShow: boolean = false;
  businessId = Number(this.tokenStorage.getBusinessID());

  constructor(private authService: AuthService, public dialog: MatDialog, private tokenStorage: TokenStorageService,) { }

  ngOnInit() {
  }

  verifyEmail() {
    this.emailInvalid = false;
    if(!this.email || !this.email.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,10}$/)){
       this.emailInvalid = true;
       return;
    }
    this.authService.generateTokenToResetStoreUserPassword(this.businessId, this.email).subscribe(
      data => {
        if (data?.data?.generateTokenToResetStoreUserPassword != null) {
          this.otpGenerated = true;
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess',
             data: { title: 'SUCCESS', message: 'VERIFY_EMAIL_SUCCESS' } });
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
  }

  checkValid() {
    this.authService.getStoreUserByResetToken(this.businessId, this.token).subscribe(
      data => {
        if (data?.data?.getStoreUserByResetToken) {
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess',
             data: { title: 'SUCCESS', message: 'VERIFY_TOKEN' } });
          this.otpGenerated = false;
          this.emailVerified = true;
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
  }

  checkPasswords(confirmpwd: any) {
    if (confirmpwd === '' || confirmpwd === null) {
      this.passwordMismatch = false;
    } else {
      this.passwordMismatch = this.newPassword !== this.confirmPassword;
    }
  }

  validateAndResetPassword() {
    this.showErrors = true;
    if (!this.newPassword || !this.confirmPassword || this.passwordMismatch) {
      return;
    }
    if (this.newPassword.match(/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&]).{8,}/) && this.confirmPassword.match(this.newPassword)) {
      this.resetPassword();
    }
  }

  resetPassword() {
    this.authService.updateStoreUserPassword(this.businessId, this.token, this.newPassword).subscribe(
      data => {
        if (data?.data?.updateStoreUserPassword) {
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess',
             data: { title: 'SUCCESS', message: 'CHANGED_PASSWORD_SUCCESS' } });
          this.changedPassword = true;
          this.successMessageShow = true;
        } else {
          const error = data?.errors[0];
          if (error?.errorCode == 'PROVIDE_NEW_PASS') {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: 'NEW_PASSWORD_CANNOT_BE_AN_USED_PASSWORD' }
            });
          } else {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: error?.errorMessage }
            });
          }

        }
      }
    );
  }

}


--- ./site-themes/four-theme/four-theme-wishlist/four-theme-wishlist.component.ts
+++ ./site-themes/four-theme/four-theme-wishlist/four-theme-wishlist.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { firstValueFrom } from 'rxjs';
import { Component, OnInit } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { environment } from 'src/environments/environment';
import { ActivatedRoute } from '@angular/router';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { DataService } from 'src/app/service/data.service';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../pdp-quick-view/pdp-quick-view.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';

\1
  standalone: true,
  selector: 'app-four-theme-wishlist',
  templateUrl: './four-theme-wishlist.component.html',
  styleUrls: ['./four-theme-wishlist.component.css']
})

export class FourThemeWishlistComponent implements OnInit {


  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  activeTheme = this.dashboardContent.themeName;
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };

  wishlists: WishListResponse[] = [];
  awsURL = environment.awsKey;
  subdomain!: string;
  currencySymbol! : string;
  message!: string;
  errorMessage!: string;
  businessId=Number(this.tokenStorage.getBusinessID()!);
  isLoading: boolean = false;
  sessionResponse!: SessionResponse;
  AlwaysShow: boolean = true;


  constructor(
    private wishlistService: WhishlistService,
    private catalogService: CatalogServiceService,
    private tokenStorage: TokenStorageService,
    private route: ActivatedRoute,
    private dataService: DataService,
    public dialog: MatDialog,private cookieDate: CookieDataServiceService
  ) {
    if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
    }
  }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.dataService.notifyProductObservable$.subscribe(async itemId => {
      if (itemId) {
        const index = this.wishlists.findIndex(item => item.itemId === itemId);
        if (index !== -1) {
          this.wishlists.splice(index, 1);
        }
      }
    });
    if(this.sessionResponse.userType !== "GENERIC"){
      await this.getWhishlist();
    }
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  async getWhishlist() {
    this.isLoading = true;
    try {
      const observableRes = await this.wishlistService.getCustomerWishList();
      const res = await firstValueFrom(observableRes);
      this.wishlists = res?.data?.getCustomerWishList || [];
      this.wishlists = this.wishlists.filter(
        whishItem => whishItem?.businessId === this.businessId
      );
      const productRequests = this.wishlists.map(async whishItem => {
        try {
          const productObservable = await this.catalogService.getProductById(
            whishItem.itemId,
            this.businessId
          );
          const productRes = await firstValueFrom(productObservable);
          whishItem.productResponse =
            productRes?.data?.getProductByIdAndBusinessId || null;
          if (whishItem.productResponse) {
            whishItem.productResponse.addedToWishlist = true;
          }
        } catch (err) {
        }
      });
      await Promise.all(productRequests);
    } catch (error) {
    } finally {
      this.isLoading = false;
    }
  }

  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
}

}

--- ./site-themes/four-theme/no-domain/no-domain.component.ts
+++ ./site-themes/four-theme/no-domain/no-domain.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, OnInit } from '@angular/core';
import { environment } from 'src/environments/environment';
import { TranslateService } from '@ngx-translate/core';
import { TranslateSiteService } from 'src/app/service/translate-site.service';

\1
  standalone: true,
  selector: 'app-no-domain',
  templateUrl: './no-domain.component.html',
  styleUrls: ['./no-domain.component.css']
})
export class NoDomainComponent implements OnInit {

  businessUrl = environment.landingUrl;
  constructor(public translate: TranslateService,
    public translateSiteService:TranslateSiteService) { }

  ngOnInit() {

    if (!this.translate.currentLang) {
      this.translate.use('en');
    }

  }

}

--- ./site-themes/four-theme/announcement-bar/announcement-bar.component.ts
+++ ./site-themes/four-theme/announcement-bar/announcement-bar.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, HostListener, Input, OnInit } from '@angular/core';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-announcement-bar',
  templateUrl: './announcement-bar.component.html',
  styleUrls: ['./announcement-bar.component.css']
})
export class AnnouncementBarComponent implements OnInit {


  @Input() showalerttop!: boolean;
  @Input() loggedIn!: boolean;
  @Input() announcementBar: any;
  @Input() user: any;
  userInfo: any;
  sessionUser: string = '';


  constructor(private cookieDate: CookieDataServiceService, private sharedService: SharedService) { }

  ngOnInit() {
    this.sharedService.getUserData().subscribe(data => {
      if(data?.firstName){
        this.userInfo = data;
      }
      if(!this.userInfo || this.userInfo == undefined){
        const userCookie = this.cookieDate.getUserCookie('user');
        if (userCookie) {
          this.sessionUser = userCookie;
        }
      }
    });
    this.sharedService.getCookiesUserData().subscribe(data => {
      if(data){
        this.userInfo = null;
        this.sessionUser = '';
      }
    });
  }

  @HostListener('window:beforeunload', ['$event'])
  unloadNotification($event: BeforeUnloadEvent): void {
  }
}

--- ./site-themes/four-theme/pdp-quick-view/pdp-quick-view.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/pdp-quick-view.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, Inject, Input, OnInit, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ActivatedRoute, Router } from '@angular/router';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-pdp-quick-view',
  templateUrl: './pdp-quick-view.component.html',
  styleUrls: ['./pdp-quick-view.component.css']
})
export class PdpQuickViewComponent implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  isPopupOpen = false;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;


  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef, private route: ActivatedRoute,
    public dialogRef: MatDialogRef<PdpQuickViewComponent>,
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = window.location.pathname.split('/')[1];
    }
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.data.attrValues);
    this.getThemeName();
    this.openPopup();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if(value?.price && value?.price > 0){
    this.price = value?.price;
    this.salePrice = value?.salePrice;
  }
  this.noOfProducts = value?.availableQuantity;
}

onProductSkuChanges(product: any) {
  this.product = product;
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }

  openPopup() {
    this.isPopupOpen = true;
    document.documentElement.classList.add('no-scroll-bg');
  }

  closePopup() {
    this.isPopupOpen = false;
    this.closeDialog();
    document.documentElement.classList.remove('no-scroll-bg');
  }

  closeDialog(): void {
    this.dialogRef.close();
  }

  ngOnDestroy() {
    document.documentElement.classList.remove('no-scroll-bg');
  }

  scrollAndNavigate() {
    this.dialogRef.close();
    window.scrollTo({ top: 0, behavior: 'smooth' });
    this.router.navigate([`/${this.subdomain}/product/${this.product.url}/${this.product.id}`]);
  }


  navigateTOProduct(){
    localStorage.setItem('filter-attrs', JSON.stringify(this.data.attrValues));
    const productId = this.product?.id || this.product?.productId;
    if (environment.env !== 'local') {
      this.router.navigateByUrl(`/product/${this.product.url}/${productId}`);
    } else {
      this.subdomain = window.location.pathname.split('/')[1];
      this.router.navigateByUrl(`/${this.subdomain}/product/${this.product.url}/${productId}`);
    }
  }

}

--- ./site-themes/four-theme/pdp-quick-view/quickview-theme13/quickview-theme13.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme13/quickview-theme13.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme13',
  templateUrl: './quickview-theme13.component.html',
  styleUrls: ['./quickview-theme13.component.css']
})

export class QuickviewTheme13Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme7/quickview-theme7.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme7/quickview-theme7.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme7',
  templateUrl: './quickview-theme7.component.html',
  styleUrls: ['./quickview-theme7.component.css']
})

export class QuickviewTheme7Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme6/quickview-theme6.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme6/quickview-theme6.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme6',
  templateUrl: './quickview-theme6.component.html',
  styleUrls: ['./quickview-theme6.component.css']
})

export class QuickviewTheme6Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme10/quickview-theme10.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme10/quickview-theme10.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme10',
  templateUrl: './quickview-theme10.component.html',
  styleUrls: ['./quickview-theme10.component.css']
})

export class QuickviewTheme10Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme14/quickview-theme14.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme14/quickview-theme14.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme14',
  templateUrl: './quickview-theme14.component.html',
  styleUrls: ['./quickview-theme14.component.css']
})

export class QuickviewTheme14Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme4/quickview-theme4.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme4/quickview-theme4.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme4',
  templateUrl: './quickview-theme4.component.html',
  styleUrls: ['./quickview-theme4.component.css']
})

export class QuickviewTheme4Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme3/quickview-theme3.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme3/quickview-theme3.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme3',
  templateUrl: './quickview-theme3.component.html',
  styleUrls: ['./quickview-theme3.component.css']
})

export class QuickviewTheme3Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme8/quickview-theme8.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme8/quickview-theme8.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme8',
  templateUrl: './quickview-theme8.component.html',
  styleUrls: ['./quickview-theme8.component.css']
})

export class QuickviewTheme8Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme21/quickview-theme21.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme21/quickview-theme21.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme21',
  templateUrl: './quickview-theme21.component.html',
  styleUrls: ['./quickview-theme21.component.css']
})

export class QuickviewTheme21Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme11/quickview-theme11.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme11/quickview-theme11.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme11',
  templateUrl: './quickview-theme11.component.html',
  styleUrls: ['./quickview-theme11.component.css']
})

export class QuickviewTheme11Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme20/quickview-theme20.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme20/quickview-theme20.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme20',
  templateUrl: './quickview-theme20.component.html',
  styleUrls: ['./quickview-theme20.component.css']
})

export class QuickviewTheme20Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme9/quickview-theme9.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme9/quickview-theme9.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme9',
  templateUrl: './quickview-theme9.component.html',
  styleUrls: ['./quickview-theme9.component.css']
})

export class QuickviewTheme9Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme15/quickview-theme15.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme15/quickview-theme15.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme15',
  templateUrl: './quickview-theme15.component.html',
  styleUrls: ['./quickview-theme15.component.css']
})

export class QuickviewTheme15Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme19/quickview-theme19.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme19/quickview-theme19.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme19',
  templateUrl: './quickview-theme19.component.html',
  styleUrls: ['./quickview-theme19.component.css']
})

export class QuickviewTheme19Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme5/quickview-theme5.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme5/quickview-theme5.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme5',
  templateUrl: './quickview-theme5.component.html',
  styleUrls: ['./quickview-theme5.component.css']
})

export class QuickviewTheme5Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme17/quickview-theme17.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme17/quickview-theme17.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme17',
  templateUrl: './quickview-theme17.component.html',
  styleUrls: ['./quickview-theme17.component.css']
})

export class QuickviewTheme17Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme16/quickview-theme16.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme16/quickview-theme16.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme16',
  templateUrl: './quickview-theme16.component.html',
  styleUrls: ['./quickview-theme16.component.css']
})

export class QuickviewTheme16Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme18/quickview-theme18.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme18/quickview-theme18.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme18',
  templateUrl: './quickview-theme18.component.html',
  styleUrls: ['./quickview-theme18.component.css']
})

export class QuickviewTheme18Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme12/quickview-theme12.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme12/quickview-theme12.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme12',
  templateUrl: './quickview-theme12.component.html',
  styleUrls: ['./quickview-theme12.component.css']
})

export class QuickviewTheme12Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme1/quickview-theme1.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme1/quickview-theme1.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme1',
  templateUrl: './quickview-theme1.component.html',
  styleUrls: ['./quickview-theme1.component.css']
})

export class QuickviewTheme1Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  @Input() attrValues!: string[];
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/pdp-quick-view/quickview-theme2/quickview-theme2.component.ts
+++ ./site-themes/four-theme/pdp-quick-view/quickview-theme2/quickview-theme2.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { PromotionService } from 'src/app/service/promotion.service';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-quickview-theme2',
  templateUrl: './quickview-theme2.component.html',
  styleUrls: ['./quickview-theme2.component.css']
})

export class QuickviewTheme2Component implements OnInit {

  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  selectedImageIndex: number = 0;
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  isPlaying = false;
  showControls = false;
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  subdomain: string = '';
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';
  showVideo: boolean = false;
  attributeNames!: string[];

  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  themeName: string = 'FourthTheme';
  currentAttribute  !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  @Input() attrValues!: string[];


  constructor(
    private tokenStorage: TokenStorageService,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private catalogService: CatalogServiceService,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef
    ) {
    }

  async ngOnInit() {
    this.subdomain = this.data.subdomain;
    this.quantity = 1;
    this.filteredColors = [];
    this.loadProductDate(this.data.id, this.attrValues);
    this.getThemeName();
  }

  loadProductDate(productId: number, filters: string[]){
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.availableQuantity;
        this.productImages = this.product?.images;
        if(this.product && this.product?.mainAttributeDtos) {
          for(let sku of this.product?.mainAttributeDtos){
            if(sku && sku?.defaultSku){
              let attributeValue;
              if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
                attributeValue = sku.attributeDTO.attributeValueName;
              } else {
                attributeValue = sku.attributeDTO.attributeValue;
              }
              await this.selectedColorAttribute(sku, attributeValue);
            }
          }
        }
      }
    );
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }

    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
      this.price = this.product.price;
      if((this.product?.priceVary == null || !this.product?.priceVary)){
        this.salePrice = value.price;
      }
      if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
        this.salePrice = value.price;
      }
    } else {
        this.price = this.product.price;
    }

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}


async selectedOtherAttribute(value: any,type: 'second' | 'third'){
  if (type === 'second') {
    this.selectedSecondAttributeId = value.productAttribute.id;
    this.secondAttribute = value.productAttribute.attributeValue;
  } else if (type === 'third') {
    this.selectedThirdAttributeId = value.productAttribute.id;
    this.thirdAttribute = value.productAttribute.attributeValue;
  }
  this.selectedSku = value;
  if(value.skuId == null){
   await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
    this.firstTimeThirdAttributes = [];
  }
  if (value.price && value.price > 0) {
    this.price = this.product.price;
    this.salePrice = value.price;
    this.product.minPrice = null!;
    this.product.maxPrice = null!;
} else {
    this.price = this.product.price;
}
  this.noOfProducts = value?.availableQuantity;
  this.productSkuChanges.emit(this.product);
  this.cdr.detectChanges();
}

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product.otherSelectedProductAttributes.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }

  async addItemToCart(){
    console.log(this.selectedSku)
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.addItemToCart?.message}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{title:'', message: data?.data?.addItemToWishList?.message}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      async data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: data?.data?.removeItemFromWishList?.message}});

        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }


  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

   // Scroll to the top of the div
   scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }

  // Scroll to the bottom of the div
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }

  getEncodedProductUrl(): string {
    return encodeURIComponent(this.product.url);
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  increaseQuantity(): void {
    this.quantity++;
    this.checkQuantity(this.quantity);
  }

  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
    this.checkQuantity(this.quantity);
  }
  enableVideo(){
    this.showVideo = true;
  }

  playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }
}



--- ./site-themes/four-theme/four-theme-reviews/four-theme-reviews.component.ts
+++ ./site-themes/four-theme/four-theme-reviews/four-theme-reviews.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { EditReviewModalComponent } from '../edit-review-modal/edit-review-modal.component';
import { Router } from '@angular/router';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { environment } from 'src/environments/environment';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';
import { ReviewService } from 'src/app/service/review.service';

\1
  standalone: true,
  selector: 'app-four-theme-reviews',
  templateUrl: './four-theme-reviews.component.html',
  styleUrls: ['./four-theme-reviews.component.scss']
})
export class FourThemeReviewsComponent implements OnInit {
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  order!: OrderResponse;
  awsUrl = environment.awsKey;
  currency = this.tokenstorage.getCurrency()?.symbol;
  orderPrefix = this.tokenstorage.getOrderFormat()?.prefix;
  orderSuffix = this.tokenstorage.getOrderFormat()?.suffix;
  subdomain = this.tokenstorage.getBusinessURL();
  storeName = this.tokenstorage.getBStoreName();

  constructor(
    private dialog:MatDialog,
    private router: Router,
    public tokenstorage: TokenStorageService,
    private reviewService : ReviewService
    ) {
    const navigation = this.router.getCurrentNavigation();
    if (navigation && navigation.extras.state) {
      this.order = navigation.extras.state['data'].order;
      if(this.order){
        this.order.orderDetails.forEach(async item => {
          (await this.reviewService.getReviewByProductAndCustomer(item.product.id)).subscribe(
            data => {
              if(data?.data?.getReviewByProductIdAndCustomerIdAndUserType != null){
                item.action='EDIT';
              }else{
                item.action='ADD';
              }
            }
          );
        });
      }
    }
  }
  ngOnInit(): void {

  }



  addreviewmodal(item: OrderDetailResponse){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'edit_review_modal';
    dialogConfig.data = {item: item, action: 'ADD'};
    this.dialog.open(EditReviewModalComponent, dialogConfig)
    .afterClosed().subscribe(
      data => {
        if(data){
          item.action = 'EDIT';
        }
      }
    );
  }

  editreviewmodal(item: OrderDetailResponse){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'edit_review_modal';
    dialogConfig.data = {item: item, action: 'EDIT'};
    this.dialog.open(EditReviewModalComponent, dialogConfig)
    .afterClosed().subscribe(
      data => {
        if(data){
          item.action = 'EDIT';
        }
      }
    );
  }

}

--- ./site-themes/four-theme/custom-paginator/custom-paginator.component.ts
+++ ./site-themes/four-theme/custom-paginator/custom-paginator.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { PageEvent } from '@angular/material/paginator';

\1
  standalone: true,
  selector: 'app-custom-paginator',
  templateUrl: './custom-paginator.component.html',
  styleUrls: ['./custom-paginator.component.css']
})
export class CustomPaginatorComponent implements OnInit, OnChanges {

  @Input() length: number = 0;
  @Input() pageSize: number = 10;
  @Input() pageIndex: number = 0;
  @Output() page = new EventEmitter<PageEvent>();
  pages: number[] = [];

  constructor() { }


  ngOnInit() {
  }

  ngOnChanges() {
    if (this.length && this.pageSize && this.pageSize > 0) {
      const totalPages = Math.ceil(this.length / this.pageSize);
      this.pages = Array(totalPages).fill(0).map((x, i) => i);
    } else {
      this.pages = [];
    }
  }

  hasPrevPage(): boolean {
    return this.pageIndex > 0;
  }

  hasNextPage(): boolean {
    return this.pageIndex < this.pages.length - 1;
  }

  goToPage(page: number) {
    this.pageIndex = page;
    this.emitPageEvent();
    window.scrollTo({
      top: 0,
      behavior: 'smooth' // Optional: Adds a smooth scrolling effect
    });
  }

  prevPage() {
    if (this.hasPrevPage()) {
      this.pageIndex--;
      this.emitPageEvent();
    }
  }

  nextPage() {
    if (this.hasNextPage()) {
      this.pageIndex++;
      this.emitPageEvent();
    }
  }

  isCurrentPage(page: number): boolean {
    return this.pageIndex === page;
  }

  emitPageEvent() {
    this.page.emit({ length: this.length, pageSize: this.pageSize, pageIndex: this.pageIndex });
  }


}

--- ./site-themes/four-theme/order-detail-print-modal/order-detail-print-modal.component.ts
+++ ./site-themes/four-theme/order-detail-print-modal/order-detail-print-modal.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';

\1
  standalone: true,
  selector: 'app-order-detail-print-modal',
  templateUrl: './order-detail-print-modal.component.html',
  styleUrls: ['./order-detail-print-modal.component.scss']
})
export class OrderDetailPrintModalComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}

--- ./site-themes/four-theme/four-customer-reviews/four-customer-reviews.component.ts
+++ ./site-themes/four-theme/four-customer-reviews/four-customer-reviews.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-customer-reviews',
  templateUrl: './four-customer-reviews.component.html',
  styleUrls: ['./four-customer-reviews.component.scss']
})
export class FourCustomerReviewsComponent implements OnInit {
  title='Customer Reviews'
  @Input()data:any;
  @Input()sliderStyle:any;
  design: any;
  awsUrl = environment.awsKey;

  arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
  arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';

  customOptions: OwlOptions = {
    loop: true,
    margin: 20,
    nav: true,
    dots: true,
    navSpeed: 700,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`, `<img src="${this.arrowright}" alt="RIGHT">`],
    responsive: {
      0: {
        items: 1
      },
      400: {
        items: 1
      },
      740: {
        items: 2
      },
      940: {
        items: 3
      }
    },
  }


  constructor() { }

  ngOnInit() {
    if(this.data.data && this.data.data.length > 0){
      this.design = this.data.data[0].customerReviewsDesign;

    }
    console.log(this.data,"checking customer")
  }

}

--- ./site-themes/four-theme/four-footer/four-footer.component.ts
+++ ./site-themes/four-theme/four-footer/four-footer.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { environment } from 'src/environments/environment';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { SubscribeMarketingComponent } from '../subscribe-marketing/subscribe-marketing.component';
import { UnsubscribeMarketingComponent } from '../unsubscribe-marketing/unsubscribe-marketing.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';


\1
  standalone: true,
  selector: 'app-four-footer',
  templateUrl: './four-footer.component.html',
  styleUrls: ['./four-footer.component.scss']
})
export class FourFooterComponent implements OnInit {
  landUrl = environment.landingUrl;
  subdomain!: string;
  isLogo = false;
  logoImage : string = "../../../assets/img/logo.png";
  awsURL = environment.assetsAwsKey;
  @Input() data:any;
  businessId = Number(this.tokenStorage.getBusinessID())!;
  limit: number = 6;
  @Input() socialLinks: any;
  businessID = Number(this.tokenStorage.getBusinessID());
  businessPayments: string[] = [];
  isFazealPayEnabled: boolean = false;
  isPayPalEnabled: boolean = false;
  isCODEnabled: boolean = false;
  getOnBoardingForm: any;

  constructor(
    public dialog: MatDialog,
    private tokenStorage: TokenStorageService,
    private businessSetting : BusinessSettingService,
    private route: ActivatedRoute,private shoppingCart: ShoppingCartService,
    ) { }

  async ngOnInit(): Promise<void> {
    this.subdomain = this.route.snapshot.params['subdomain'];
    await this.loadPaymentMethods();
    await this.getOnboardingFormLink();
  }

  subscribeMarketing() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-xl-medium-width';
    this.dialog.open(SubscribeMarketingComponent, dialogConfig);
  }

  unsubscribeMarketing() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-xl-medium-width';
    this.dialog.open(UnsubscribeMarketingComponent, dialogConfig);
  }

  loadMoreCategories(): void {
    this.limit += 6; // Increase the limit by 6 or any number you prefer
  }


  loadPaymentMethods() {
    this.businessSetting.getBusinessPaymentMethodsForCustomerSide(this.businessID).subscribe(
      result => {
        console.log(result,"payment methods")
        this.businessPayments = result?.data?.getBusinessPaymentMethodsForCustomerSide;
        if(this.businessPayments?.includes('PAYPAL')){
          this.isPayPalEnabled = true;
        }
        if(this.businessPayments?.includes('CASH_ON_DELIVERY')){
          this.isCODEnabled = true;
        }
      }
    );

  }

  async getOnboardingFormLink(){
    (await this.shoppingCart.getOnboardingFormLink()).subscribe(
      data => {
        if(data?.errors){
          return;
        }
        if(data?.data?.getOnboardingFormLinkForCustomer){
          this.getOnBoardingForm = data?.data?.getOnboardingFormLinkForCustomer;
          if (this.getOnBoardingForm?.merchantId && this.getOnBoardingForm?.merchantId !== null && this.getOnBoardingForm?.status === 'APPROVED') {
            this.isFazealPayEnabled = true;
          }
        }
      }
    );
  }



}

--- ./site-themes/four-theme/legal-pages/eula/eula.component.ts
+++ ./site-themes/four-theme/legal-pages/eula/eula.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Page } from 'src/app/models/Pages';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser'

\1
  standalone: true,
  selector: 'app-eula',
  templateUrl: './eula.component.html',
  styleUrls: ['./eula.component.css']
})
export class EulaComponent implements OnInit {

  isLoading: boolean = true;
  page!: Page;
  businessId = Number(this.tokenStorage.getBusinessID())!;

  constructor(private businessSetting: BusinessSettingService, private tokenStorage: TokenStorageService,private sanitizer: DomSanitizer) { }

  ngOnInit() {
    this.getAllPages();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  async getAllPages() {
    this.isLoading = true;
    this.businessSetting.getAllStorePages(this.businessId).subscribe(data => {
      if (data?.data?.getAllStorePages) {
        this.page = data?.data?.getAllStorePages?.find((p: any) => p?.pageType === 'END_USER_AGREEMENT');
      }
      this.isLoading = false;
    }, error => {
      this.isLoading = false;
    });
  }

  isContentEmpty(): boolean {
  if (!this.page || !this.page.content) return true;

  // Remove white spaces
  const cleaned = this.page.content.replace(/\s/g, '');

  // Check if it contains meaningful tags like img or text content
  const hasImage = /<img\s+[^>]*src=['"]([^'"]+)['"][^>]*>/i.test(this.page.content);
  const hasText = this.page.content.replace(/<[^>]*>/g, '').trim().length > 0;

  return !(hasImage || hasText);
}


  get sanitizedPageContent() {
  let content = this.page?.content || '';

  // Remove <pre> tags if they exist
  content = content.replace(/<pre[^>]*>/gi, '').replace(/<\/pre>/gi, '');

  // Decode HTML entities
  const txt = document.createElement('textarea');
  txt.innerHTML = content;
  const decoded = txt.value;

  return this.sanitizer.bypassSecurityTrustHtml(decoded);
}

}

--- ./site-themes/four-theme/legal-pages/terms-conditions/terms-conditions.component.ts
+++ ./site-themes/four-theme/legal-pages/terms-conditions/terms-conditions.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Page } from 'src/app/models/Pages';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser'

\1
  standalone: true,
  selector: 'app-terms-conditions',
  templateUrl: './terms-conditions.component.html',
  styleUrls: ['./terms-conditions.component.css']
})
export class TermsConditionsComponent implements OnInit {

  isLoading: boolean = true;
  page!: Page;
  businessId = Number(this.tokenStorage.getBusinessID())!;

  constructor(private businessSetting: BusinessSettingService, private tokenStorage: TokenStorageService,private sanitizer: DomSanitizer) { }

  ngOnInit() {
    this.getAllPages();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }


  async getAllPages() {
    this.isLoading = true;
    this.businessSetting.getAllStorePages(this.businessId).subscribe(data => {
      if (data?.data?.getAllStorePages) {
        this.page = data?.data?.getAllStorePages?.find((p: any) => p?.pageType === 'TERMS_AND_CONDITIONS');
      }
      this.isLoading = false;
    }, error => {
      this.isLoading = false;
    });
  }


  isContentEmpty(): boolean {
  if (!this.page || !this.page.content) return true;

  // Remove white spaces
  const cleaned = this.page.content.replace(/\s/g, '');

  // Check if it contains meaningful tags like img or text content
  const hasImage = /<img\s+[^>]*src=['"]([^'"]+)['"][^>]*>/i.test(this.page.content);
  const hasText = this.page.content.replace(/<[^>]*>/g, '').trim().length > 0;

  return !(hasImage || hasText);
}


  get sanitizedPageContent() {
  let content = this.page?.content || '';

  // Remove <pre> tags if they exist
  content = content.replace(/<pre[^>]*>/gi, '').replace(/<\/pre>/gi, '');

  // Decode HTML entities
  const txt = document.createElement('textarea');
  txt.innerHTML = content;
  const decoded = txt.value;

  return this.sanitizer.bypassSecurityTrustHtml(decoded);
}


}

--- ./site-themes/four-theme/legal-pages/return-policy/return-policy.component.ts
+++ ./site-themes/four-theme/legal-pages/return-policy/return-policy.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Page } from 'src/app/models/Pages';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser'

\1
  standalone: true,
  selector: 'app-return-policy',
  templateUrl: './return-policy.component.html',
  styleUrls: ['./return-policy.component.css']
})
export class ReturnPolicyComponent implements OnInit {

  isLoading: boolean = true;
  page!: Page;
  businessId = Number(this.tokenStorage.getBusinessID())!;

  constructor(private businessSetting: BusinessSettingService, private tokenStorage: TokenStorageService,private sanitizer: DomSanitizer) { }

  ngOnInit() {
    this.getAllPages();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  async getAllPages() {
    this.isLoading = true;
    this.businessSetting.getAllStorePages(this.businessId).subscribe(data => {
      if (data?.data?.getAllStorePages) {
        this.page = data?.data?.getAllStorePages?.find((p: any) => p?.pageType === 'RETURN_POLICY');
      }
      this.isLoading = false;
    }, error => {
      this.isLoading = false;
    });
  }





  isContentEmpty(): boolean {
  if (!this.page || !this.page.content) return true;

  // Remove white spaces
  const cleaned = this.page.content.replace(/\s/g, '');

  // Check if it contains meaningful tags like img or text content
  const hasImage = /<img\s+[^>]*src=['"]([^'"]+)['"][^>]*>/i.test(this.page.content);
  const hasText = this.page.content.replace(/<[^>]*>/g, '').trim().length > 0;

  return !(hasImage || hasText);
}


  get sanitizedPageContent() {
  let content = this.page?.content || '';

  // Remove <pre> tags if they exist
  content = content.replace(/<pre[^>]*>/gi, '').replace(/<\/pre>/gi, '');

  // Decode HTML entities
  const txt = document.createElement('textarea');
  txt.innerHTML = content;
  const decoded = txt.value;

  return this.sanitizer.bypassSecurityTrustHtml(decoded);
}

}

--- ./site-themes/four-theme/legal-pages/cookies-policy/cookies-policy.component.ts
+++ ./site-themes/four-theme/legal-pages/cookies-policy/cookies-policy.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Page } from 'src/app/models/Pages';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser'

\1
  standalone: true,
  selector: 'app-cookies-policy',
  templateUrl: './cookies-policy.component.html',
  styleUrls: ['./cookies-policy.component.css']
})
export class CookiesPolicyComponent implements OnInit {

  isLoading: boolean = true;
  page!: Page;
  businessId = Number(this.tokenStorage.getBusinessID())!;

  constructor(private businessSetting: BusinessSettingService, private tokenStorage: TokenStorageService,private sanitizer: DomSanitizer) { }

  ngOnInit() {
    this.getAllPages();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  async getAllPages() {
    this.isLoading = true;
    this.businessSetting.getAllStorePages(this.businessId).subscribe(data => {
      if (data?.data?.getAllStorePages) {
        this.page = data?.data?.getAllStorePages?.find((p: any) => p?.pageType === 'COOKIES_POLICY');
      }
      this.isLoading = false;
    }, error => {
      this.isLoading = false;
    });
  }

  isContentEmpty(): boolean {
  if (!this.page || !this.page.content) return true;

  // Remove white spaces
  const cleaned = this.page.content.replace(/\s/g, '');

  // Check if it contains meaningful tags like img or text content
  const hasImage = /<img\s+[^>]*src=['"]([^'"]+)['"][^>]*>/i.test(this.page.content);
  const hasText = this.page.content.replace(/<[^>]*>/g, '').trim().length > 0;

  return !(hasImage || hasText);
}

 get sanitizedPageContent() {
  let content = this.page?.content || '';

  // Remove <pre> tags if they exist
  content = content.replace(/<pre[^>]*>/gi, '').replace(/<\/pre>/gi, '');

  // Decode HTML entities
  const txt = document.createElement('textarea');
  txt.innerHTML = content;
  const decoded = txt.value;

  return this.sanitizer.bypassSecurityTrustHtml(decoded);
}

}

--- ./site-themes/four-theme/legal-pages/aboutus/aboutus.component.ts
+++ ./site-themes/four-theme/legal-pages/aboutus/aboutus.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Page } from 'src/app/models/Pages';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser'

\1
  standalone: true,
  selector: 'app-aboutus',
  templateUrl: './aboutus.component.html',
  styleUrls: ['./aboutus.component.css']
})
export class AboutusComponent implements OnInit {
  page!: Page;
  isLoading: boolean = true;
  businessId = Number(this.tokenStorage.getBusinessID())!;

  constructor(private businessSetting: BusinessSettingService, private tokenStorage: TokenStorageService,private sanitizer: DomSanitizer) { }

  async ngOnInit() {
    await this.getAllPages();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  async getAllPages() {
    this.isLoading = true;
    this.businessSetting.getAllStorePages(this.businessId).subscribe(data => {
      if (data?.data?.getAllStorePages) {
        this.page = data?.data?.getAllStorePages?.find((p: any) => p?.pageType === 'ABOUT_US');
        console.log(this.page.content,"about us page content")
      }
      this.isLoading = false;
    }, error => {
      this.isLoading = false;
    });
  }

  isContentEmpty(): boolean {
  if (!this.page || !this.page.content) return true;

  // Remove white spaces
  const cleaned = this.page.content.replace(/\s/g, '');

  // Check if it contains meaningful tags like img or text content
  const hasImage = /<img\s+[^>]*src=['"]([^'"]+)['"][^>]*>/i.test(this.page.content);
  const hasText = this.page.content.replace(/<[^>]*>/g, '').trim().length > 0;

  return !(hasImage || hasText);
}

 get sanitizedPageContent() {
  let content = this.page?.content || '';

  // Remove <pre> tags if they exist
  content = content.replace(/<pre[^>]*>/gi, '').replace(/<\/pre>/gi, '');

  // Decode HTML entities
  const txt = document.createElement('textarea');
  txt.innerHTML = content;
  const decoded = txt.value;

  return this.sanitizer.bypassSecurityTrustHtml(decoded);
}



}

--- ./site-themes/four-theme/legal-pages/termsofuse/termsofuse.component.ts
+++ ./site-themes/four-theme/legal-pages/termsofuse/termsofuse.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Page } from 'src/app/models/Pages';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser'

\1
  standalone: true,
  selector: 'app-termsofuse',
  templateUrl: './termsofuse.component.html',
  styleUrls: ['./termsofuse.component.css']
})
export class TermsofuseComponent implements OnInit {

  isLoading: boolean = true;
  page!: Page;
  businessId = Number(this.tokenStorage.getBusinessID())!;

  constructor(private businessSetting: BusinessSettingService, private tokenStorage: TokenStorageService,private sanitizer: DomSanitizer) { }

  async ngOnInit() {
    await this.getAllPages();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  async getAllPages() {
    this.isLoading = true;
    this.businessSetting.getAllStorePages(this.businessId).subscribe(data => {
      if (data?.data?.getAllStorePages) {
        this.page = data?.data?.getAllStorePages?.find((p: any) => p?.pageType === 'TERMS_OF_USE');
      }
      this.isLoading = false;
    }, error => {
      this.isLoading = false;
    });
  }

  isContentEmpty(): boolean {
  if (!this.page || !this.page.content) return true;

  // Remove white spaces
  const cleaned = this.page.content.replace(/\s/g, '');

  // Check if it contains meaningful tags like img or text content
  const hasImage = /<img\s+[^>]*src=['"]([^'"]+)['"][^>]*>/i.test(this.page.content);
  const hasText = this.page.content.replace(/<[^>]*>/g, '').trim().length > 0;

  return !(hasImage || hasText);
}

  get sanitizedPageContent() {
  let content = this.page?.content || '';

  // Remove <pre> tags if they exist
  content = content.replace(/<pre[^>]*>/gi, '').replace(/<\/pre>/gi, '');

  // Decode HTML entities
  const txt = document.createElement('textarea');
  txt.innerHTML = content;
  const decoded = txt.value;

  return this.sanitizer.bypassSecurityTrustHtml(decoded);
}

}

--- ./site-themes/four-theme/thanks-forlogin-modal/thanks-forlogin-modal.component.ts
+++ ./site-themes/four-theme/thanks-forlogin-modal/thanks-forlogin-modal.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-thanks-forlogin-modal',
  templateUrl: './thanks-forlogin-modal.component.html',
  styleUrls: ['./thanks-forlogin-modal.component.scss']
})
export class ThanksForloginModalComponent implements OnInit {

  constructor(public dialog: MatDialog,) { }

  ngOnInit(): void {
  }

  closemodal(){
    this.dialog.closeAll();
  }

}

--- ./site-themes/four-theme/four-main-header-espot/four-main-header-espot.component.ts
+++ ./site-themes/four-theme/four-main-header-espot/four-main-header-espot.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-main-header-espot',
  templateUrl: './four-main-header-espot.component.html',
  styleUrls: ['./four-main-header-espot.component.scss']
})
export class FourMainHeaderEspotComponent implements OnInit {
  @Input() data:any;
  @Input() design:any;
  @Input() activeTheme!: string;
  awsURL = environment.awsKey;
  @Input() subdomain!: string;



  constructor(private route: ActivatedRoute) { }

  ngOnInit() {
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    console.log(this.data,"header espot data")
  }
}

--- ./site-themes/four-theme/four-theme-product-search/four-theme-product-search.component.ts
+++ ./site-themes/four-theme/four-theme-product-search/four-theme-product-search.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component,  ElementRef,  OnInit, ViewChild  } from '@angular/core';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ActivatedRoute } from '@angular/router';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';
import { BrandResponse } from 'src/app/models/BrandResponse';
import { Options } from '@angular-slider/ngx-slider';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { PageEvent } from '@angular/material/paginator';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../pdp-quick-view/pdp-quick-view.component';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { DataService } from 'src/app/service/data.service';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { ThemeService } from 'src/app/service/theme.service';
import { SlpContent } from 'src/app/models/SlpContent';

\1
  standalone: true,
  selector: 'app-four-theme-product-search',
  templateUrl: './four-theme-product-search.component.html',
  styleUrls: ['./four-theme-product-search.component.scss']
})
export class FourThemeProductSearchComponent implements OnInit  {

  from = 0;
  size = 12;
  businessId = Number(this.tokenStorage.getBusinessID());
  currency = this.tokenStorage.getCurrency()?.symbol;
  products: ProductResponse[] = [];
  search = '';
  awsUrl = environment.awsKey;
  subdomain = '';
  rating!: number|null;
  skeletonArray = new Array(9);
  brandsNames: string[] = [];
  gta!: number|any;
  lte!: number|any;
  attributes: AttributeResponse[] = [];
  mainAttrValue = '';
  attrValue: string[] = [];
  selectedBrands: string[] = [];
  visibleBrands: any[] = [];
  maxVisibleBrands: number = 6;
  userWishlists: WishListResponse[] = [];
  view: string = 'grid';
  slpSearchData: any;
  minPrice: any;
  maxPrice: any;
  avgRating!: number;
  options: Options = {
    floor: 0,
    ceil: 100
  };
  @ViewChild('slider', { static: false }) sliderElement!: ElementRef;
  totalCounts!: number;
  min: number|any;
  max: number|any;
  filtersOnMobile: boolean = true;
  currentPage: number = 0;
  sessionResponse!: SessionResponse;
  currentUrl!: string;
  isFirstResponse: boolean = true;
  firstGta: any;
  firstLta: any;
  themeName: string = 'FourthTheme';
  slpContent!: SlpContent;
  field: string = 'REVIEWS';
  order: string = 'ASC';
  pageEvent!: PageEvent;
  isLoading: boolean = false;


  constructor(
    private catalogService: CatalogServiceService,
    private route: ActivatedRoute,
    private tokenStorage: TokenStorageService,private cookieDate: CookieDataServiceService,
    private cdr: ChangeDetectorRef,private themeService: ThemeService,
    public dialog: MatDialog, private wishlistService: WhishlistService,private dataService: DataService,
    ) {
      this.maxVisibleBrands = 6;
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
    }

  ngOnInit(): void {
    this.route.queryParams.subscribe(params => {
      this.search = params['searchTerm'];
      if(environment.env !== 'local'){
        this.subdomain = '';
      } else {
        this.subdomain = this.route.snapshot.params['subdomain'];
      }
      this.gta = 0;
      this.lte = 100;
      this.rating = null;
      this.min = null;
      this.max = null;
      this.attrValue = [];
      this.selectedBrands = [];
      this.isFirstResponse = true;
      this.searchProductsByCategoryAndBrand(this.search);
      this.loadAttributes();
      this.loadBusinessData();
    });
    this.getSlpContent(this.subdomain);
    this.checkingFiltersHide()
    this.getThemeName();
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  moveSlider() {
    if (this.sliderElement) {
      this.sliderElement.nativeElement.slider.update({ value: this.gta, highValue: this.lte });
    }
  }

  updateOptions() {
    this.options = {
      floor: this.gta,
      ceil: this.lte
    };
  }

  onPageSizeChange() {
    this.searchProductsByCategoryAndBrand(this.search);
    this.cdr.detectChanges();
  }


  loadBusinessData(){
    if(this.subdomain && !this.tokenStorage.getBusinessURL()){
      this.tokenStorage.saveBusinessData(this.subdomain , this.subdomain);
      window.setTimeout(() =>{
        this.currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency()?.symbol: '';
        this.businessId = Number(this.tokenStorage.getBusinessID());
        this.searchProductsByCategoryAndBrand(this.search);
        this.loadAttributes();
      }, 2000);
    }
  }

  loadAttributes(){
    if(this.search.trim().length > 0){
      this.catalogService.listAttributesBySearchQuery(this.businessId, this.search).subscribe(
        data => {
          if(data?.data?.listAttributesBySearchQuery){
            this.attributes = data?.data?.listAttributesBySearchQuery;
            console.log(this.attributes,"checking colors")
          }
        }
      );
    }
  }

  sort(field: string, order: string) {
    this.field = field;
    this.order = order;
    this.searchProductsByCategoryAndBrand(this.search);
    this.cdr.detectChanges();
  }

  searchProductsByCategoryAndBrand(query: string) {
    if (query.trim().length > 0) {
        this.isLoading = true;  // Show loading animation
        this.products = [];      // Clear old products to prevent flicker

        this.catalogService.searchProductsByAllFiltersForSlpByBusiness(
            query, this.businessId, this.from, this.size, this.selectedBrands, this.attrValue,
            this.rating ? this.rating : null, this.min ? this.min : null, this.max ? this.max : null, this.field, this.order
        ).subscribe(
            data => {
                if (data?.data?.slpSearch?.products) {
                    this.slpSearchData = data?.data?.slpSearch;
                    this.products = data?.data?.slpSearch?.products;
                    this.avgRating = this.slpSearchData?.avgRating;
                    this.brandsNames = this.slpSearchData?.brandNames;
                    this.updateVisibleBrands();

                    if (this.isFirstResponse) {
                        this.gta = this.slpSearchData?.minPrice;
                        this.lte = this.slpSearchData?.maxPrice;
                        this.firstGta = this.slpSearchData?.minPrice;
                        this.firstLta = this.slpSearchData?.maxPrice;
                        this.updateOptions();
                        this.isFirstResponse = false;
                        this.cdr.detectChanges();
                    }

                    this.minPrice = this.slpSearchData?.minPrice;
                    this.maxPrice = this.slpSearchData?.maxPrice;
                    this.totalCounts = this.slpSearchData?.totalCount;

                    if (this.sessionResponse?.userType !== "GENERIC") {
                        this.setFavItems();
                    }
                }
                this.isLoading = false;  // Hide loading animation once data is fetched
            },
            error => {
                this.isLoading = false;  // Hide loading animation if there's an error
            }
        );
    }
}


  setAttrValue(value: string) {
    if (this.attrValue.includes(value)) {
      this.attrValue = this.attrValue.filter(val => val !== value);
    } else {
      this.attrValue.push(value);
    }
    this.searchProductsByCategoryAndBrand(this.search);
  }

  setPriceValue(min: number, max: number){
    this.min = min;
    this.max = max;
    this.searchProductsByCategoryAndBrand(this.search);
  }

  clearPriceValue(){
    this.gta = this.firstGta;
    this.lte = this.firstLta;
    this.min = null;
    this.max = null;
    this.isFirstResponse = true;
    this.searchProductsByCategoryAndBrand(this.search);
  }

  setselectedBrands(value: string, event: any){
    if(event.checked){
      this.selectedBrands.push(value);
    }else{
      this.selectedBrands= this.selectedBrands.filter(brand => brand != value);
    }
    this.searchProductsByCategoryAndBrand(this.search);
  }

  isSelected(brandName: string) {
    return this.selectedBrands.includes(brandName);
  }

  clearSelectedBrands() {
    this.selectedBrands = [];
    this.searchProductsByCategoryAndBrand(this.search);
  }

  searchProductsByCategoryAndBrandPaginated(type: string){
    if(type == 'Next'){
      this.from = this.size;
      this.size = this.size + 12;
    }else if(type == 'Previous' && this.size > 20){
      this.from = this.from - 12;
      this.size = this.size - 12;
    }
    this.searchProductsByCategoryAndBrand(this.search);
  }

  updateVisibleBrands() {
    this.visibleBrands = this.brandsNames.slice(0, this.maxVisibleBrands);
  }

  showMoreBrandFilters() {
    this.maxVisibleBrands += 6;
    this.updateVisibleBrands();
  }


  handlePageEvent(event: PageEvent) {
    this.currentPage = event.pageIndex;
    this.size = event.pageSize;
    this.from = this.currentPage * this.size;
    this.searchProductsByCategoryAndBrand(this.search);
  }

  getCurrentRange(): string {
    const start = this.from + 1;
    const end = Math.min(this.from + this.size, this.totalCounts);
    return `${start}-${end}`;
  }


  async setFavItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      data => {
        this.userWishlists = data?.data?.getCustomerWishList;
        this.products?.forEach((product: any) => {
          if (this.userWishlists.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        });
      }
    );
  }

  async addItemToFovarite(product: ProductResponse) {
  (await this.wishlistService.addItemToWishList(this.businessId, product.id)).subscribe(
    data => {
      if(data?.data?.addItemToWishList != null) {
        product.addedToWishlist = true;
        this.dataService.reset();
        this.dataService.changeCount(1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
        this.dataService.notifyOther({ refresh: true });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }

  async removeItemFromFovarite(product: ProductResponse) {
  (await this.wishlistService.removeItemFromWishList(this.businessId, product.id)).subscribe(
    data => {
      if (data?.data?.removeItemFromWishList != null) {
        product.addedToWishlist = false;
        this.dataService.reset();
        this.dataService.changeCount(-1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: data?.errors[0]?.errorMessage }
        });
      }
    }
  );
  }
  toggleView(view: string) {
    if (view === 'grid') {
      this.view = 'grid'
    } else if (view === 'list') {
      this.view = 'list'
    }
  }

  checkingFiltersHide(): void {
    if (window.innerWidth < 992) {
      this.filtersOnMobile = false
    } else {
      this.filtersOnMobile = true
    }
  }

  toggleFiltersMobile(){
    this.filtersOnMobile = !this.filtersOnMobile
  }


  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  getSlpContent(siteUrl: string){
    this.themeService.getSlpContentBySiteUrl(siteUrl).toPromise().then(
      data => {
        if(data?.data?.getSlpContentBySiteUrl){
          this.slpContent = data?.data?.getSlpContentBySiteUrl;
        }
      }
    );
  }

}

--- ./site-themes/four-theme/store-location-modal/store-location-modal.component.ts
+++ ./site-themes/four-theme/store-location-modal/store-location-modal.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import { Address } from 'src/app/models/address';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';

\1
  standalone: true,
  selector: 'app-store-location-modal',
  templateUrl: './store-location-modal.component.html',
  styleUrls: ['./store-location-modal.component.scss']
})
export class StoreLocationModalComponent implements OnInit {
  address!: Address;
  sanitizedUrl!: SafeResourceUrl;
  storeName = this.tokenStorage.getBStoreName();

  constructor(@Inject(MAT_DIALOG_DATA) public data: any, private sanitizer: DomSanitizer, private tokenStorage: TokenStorageService) { }

  ngOnInit(): void {
    this.address = this.data;
    this.updateUrl();
  }

  updateUrl(): void {
    const baseUrl = `https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d0!2d${this.address.longitude}!3d${this.address.latitude}!3m2!1i1024!2i768!4f13.1`;
    this.sanitizedUrl = this.sanitizer.bypassSecurityTrustResourceUrl(baseUrl);
  }
}

--- ./site-themes/four-theme/four-recently-viewed/four-recently-viewed.component.ts
+++ ./site-themes/four-theme/four-recently-viewed/four-recently-viewed.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { PlpResponse } from 'src/app/models/PlpResponse';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import { environment } from 'src/environments/environment';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../pdp-quick-view/pdp-quick-view.component';
import { PdpContent } from 'src/app/models/PdpContent';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-four-recently-viewed',
  templateUrl: './four-recently-viewed.component.html',
  styleUrls: ['./four-recently-viewed.component.scss']
})
export class FourRecentlyViewedComponent implements OnInit {
  @Input() data:any=[];
  @Input() categoryId:any
  @Input() activeTheme!:string;
  awsUrl = environment.awsKey;
  subdomain = this.tokenStorage.getBusinessURL();
  subdomainonly : string = "";
  plpResponse!: PlpResponse;
  loading: boolean = true;
  errorMessage:string='';
  user = this.tokenStorage.getUser();
  currency = this.tokenStorage.getCurrency()?.symbol;
  productResponse: any = {
    recentlyViewedEnabled: false,
    recentlyViewedProducts : [],
};


@Input() productDashboredResponse: any = {
  recentlyViewedEnabled: false,
  recentlyViewedProducts : [],
};

@Input() dashboredListResponse: any = {
  recentlyViewedEnabled: false,
  recentlyViewedProducts : [],
};
recentlyViewed: any[] = [];

@Input() displayPlpSection:boolean=false;
@Input() displayDashBoredSection:boolean=false;

@Input() pageType!:string;
productPdpResponse: any = {
  recentlyViewedEnabled: false,
  recentlyViewedProducts : [],
};
pdpContent!: PdpContent;

arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';
  customOptions: OwlOptions = {
    loop: false,
    margin: 0,
    nav: true, // Add this option to enable navigation arrows
    dots: true,
    navSpeed: 700,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`, `<img src="${this.arrowright}" alt="RIGHT">`],
    responsive: {
      0: {
        items: 1
      },
      400: {
        items: 3
      },
      740: {
        items: 4
      },
      940: {
        items: 5
      }
    },
  }
  id: any;
  isLoading: boolean = true;
  constructor(
    private route: ActivatedRoute,
    private themeService: ThemeService,
    private tokenStorage: TokenStorageService,
    private router: Router,
    public dialog: MatDialog, private sharedService: SharedService
    ) { }



  async ngOnInit() {
    this.subdomainonly = this.route.snapshot.params['subdomain'];
    this.route.params.subscribe(async routeParam => {
        const businessURL = await this.tokenStorage.getBusinessURL();
        if (this.subdomainonly && !businessURL) {
            this.tokenStorage.saveBusinessData(this.subdomainonly, this.router.url.substring(1));
        }
        const currentUrl = this.router.url;
        if (currentUrl.includes('product')) {
          this.id = this.categoryId;
        } else {
          this.id = routeParam['id']
        }
        await this.loadPlp(this.subdomainonly, this.id);
    });
    this.subdomain = this.route.snapshot.params['subdomain'];
    if (this.subdomain && !this.tokenStorage.getBusinessURL()) {
      this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
    }
    this.loadRecentlyViewedDashbored(this.subdomain);
    this.getPdpContent(this.subdomain);
    this.sharedService.getReloadObservable().subscribe(data => {
      if(data){
        this.user = this.tokenStorage.getUser();
      }
    })

    console.log(this.data,"checking what is data")
}

async loadPlp(siteUrl: string, id: number) {
  this.displayPlpSection = true;
  this.displayDashBoredSection = false;
  try {
    if(id){
      const data = await this.themeService.getBusinessProductListingPageContentBySiteUrl(siteUrl, id).toPromise();
      if (data?.errors) return;
      this.productResponse = data?.data?.getBusinessProductListingPageContentBySiteUrl;
      if (this.productResponse.recentlyViewedProductSliderStyle === "LEFT_AND_RIGHT_ARROWS") {
        this.customOptions.dots = false;
        this.customOptions.nav = true;
        this.customOptions.navText = [`<img src="${this.arrowleft}" alt="LEFT">`, `<img src="${this.arrowright}" alt="RIGHT">`];
      } else if (this.productResponse.recentlyViewedProductSliderStyle === "DOTS") {
        this.customOptions.dots = true;
        this.customOptions.nav = false;
        this.customOptions.navText = ['', ''];
      } else if (this.productResponse.recentlyViewedProductSliderStyle === "NO_ARROWS_NO_DOTS") {
        this.customOptions.dots = false;
        this.customOptions.nav = false;
      }
    }
  } catch (error) {
    this.displayPlpSection = false;
  }
}

pdppopup(id: number) {
  const dialogConfig = new MatDialogConfig();
  dialogConfig.data = {
      id: id,
      subdomain: this.subdomainonly
  };
  dialogConfig.panelClass = 'modal-quickview-width';
  this.dialog.open(PdpQuickViewComponent, dialogConfig);
}


private handleDataError(errors: any[]) {
  if (errors && errors[0] && errors[0]?.errorMessage) {
    this.errorMessage = errors[0]?.errorMessage;
  } else {
    this.errorMessage = "An unknown error occurred.";
  }
}

loadRecentlyViewedDashbored(subdomain :any){
  this.displayDashBoredSection = true;
  this.displayPlpSection = false;
  this.themeService.getThemeDashboardContentBySiteUrl(this.subdomain!).subscribe(
    ({data,errors})=>{
      if(!data || !data?.getThemeDashboardContentBySiteUrl){
        this.handleDataError(errors);
      }
      if (data?.getThemeDashboardContentBySiteUrl) {
        this.dashboredListResponse = data?.getThemeDashboardContentBySiteUrl;
        console.log(this.dashboredListResponse,"checking home data")
        this.displayPlpSection = false;
        this.displayDashBoredSection = true;

      }
    }
  );
}


getPdpContent(siteUrl: any) {
  this.themeService.getPdpContentBySiteUrl(siteUrl)
    .subscribe(
      ({ data, errors }) => {
        if (!data || !data?.getPdpContentBySiteUrl) {
          this.handleDataError(errors);
        }
        if (data && data?.getPdpContentBySiteUrl) {
          this.pdpContent = data?.getPdpContentBySiteUrl;
          this.productPdpResponse = data?.getPdpContentBySiteUrl;
        }
      }
    );
}

}

--- ./site-themes/four-theme/return-refund/return-refund.component.ts
+++ ./site-themes/four-theme/return-refund/return-refund.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ActivatedRoute, Router } from '@angular/router';
import { environment } from 'src/environments/environment';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { TrackpackageComponent } from '../four-theme-my-order/trackpackage/trackpackage.component';


\1
  standalone: true,
  selector: 'app-return-refund',
  templateUrl: './return-refund.component.html',
  styleUrls: ['./return-refund.component.scss']
})
export class ReturnRefundComponent implements OnInit {
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  subdomain: string = '';
  order!: OrderResponse;
  loadingOrders = false;
  noOrdersAvailable = false;
  orderId!: number;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  constructor(private router: Router, private route: ActivatedRoute, public dialog: MatDialog, public shoppingCart: ShoppingCartService, public tokenStorage: TokenStorageService,) { }

  ngOnInit(): void {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.orderId = this.route.snapshot.params['id'];
    this.getByOrderId();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  openReturnOrder(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    const url = `/${this.subdomain}/return-refund-process/${orderId}`;
    this.router.navigateByUrl(url, {state: {order: order}});
  }

  async getByOrderId() {
      this.loadingOrders = true;
      this.noOrdersAvailable = false;
        (await this.shoppingCart.getByOrderId(this.orderId, this.businessId)).subscribe(
            data => {
                if (data?.errors) {
                    this.loadingOrders = false;
                    return;
                }
                if (data?.data?.getOrdersByCustomerAndBusinessAndOrderId) {
                    this.order = data?.data?.getOrdersByCustomerAndBusinessAndOrderId;
                    this.loadingOrders = false;
                } else {
                    this.loadingOrders = false;
                    this.noOrdersAvailable = true;
                }
            },
            error => {
                this.loadingOrders = false;
                this.noOrdersAvailable = true;
            }
        );
}

 openTrackPackage(order: OrderResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = order;
    const dialogRef = this.dialog.open(TrackpackageComponent, dialogConfig);
  }


}

--- ./site-themes/four-theme/four-theme-cancel-order-return-refund/four-theme-cancel-order-return-refund.component.ts
+++ ./site-themes/four-theme/four-theme-cancel-order-return-refund/four-theme-cancel-order-return-refund.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';
\1
  standalone: true,
  selector: 'app-four-theme-cancel-order-return-refund',
  templateUrl: './four-theme-cancel-order-return-refund.component.html',
  styleUrls: ['./four-theme-cancel-order-return-refund.component.scss']
})
export class FourThemeCancelOrderReturnRefundComponent implements OnInit {
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  constructor() { }

  ngOnInit(): void {
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

}

--- ./site-themes/four-theme/edit-review-modal/edit-review-modal.component.ts
+++ ./site-themes/four-theme/edit-review-modal/edit-review-modal.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { ReviewService } from 'src/app/service/review.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { TranslateSiteService } from 'src/app/service/translate-site.service';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';

\1
  standalone: true,
  selector: 'app-edit-review-modal',
  templateUrl: './edit-review-modal.component.html',
  styleUrls: ['./edit-review-modal.component.scss']
})
export class EditReviewModalComponent implements OnInit {
  starRating=0;
  item!: ProductResponse;
  action = 'ADD';
  awsUrl = environment.awsKey;
  reviewImage!: File;
  image: string = '../../../assets/img/default-profile-image.jpg';
  disableSubmitButton = false;
  reviewId = 0;
  user = this.tokenStorageService.getUser();
  userName: string = '';
  userEmail: string = '';
  comment: string = '';
  rating: any;
  ratingRequired: boolean = false;
  commentRequired: boolean = false;
  reply: string = '';

  constructor(@Inject(MAT_DIALOG_DATA) public data: {item: ProductResponse, action: string},
  private dialogRef: MatDialogRef<EditReviewModalComponent>,
  private reviewService : ReviewService,
  public translateSiteService:TranslateSiteService, private tokenStorageService: TokenStorageService,
  public dialog: MatDialog) { }

  async ngOnInit(): Promise<void> {
    this.item = this.data?.item;
    this.action = this.data?.action;
    this.userName = this.user?.firstName + ' ' + this.user?.lastName;
    await this.getReview();

  }

  async getReview(){
    (await this.reviewService.getReviewByProductAndCustomer(this.item.id)).subscribe(
      data => {
        if(data?.data?.getReviewByProductIdAndCustomerIdAndUserType != null){
          this.userName = data?.data?.getReviewByProductIdAndCustomerIdAndUserType?.userName;
          this.userEmail = data?.data?.getReviewByProductIdAndCustomerIdAndUserType?.userEmail;
          this.comment = data?.data?.getReviewByProductIdAndCustomerIdAndUserType?.comment;
          this.rating = data?.data?.getReviewByProductIdAndCustomerIdAndUserType?.rating;
          this.reviewId = data?.data?.getReviewByProductIdAndCustomerIdAndUserType?.id;
          this.image = this.awsUrl+data?.data?.getReviewByProductIdAndCustomerIdAndUserType?.imageUrl;
          this.reply = data?.data?.getReviewByProductIdAndCustomerIdAndUserType?.reply;
        }
      }
    );
  }

  uploadReviewImage(event: any) {
    let fileList: FileList = event.target.files;
    if(fileList.length > 0){
      this.reviewImage = fileList[0];
    }
    let reader = new FileReader();
    reader.onload = (e: any) => {
      this.image = e.target.result;
    };
    reader.readAsDataURL(this.reviewImage);
  }

  async onSubmit(){
      this.ratingRequired = false;
      this.commentRequired = false;
      if(this.rating === undefined){
        this.ratingRequired = true;
        return;
      }
      if(!this.comment || this.comment == ''){
        this.commentRequired = true;
        return;
      }
      this.disableSubmitButton=true;
      (await this.reviewService.createReview(this.comment, this.rating, this.item.id, this.userName, this.user?.email, this.reviewImage)).subscribe(
        data => {
          if(data?.data?.createReview != null){
            this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title:'SUCCESS',
                 message: data?.data?.createReview?.message
                }});
            setTimeout(() => {
              this.dialogRef.close(true);
               }, 3000);
          }else{
            this.disableSubmitButton=false;
          }
        }
      );
  }

}

--- ./site-themes/four-theme/four-new-product-details/four-new-product-details.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-new-product-details.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, Input, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { PdpContent } from 'src/app/models/PdpContent';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ReviewService } from 'src/app/service/review.service';
import { ThemeService } from 'src/app/service/theme.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-new-product-details',
  templateUrl: './four-new-product-details.component.html',
  styleUrls: ['./four-new-product-details.component.scss']
})
export class FourNewProductDetailsComponent implements OnInit {
  // @ViewChild(SwiperComponent, { static: false }) componentRef?: SwiperComponent;
  // @ViewChild(SwiperDirective, { static: false }) directiveRef?: SwiperDirective;
  @Input() data:any
  @Input() activeTheme:string=''
  @Input() pageType!:string;
  // config: SwiperConfigInterface = {
  //   slidesPerView: 'auto',
  //   keyboard: true,
  //   mousewheel: true,
  //   scrollbar: false,
  //   navigation: true,
  //   pagination: false,
  //   breakpoints: {
  //     320: {
  //       slidesPerView: 3,
  //       spaceBetween: 5,
  //     },
  //     768: {
  //       slidesPerView: 3,
  //       spaceBetween: 5,
  //     },
  //     1024: {
  //       slidesPerView: 4,
  //       spaceBetween: 5,
  //     }
  //   },
  // };
  // configGallery: SwiperConfigInterface = {

  //   slidesPerView: 'auto',
  //   keyboard: true,
  //   mousewheel: true,
  //   scrollbar: false,
  //   navigation: true,
  //   pagination: false,
  //   breakpoints: {
  //     320: {
  //       slidesPerView: 1,
  //       spaceBetween: 20,
  //     },
  //     768: {
  //       slidesPerView: 2,
  //       spaceBetween: 20,
  //     },
  //     1024: {
  //       slidesPerView: 4,
  //       spaceBetween: 20,
  //     }
  //   },
  // };
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  pdpResponse!: PdpContent;
  product!: ProductResponse;
  awsURL = environment.awsKey;
  attributes: AttributeResponse[] = [];
  attributeNames: string[] = [];
  colorAttribute!: AttributeResponse;
  l1Category!: CategoryResponse;
  l2Category!: CategoryResponse;
  l3Category!: CategoryResponse;
  mainImage!: string;
  color!: string;
  productImages: string[] = [];
  filteredValues: string[] = [];
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  message!: string;
  errorMessage!: string;
  quantity = 1;
  filteredColors: string[] = [];
  subdomain!: string;
  currencySymbol : string = '';
  imageObject: Array<any> = [];
  customerCanReview = false;
  similarProducts: ProductResponse[] = [];
  siteUrl = this.tokenStorage.getBusinessURL()!;
  noOfProducts = 100;
  userWishlists!: WishListResponse[];
  selectedColor!: string;
  price!: Number;
  salePrice!: number;
  isDiscount = false;
  imagePopup: any;
  mainImageIndex : number = 0;
  productReviews : any[] = [];
  pageNum = 1;
  pageSize = 50;
  public disabled: boolean = false;
  currentIndex:any=0;
  imagepath:any = '../../../assets/img/items/gs1.png';
  businessID = Number(this.tokenStorage.getBusinessID());
  isProductAvailable: boolean = true;
  isLoading: boolean = true;


  constructor(private route: ActivatedRoute,
    private themeService: ThemeService,
    private catalogService: CatalogServiceService,
    private tokenStorage: TokenStorageService,
    private reviewService : ReviewService,
    private router: Router,private cdr: ChangeDetectorRef
    ) { }

  ngOnInit() {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.route.params.subscribe(async routeParam => {
      if (this.subdomain && !this.tokenStorage.getBusinessURL()) {
        await this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
        this.currencySymbol = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency()?.symbol : '';
      }
      this.loadPdp(this.subdomain);
      this.quantity = 1;
      this.businessID = Number(this.tokenStorage.getBusinessID());
      if (this.businessID && routeParam['id']) {
        this.loadProductDate(routeParam['id']);
      }
      setTimeout(() => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }, 100);
    });
  }


  loadPdp(siteUrl: string){
    this.themeService.getPdpContentBySiteUrl(siteUrl).subscribe(
      data => {
        if(data?.data?.getPdpContentBySiteUrl){
          this.pdpResponse = data?.data?.getPdpContentBySiteUrl;
        }
      }
    );
  }

  loadProductDate(productId: number) {
    if (!productId) {
      return;
    }

    // Start loading
    this.isLoading = true;

    this.catalogService.getProductById(productId, this.businessID).subscribe(
      data => {
        console.log(this.data, "checking mainobj");

        // Check if data is undefined or null
        if (!data || !data?.data?.getProductByIdAndBusinessId) {
          this.isProductAvailable = false; // Set the variable to false
          this.isLoading = false; // Stop loading
          return;
        }

        this.isProductAvailable = true; // Set to true if product data is available
        this.imageObject = [];
        this.filteredColors = [];
        this.productImages = [];
        this.product = data?.data?.getProductByIdAndBusinessId;
        console.log(this.product, "checking product data");

        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.productImages = this.product?.images;

        this.product?.images?.forEach(image => {
          this.imageObject.push({ image: this.awsURL + image, thumbImage: this.awsURL + image });
        });

        // Stop loading after product data is fetched
        this.isLoading = false;
        this.cdr.detectChanges();
        this.loadReviews(productId);
      },
      error => {
        this.isProductAvailable = false; // Set the variable to false if there's an error
        this.isLoading = false; // Stop loading
        console.error("Error fetching product data:", error);
      }
    );
}


  loadReviews(productId: number) {
    this.reviewService.getAllReviewOfProduct(productId, this.pageNum, this.pageSize).subscribe(
      data => {
        console.log(data);
        if (!data?.data?.getAllReviewOfProduct) {
          return;
        }
        this.productReviews = data?.data?.getAllReviewOfProduct;
      }
    );
  }

  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
  }
  public toggleSlidesPerView(): void {
    // if (this.config.slidesPerView !== 1) {
    //   this.config.slidesPerView = 1;
    // } else {
    //   this.config.slidesPerView = 2;
    // }
  }
}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/four-product-layout.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/four-product-layout.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, AfterViewInit } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import panzoom from 'panzoom';
import { FullscreenPdpImageComponent } from './fullscreen-pdp-image/fullscreen-pdp-image.component';



\1
  standalone: true,
  selector: 'app-four-product-layout',
  templateUrl: './four-product-layout.component.html',
  styleUrls: ['./four-product-layout.component.scss']
})
export class FourProductLayoutComponent implements OnInit  {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
    @ViewChild('zoomWrapper') zoomWrapper!: ElementRef;

  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  @Input() currencySymbol: string = '';
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
  arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: false,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: true,
    dots: false,
    navSpeed: 700,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`, `<img src="${this.arrowright}" alt="RIGHT">`],
    responsive: {
      0: {
        items: 4
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
        await this.loadProductDate(productId);
         // Wait for Angular to update the view after data is loaded
        this.cdr.detectChanges();

        // Wait for DOM to update fully (wrap in setTimeout for safety)
        setTimeout(() => {
          this.initializeZoom();
        }, 0);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  initializeZoom() {
    if (this.zoomWrapper?.nativeElement) {
      panzoom(this.zoomWrapper.nativeElement, {
        zoomDoubleClickSpeed: 1,
        maxZoom: 5,
        minZoom: 1,
      });
    }
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = value.price;
        this.salePrice = value.salePrice;
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if(value?.price && value?.price > 0){
      this.price = value?.price;
      this.salePrice = value?.salePrice;
    }

    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
      this.product.mainImageUrl = value.mainImageUrl;
      this.product.images.push(value.mainImageUrl);
    }

  // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    // Trigger change detection to ensure the UI updates immediately
    this.cdr.detectChanges();
  }

  onProductSkuChanges(product: any) {
    this.product = product;
    this.cdr.detectChanges();
  }

  loadProductDate(productId: number) {
    this.catalogService.getProductById(productId, this.businessID).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessId) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessId;
        console.log(this.product,"checking prod images")
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


  async addItemToFovarite(itemId: number){
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }

fulscreenImage() {
  const dialogConfig = new MatDialogConfig();
  dialogConfig.panelClass = ['modal-large-width', 'no-box-shadow'];
  dialogConfig.backdropClass = 'bg-full-screen';
  dialogConfig.disableClose = true;

  dialogConfig.data = {
    imageUrl: this.product?.mainImageUrl
  };

  this.dialog.open(FullscreenPdpImageComponent, dialogConfig);
}


}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme2/pdp-theme2.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme2/pdp-theme2.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme2',
  templateUrl: './pdp-theme2.component.html',
  styleUrls: ['./pdp-theme2.component.css']
})
export class PdpTheme2Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme18/pdp-theme18.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme18/pdp-theme18.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme18',
  templateUrl: './pdp-theme18.component.html',
  styleUrls: ['./pdp-theme18.component.css']
})
export class PdpTheme18Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme15/pdp-theme15.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme15/pdp-theme15.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme15',
  templateUrl: './pdp-theme15.component.html',
  styleUrls: ['./pdp-theme15.component.css']
})
export class PdpTheme15Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme7/pdp-theme7.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme7/pdp-theme7.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme7',
  templateUrl: './pdp-theme7.component.html',
  styleUrls: ['./pdp-theme7.component.css']
})
export class PdpTheme7Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme16/pdp-theme16.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme16/pdp-theme16.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme16',
  templateUrl: './pdp-theme16.component.html',
  styleUrls: ['./pdp-theme16.component.css']
})
export class PdpTheme16Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme9/pdp-theme9.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme9/pdp-theme9.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme9',
  templateUrl: './pdp-theme9.component.html',
  styleUrls: ['./pdp-theme9.component.css']
})
export class PdpTheme9Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme17/pdp-theme17.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme17/pdp-theme17.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme17',
  templateUrl: './pdp-theme17.component.html',
  styleUrls: ['./pdp-theme17.component.css']
})
export class PdpTheme17Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme21/pdp-theme21.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme21/pdp-theme21.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme21',
  templateUrl: './pdp-theme21.component.html',
  styleUrls: ['./pdp-theme21.component.css']
})
export class PdpTheme21Component implements OnInit {

  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme12/pdp-theme12.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme12/pdp-theme12.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme12',
  templateUrl: './pdp-theme12.component.html',
  styleUrls: ['./pdp-theme12.component.css']
})
export class PdpTheme12Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme14/pdp-theme14.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme14/pdp-theme14.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme14',
  templateUrl: './pdp-theme14.component.html',
  styleUrls: ['./pdp-theme14.component.css']
})
export class PdpTheme14Component implements OnInit {

  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme1/pdp-theme1.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme1/pdp-theme1.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme1',
  templateUrl: './pdp-theme1.component.html',
  styleUrls: ['./pdp-theme1.component.css']
})
export class PdpTheme1Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValueName;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme5/pdp-theme5.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme5/pdp-theme5.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme5',
  templateUrl: './pdp-theme5.component.html',
  styleUrls: ['./pdp-theme5.component.css']
})
export class PdpTheme5Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme3/pdp-theme3.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme3/pdp-theme3.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme3',
  templateUrl: './pdp-theme3.component.html',
  styleUrls: ['./pdp-theme3.component.css']
})
export class PdpTheme3Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme11/pdp-theme11.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme11/pdp-theme11.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme11',
  templateUrl: './pdp-theme11.component.html',
  styleUrls: ['./pdp-theme11.component.css']
})
export class PdpTheme11Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme4/pdp-theme4.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme4/pdp-theme4.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme4',
  templateUrl: './pdp-theme4.component.html',
  styleUrls: ['./pdp-theme4.component.css']
})
export class PdpTheme4Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme6/pdp-theme6.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme6/pdp-theme6.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme6',
  templateUrl: './pdp-theme6.component.html',
  styleUrls: ['./pdp-theme6.component.css']
})
export class PdpTheme6Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme19/pdp-theme19.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme19/pdp-theme19.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme19',
  templateUrl: './pdp-theme19.component.html',
  styleUrls: ['./pdp-theme19.component.css']
})
export class PdpTheme19Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme20/pdp-theme20.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme20/pdp-theme20.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme20',
  templateUrl: './pdp-theme20.component.html',
  styleUrls: ['./pdp-theme20.component.css']
})
export class PdpTheme20Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme10/pdp-theme10.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme10/pdp-theme10.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme10',
  templateUrl: './pdp-theme10.component.html',
  styleUrls: ['./pdp-theme10.component.css']
})
export class PdpTheme10Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme13/pdp-theme13.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme13/pdp-theme13.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme13',
  templateUrl: './pdp-theme13.component.html',
  styleUrls: ['./pdp-theme13.component.css']
})
export class PdpTheme13Component implements OnInit {

  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


  async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-layout/fullscreen-pdp-image/fullscreen-pdp-image.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/fullscreen-pdp-image/fullscreen-pdp-image.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AfterViewInit, Component, ElementRef, Inject, ViewChild, OnInit} from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-fullscreen-pdp-image',
  templateUrl: './fullscreen-pdp-image.component.html',
  styleUrls: ['./fullscreen-pdp-image.component.css']
})
export class FullscreenPdpImageComponent implements OnInit {

   @ViewChild('imgRef', { static: false }) imgRef!: ElementRef<HTMLImageElement>;

  private scale = 1;
  private lastScale = 1;
  private startX = 0;
  private startY = 0;
  private translateX = 0;
  private translateY = 0;



  constructor(@Inject(MAT_DIALOG_DATA) public data: { imageUrl: string }) { }

  ngOnInit() {
  }


  ngAfterViewInit() {
    const img = this.imgRef.nativeElement;

    let initialDistance = 0;

    img.addEventListener('touchstart', (e) => {
      if (e.touches.length === 2) {
        initialDistance = this.getDistance(e.touches[0], e.touches[1]);
        this.lastScale = this.scale;
      } else if (e.touches.length === 1) {
        this.startX = e.touches[0].clientX - this.translateX;
        this.startY = e.touches[0].clientY - this.translateY;
      }
    });

    img.addEventListener('touchmove', (e) => {
      e.preventDefault(); // prevent scroll

      if (e.touches.length === 2) {
        const newDistance = this.getDistance(e.touches[0], e.touches[1]);
        this.scale = Math.max(1, this.lastScale * (newDistance / initialDistance));
      } else if (e.touches.length === 1 && this.scale > 1) {
        this.translateX = e.touches[0].clientX - this.startX;
        this.translateY = e.touches[0].clientY - this.startY;
      }

      this.applyTransform(img);
    });

    img.addEventListener('touchend', () => {
      // Optional: Reset pan if needed
    });
  }

  private getDistance(touch1: Touch, touch2: Touch): number {
    const dx = touch2.clientX - touch1.clientX;
    const dy = touch2.clientY - touch1.clientY;
    return Math.sqrt(dx * dx + dy * dy);
  }

  private applyTransform(img: HTMLElement) {
  if (this.scale > 1) {
    img.style.transform = `scale(${this.scale}) translate(${this.translateX / this.scale}px, ${this.translateY / this.scale}px)`;
  } else {
    img.style.transform = 'none'; // Reset to normal view
  }
}


}


--- ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme8/pdp-theme8.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-layout/pdp-theme8/pdp-theme8.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PromotionService } from 'src/app/service/promotion.service';
import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, Renderer2, Inject, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AttributeResponse } from 'src/app/models/AttributeResponse';
import { AttributeValueResponse } from 'src/app/models/AttributeValueResponse';
import { CartItemVariant } from 'src/app/models/CartItemVariant';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { WishListResponse } from 'src/app/models/WishListResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DataService } from 'src/app/service/data.service';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ActivatedRoute } from '@angular/router';
import { PdpContent } from 'src/app/models/PdpContent';
import { DOCUMENT } from '@angular/common';
import { Subscription } from 'rxjs';
import { Router, NavigationStart } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { SharedService } from 'src/app/service/shared-service/shared.service';

\1
  standalone: true,
  selector: 'app-pdp-theme8',
  templateUrl: './pdp-theme8.component.html',
  styleUrls: ['./pdp-theme8.component.css']
})
export class PdpTheme8Component implements OnInit {
  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;
  private routerSubscription!: Subscription;
  isPlaying = false;
  showControls = false;
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;
  @Input() data!:PdpContent
  @Input() product!:ProductResponse;
  @Input() currencySymbol !: string;
  awsUrl = environment.awsKey;
  currentIndex:any=0;
  currency = this.tokenStorage.getCurrency() ? this.tokenStorage.getCurrency().symbol: '';

  attributeNames!: string[];
  showVideo: boolean = false;
  mainImage!: string;
  color!: string;
  productImages!: string[];
  filteredValues: string[] = [];
  imagepath:string='./assets/img/default-product.png'
  images: any[] = [
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
    '../../../assets/img/items/gs1.png',
    '../../../assets/img/items/gs2.png',
    '../../../assets/img/items/gs3.png',
    '../../../assets/img/items/gs4.png',
  ];

  colorAttribute!: AttributeResponse;
  attributes: AttributeResponse[] = [];
  filteredAttributes: AttributeResponse[] = [];
  filteredColors: string[] = [];
  skus: number[] = [];
  awsURL = environment.awsKey;
  selectedSkuId!: number;
  selectedSkuPrice!: number;
  noOfProducts = 100;
  price = 0;
  salePrice: number = 0;
  quantity = 1;
  errorMessage!: string;
  message!: string;
  userWishlists: WishListResponse[] = [];
  selectedMainSku!: MainAttributeDto;
  selectedSku!: ProductVarientDTO;
  attrValue: CartItemVariant[] = [];
  sessionResponse!: SessionResponse;
  selectedImageIndex: number = 0;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  themeName: string = 'FourthTheme';
  currentAttribute !: string;
  secondAttributesList: any[] = [];
  thirdAttributesList: any[] = [];
  firstTimeThirdAttributes: any[] = [];
  isFirstTime: boolean = true;
  subdomain: string = '';
  selectedAttributeId: number | null = null;
  selectedSecondAttributeId: number | null = null;
  selectedThirdAttributeId: number | null = null;
  firstTimeCalled: boolean = false;
  exceedQuantity: boolean = false;
  routeSubscription!: Subscription;
  customOptions: OwlOptions = {
    loop: true,
    items:4,
    margin: 20,
    autoWidth:true,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 3
      },
      400: {
        items: 4
      },
      740: {
        items: 4
      },
      940: {
        items: 4
      }
    },
  }
  businessID = Number(this.tokenStorage.getBusinessID());
  secondAttribute!: string;
  thirdAttribute!: string;
  @Output() productSkuChanges = new EventEmitter<ProductResponse>();
  filterList!: string[];

  constructor(
    private router: Router,
    private tokenStorage: TokenStorageService,
    private renderer: Renderer2,
    @Inject(DOCUMENT) private document: Document,
    private shoppingCartService: ShoppingCartService,
    private dataService: DataService,
    public dialog: MatDialog,
    private wishlistService: WhishlistService,
    private promotionService: PromotionService,
    private stoeSession: StoreUsersSessionsService,private route: ActivatedRoute,
    private cookieDate: CookieDataServiceService, private catalogService: CatalogServiceService,
    private cdr: ChangeDetectorRef, private sharedService: SharedService
    ) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain']
    this.quantity = 1;
    this.filteredColors = [];

    this.routeSubscription = this.route.params.subscribe(async (params) => {
    const productId = params['id'];
      if (productId) {
         const storedFilters = localStorage.getItem('filter-attrs');
        if (storedFilters && storedFilters !== 'undefined') {
          this.filterList = JSON.parse(storedFilters);
        }
        await this.loadProductDate(productId, this.filterList);
    }
    });

    this.getThemeName();
     // Add the class to the <body> tag
     this.renderer.addClass(this.document.body, 'pdp-detail-layout-page');

     // Listen for route changes and remove the class when navigating away
     this.routerSubscription = this.router.events.subscribe(event => {
       if (event instanceof NavigationStart) {
         this.renderer.removeClass(this.document.body, 'pdp-detail-layout-page');
       }
     });
  }

  ngOnDestroy(): void {
    // Clean up the router subscription to avoid memory leaks
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    if (this.routeSubscription) {
      this.routeSubscription.unsubscribe();
    }
  }

  selectedColorAttribute(value: any, attributeValue: string) {
    // Reset the `isShowEdit` property for all SKUs to false
    this.product.mainAttributeDtos.forEach(sku => sku.isShowEdit = false);

    // Toggle the `isShowEdit` property of the clicked SKU
    value.isShowEdit = !value.isShowEdit;

    // Update the selected SKU
    this.selectedMainSku = value;

    // Clear and set product images based on the selected SKU
    this.product.images = [...value.imageUrls];
    // Update the current attribute with the selected value
    this.currentAttribute = attributeValue;

    // Reset the selected attributes for the second and third loops
    this.selectedSecondAttributeId = null;
    this.selectedThirdAttributeId = null;

    // Load additional attributes if other selected product attributes exist
    if (this.product.otherSelectedProductAttributes.length > 0) {
        this.listPdpAttributesByProduct(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId);
    }
    this.sharedService.setMainSku(this.selectedMainSku);
    // Update the price and sale price if the selected SKU has a price
    if (value.price && value.price > 0) {
        this.price = this.product.price;
        if((this.product?.priceVary == null || !this.product?.priceVary)){
          this.salePrice = value.price;
        }
        if(this.product?.priceVary == true && value?.productVarientDTOs?.length == 0){
          this.salePrice = value.price;
        }
    } else {
        this.price = this.product.price;
    }

    // Ensure the main image URL is added if it exists and isn't already included
    if (value.mainImageUrl != null && !this.product.images.includes(value.mainImageUrl)) {
        this.product.mainImageUrl = value.mainImageUrl;
        this.product.images.push(value.mainImageUrl);
    }

    // Update the number of available products
    this.noOfProducts = value.availableQuantity;
    this.productSkuChanges.emit(this.product);
    this.cdr.detectChanges();
}

  async selectedOtherAttribute(value: any,type: 'second' | 'third'){
    if (type === 'second') {
      this.selectedSecondAttributeId = value.productAttribute.id;
      this.secondAttribute = value.productAttribute.attributeValue;
    } else if (type === 'third') {
      this.selectedThirdAttributeId = value.productAttribute.id;
      this.thirdAttribute = value.productAttribute.attributeValue;
    }
    this.selectedSku = value;
    if(value.skuId == null){
     await this.listPdpAttributesByProductAndAttribute(this.product.id, this.selectedMainSku.attributeDTO.attributeValueId, value.productAttribute.attributeValueId);
      this.firstTimeThirdAttributes = [];
    }
    this.sharedService.setSku(this.selectedSku);

    if (value.price && value.price > 0) {
      this.price = this.product.price;
      this.salePrice = value.price;
      this.product.minPrice = null!;
      this.product.maxPrice = null!;
    } else {
        this.price = this.product.price;
    }
    this.noOfProducts = value?.availableQuantity;
    this.productSkuChanges.emit(this.product);
  }

  loadProductDate(productId: number, filters: string[]) {
    this.catalogService.getProductByIdAndBusinessIdAndFilters(productId, this.businessID, filters).subscribe(
      async data => {
        if (!data || !data?.data?.getProductByIdAndBusinessIdAndFilters) {
          return;
        }
        this.product = data?.data?.getProductByIdAndBusinessIdAndFilters;
        this.price = this.product?.price;
        this.salePrice = this.product?.salePrice;
        this.noOfProducts = this.product?.quantity;
        for(let sku of this.product?.mainAttributeDtos){
          if(sku.defaultSku){
            let attributeValue;
            if(this.product.mainAttributeDtos[0].attributeDTO.isColor){
              attributeValue = sku.attributeDTO.attributeValueName;
            } else {
              attributeValue = sku.attributeDTO.attributeValue;
            }
            await this.selectedColorAttribute(sku, attributeValue);
            this.cdr.detectChanges();
          }
        }
        if(this.sessionResponse?.userType !== "GENERIC"){
          (await this.wishlistService.getCustomerWishList()).subscribe(
            data => {
              console.log(data)
              this.userWishlists = data?.data?.getCustomerWishList;
              this.userWishlists = this.userWishlists?.filter(wishItem => wishItem.itemId == this.product.id);
              if(this.userWishlists?.length == 1){
                this.product.addedToWishlist = true;
              }
            }
          );
        }
        this.cdr.detectChanges();
      }
    );
  }

  listPdpAttributesByProduct(productId: number, mainAttributeId: number){
    this.catalogService.listPdpAttributesByProduct(productId, mainAttributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProduct == null) {
          return;
        }
        this.secondAttributesList = data?.data?.listPdpAttributesByProduct;
        if(this.isFirstTime){
          this.firstTimeThirdAttributes = this.product?.otherSelectedProductAttributes?.filter(product => product.attributeId !== this.secondAttributesList[0].productAttribute.attributeId);
          this.isFirstTime = false;
        }
      }
    );
  }

  listPdpAttributesByProductAndAttribute(productId: number, mainAttributeId: number, attributeId: number){
    this.catalogService.listPdpAttributesByProductAndAttribute(productId, mainAttributeId, attributeId).subscribe(
      data => {
        if (data?.data?.listPdpAttributesByProductAndAttribute == null) {
          return;
        }
        this.thirdAttributesList = data?.data?.listPdpAttributesByProductAndAttribute;
      }
    );
  }

  async addItemToCart(){
    if(this.selectedSku && !this.selectedSku.skuId && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedSku == null && this.selectedMainSku != null && this.selectedMainSku.productVarientDTOs.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.selectedMainSku == null && this.product.mainAttributeDtos.length > 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'ALL_ATTRIBUTES_REQUIRED' }
      });
     return;
    }
    if(this.noOfProducts == 0){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'OUT_OF_STOCK'}
      });
     return;
    }
    if(this.quantity > this.noOfProducts){
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'NO_ENOUGH_QUANTITY'}
      });
     return;
    }
    this.firstTimeCalled = true;
    (await this.shoppingCartService.addItemToCart(Number(this.tokenStorage.getBusinessID()), this.product.id, this.selectedSku ? this.selectedSku.skuId : null,
      this.quantity, this.price, this.product.promotionId ? this.product.promotionId : null, this.salePrice ? this.salePrice : null, this.product.categoryId ? this.product.categoryId : null,
      this.selectedMainSku ? this.selectedMainSku.skuId : null)).subscribe(
      data => {
        if(data?.errors){
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
        if(data?.data?.addItemToCart != null){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_CART'}});
          this.firstTimeCalled = false;
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }
      }
      );
  }

  checkQuantity(event: any){
    const input = event?.target as HTMLInputElement;
    if (this.product?.availableQuantity !== null && this.quantity > this.product?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedMainSku?.availableQuantity !== null && this.quantity > this.selectedMainSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    if (this.selectedSku?.availableQuantity !== null && this.quantity > this.selectedSku?.availableQuantity) {
        this.exceedQuantity = true;
        return;
    }
    this.exceedQuantity = false;
  }


 async addItemToFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.addItemToWishList != null){
          this.product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST'}});
          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse?.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              console.log('getUserIpAddress ====== ',ip);
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data.data.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async removeItemFromFovarite(itemId: number){
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(Number(this.tokenStorage.getBusinessID()), itemId)).subscribe(
      data => {
        if(data?.data?.removeItemFromWishList != null){
          this.product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.notifyOther({refresh: true});
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{ title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST'}});
        }else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }


  selectImage(imagesrc: any,index:any) {
    this.imagepath = imagesrc;
    this.currentIndex = index;
    this.product.mainImageUrl = imagesrc;
    this.showVideo = false;
  }

  selectValue(attribute: AttributeResponse, value: AttributeValueResponse){
    attribute?.attributeValues?.forEach(valu => valu.isActive = false);
    value.isActive = true;
  }

  selectMainSku(mainSku: MainAttributeDto){
    this.product?.mainAttributeDtos?.forEach(sku => sku.isShowEdit = false);
    mainSku.isShowEdit = true;
  }

  onImageClick(index: number, image: string) {
    this.selectedImageIndex = index;
    this.product.mainImageUrl = image;
  }

  scrollToTop(): void {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrollToBottom(): void {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;
  }



scrollToSection(sectionId: string) {
  const sectionElement = document.getElementById(sectionId);
  if (sectionElement) {
    sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

getThemeName(): void {
  const themeDashboard = sessionStorage.getItem('theme-dashboard');
  if (themeDashboard) {
    const themeDashboardObj = JSON.parse(themeDashboard);
    this.themeName = themeDashboardObj.themeName;
  }
}
increaseQuantity(): void {
  this.quantity++;
  this.checkQuantity(this.quantity);
}

decreaseQuantity(): void {
  if (this.quantity > 1) {
    this.quantity--;
  }
  this.checkQuantity(this.quantity);
}

enableVideo(){
  this.showVideo = true;
}

 playVideo() {
    this.videoPlayer.nativeElement.play();
  }

  onPlay() {
    this.isPlaying = true;
    this.showControls = true;
  }

  onPause() {
    this.isPlaying = false;
    this.showControls = false;
  }



}

--- ./site-themes/four-theme/four-new-product-details/four-product-info/four-product-info.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-info/four-product-info.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { PdpContent } from 'src/app/models/PdpContent';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { environment } from 'src/environments/environment';
import { ChartType } from 'chart.js';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { MainAttributeDto } from 'src/app/models/MainAttributeDto';
import { ProductVarientDTO } from 'src/app/models/ProductVarientDTO';
import { ProductService } from 'src/app/service/product.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';


\1
  standalone: true,
  selector: 'app-four-product-info',
  templateUrl: './four-product-info.component.html',
  styleUrls: ['./four-product-info.component.scss']
})
export class FourProductInfoComponent implements OnInit {
  @Input() data!:PdpContent;
  @Input() product!:ProductResponse;
  awsUrl=environment.awsKey;
  @Input() productReviews : any[] = [];
  @Input() pageType!:string;
  @Input() activeTheme:string='';
  sanitizedDescription!: SafeHtml;
  themeName: string = 'FourthTheme';
  chartData: any;
  chartType: ChartType = 'line';
  chartOptions = {
    responsive: true,
    scales: {
      x: {
        beginAtZero: true,
        title: {
          display: true,
          text: 'Month'
        }
      },
      y: {
        beginAtZero: true,
        title: {
          display: true,
          text: 'Price'
        }
      }
    }
  };
  mainSku!:MainAttributeDto;
  sku!:ProductVarientDTO;
  user = this.tokenStorageService.getUser();

  constructor(private sharedService: SharedService, private productService : ProductService,
    private sanitizer: DomSanitizer,
    private tokenStorageService: TokenStorageService,
  ) { }

  async ngOnInit() {
     this.sanitizeDescription();
    this.sharedService.getMainSku().subscribe(mainSku => {
      this.mainSku = mainSku
    })
    this.sharedService.getSku().subscribe(sku => {
      this.sku = sku
    })
    await this.createProductBrowseHistory();
    this.getThemeName();
    this.setupChartData();
  }

   sanitizeDescription() {
    if (this.product?.description) {
      this.sanitizedDescription = this.sanitizer.bypassSecurityTrustHtml(this.product.description);
    }
  }

  ngOnChanges() {
    this.sanitizeDescription();
  }

  async createProductBrowseHistory() {
    if (this.user) {
      (await this.productService
        .createProductBrowseHistory(Number(this.tokenStorageService.getBusinessID()), this.product.id))
        .subscribe(r => {
          if (r?.errors){
            return;
          }
        });
    }
  }

  getThemeName(): void {
    let storeKey;
    if(environment.env !== 'local'){
      storeKey = window.location.hostname;
    } else {
      const path = window.location.pathname;
      storeKey = path.split('/')[1];
    }

    const themeDashboard = sessionStorage.getItem('theme-dashboard' + `_${storeKey}`);
    if (themeDashboard) {
      const themeDashboardObj = JSON.parse(themeDashboard);
      this.themeName = themeDashboardObj.themeName;
    }
  }

  setupChartData() {
    const labels = this.product?.priceHistory?.map(item => item?.month);
    const oldPriceData = this.product?.priceHistory?.map(item => item?.oldPrice);
    const newPriceData = this.product?.priceHistory?.map(item => item?.price);

    this.chartData = {
      labels: labels,
      datasets: [
        {
          label: 'New Price',
          data: newPriceData,
          borderColor: 'rgba(54, 162, 235, 1)',
          backgroundColor: 'rgba(54, 162, 235, 0.2)',
          fill: false,
        }
      ]
    };
  }

  calculatePercentage(oldPrice: number | null, price: number): string {
    if (oldPrice === null || oldPrice === 0) {
        return '-';
    }
    const percentage = ((price - oldPrice) / oldPrice) * 100;
    return `${percentage >= 0 ? '+' : ''}${percentage.toFixed(2)}%`;
}

}

--- ./site-themes/four-theme/four-new-product-details/four-product-details-customer-reviews/four-product-details-customer-reviews.component.ts
+++ ./site-themes/four-theme/four-new-product-details/four-product-details-customer-reviews/four-product-details-customer-reviews.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { ProgressBarMode } from '@angular/material/progress-bar';
import { ActivatedRoute } from '@angular/router';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ProductService } from 'src/app/service/product.service';
import { ReviewService } from 'src/app/service/review.service';
import { environment } from 'src/environments/environment';
import { ReviewImageViewComponent } from '../reviewImageView/reviewImageView.component';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpContent } from 'src/app/models/PdpContent';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';


\1
  standalone: true,
  selector: 'app-four-product-details-customer-reviews',
  templateUrl: './four-product-details-customer-reviews.component.html',
  styleUrls: ['./four-product-details-customer-reviews.component.scss']
})
export class FourProductDetailsCustomerReviewsComponent implements OnInit {

  @Input() data!:PdpContent
  @Input() activeTheme:string=''
  productReviews : any[] = [];
  rate=3;
  mode: ProgressBarMode = 'determinate';
  value = 100;
  bufferValue = 75;
  awsUrl = environment.awsKey;
  count = 0;
  total = 0;
  avg = 0;
  fiveStars = 0;
  fourStars = 0;
  threeStars = 0;
  twoStars = 0;
  oneStars = 0;
  productId!: number;
  getAllDisabled: boolean = false;
  user = this.tokenStorageService.getUser();
  constructor(
    private reviewService : ReviewService,
    private productService : ProductService,
    private route: ActivatedRoute,
    private tokenStorageService: TokenStorageService,
    public dialog: MatDialog
    ) { }

  ngOnInit() {
    this.route.params.subscribe(routeParam => {
      this.productId = routeParam['id'];
      this.getReviews(this.productId, 1, 10);
      this.productReviews;
    });
  }


  private getReviews(productId: number, pageNumber: number, pageSize: number) {
    this.reviewService.getAllReviewOfProduct(productId, pageNumber, pageSize).subscribe(
      async data => {
        if (data?.data?.getAllReviewOfProduct?.length > 0) {
          this.productReviews = data?.data?.getAllReviewOfProduct;
          this.productReviews?.forEach(review => {
            this.count += 1;
            this.total += review?.rating;
          });
          this.avg = this.total / this.count;
          this.fiveStars = this.productReviews?.filter(review => review?.rating == 5)?.length / this.count * 100;
          this.fourStars = this.productReviews?.filter(review => review?.rating == 4)?.length / this.count * 100;
          this.threeStars = this.productReviews?.filter(review => review?.rating == 3)?.length / this.count * 100;
          this.twoStars = this.productReviews?.filter(review => review?.rating == 2)?.length / this.count * 100;
          this.oneStars = this.productReviews?.filter(review => review?.rating == 1)?.length / this.count * 100;
        }
      }
    );
  }

  async getAllReviews(){
    this.count = 0;
    this.total = 0;
    this.getAllDisabled = true;
    await this.getReviews(this.productId, 1, 40);
  }



  reviewImageView(imageUrl: string) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = { imageUrl: imageUrl };
    const dialogRef = this.dialog.open(ReviewImageViewComponent, {
      panelClass: 'modal-medium-width',
      data: dialogConfig.data
    });
  }

  async agreeOnReview(reviewId: number){
     (await this.reviewService.agreeOnReview(reviewId)).subscribe(
      data => {
        if(data?.data?.agreeOnReview != null){
          this.count = 0;
          this.total = 0;
          this.getReviews(this.productId, 1, 10);
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
             data:{ title: 'SUCCESS', message: data?.data?.agreeOnReview?.message}});
        }else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async disagreeOnReview(reviewId: number){
    (await this.reviewService.disagreeOnReview(reviewId)).subscribe(
     data => {
       if(data?.data?.disagreeOnReview != null){
        this.count = 0;
        this.total = 0;
        this.getReviews(this.productId, 1, 10);
         this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
            data:{ title: 'SUCCESS', message: data?.data?.disagreeOnReview?.message}});
       }else {
         this.dialog.open(NotifacationMessageComponent, {
           backdropClass: 'notificationmodal-popup',
           width: '450px',
           data: { title: '', message: data?.errors[0]?.errorMessage}
         });
       }
     }
   );
 }

}

--- ./site-themes/four-theme/four-new-product-details/reviewImageView/reviewImageView.component.ts
+++ ./site-themes/four-theme/four-new-product-details/reviewImageView/reviewImageView.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-reviewImageView',
  templateUrl: './reviewImageView.component.html',
  styleUrls: ['./reviewImageView.component.css']
})
export class ReviewImageViewComponent implements OnInit {

  imageUrl!: string;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }

  ngOnInit() {

    this.imageUrl = this.data.imageUrl;

  }

}

--- ./site-themes/four-theme/subscribe-marketing/subscribe-marketing.component.ts
+++ ./site-themes/four-theme/subscribe-marketing/subscribe-marketing.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-subscribe-marketing',
  templateUrl: './subscribe-marketing.component.html',
  styleUrls: ['./subscribe-marketing.component.css']
})
export class SubscribeMarketingComponent implements OnInit {
  email: string = '';
  emailInvalid: boolean = false;
  businessId = Number(this.tokenStorageService.getBusinessID()!);

  constructor(public dialog: MatDialog, public dialogRef: MatDialogRef<SubscribeMarketingComponent>,
    private businessSettingService: BusinessSettingService, private tokenStorageService: TokenStorageService
  ) { }

  ngOnInit() {
  }

  async subscribe() {
    if(!this.email || this.email.match(/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&]).{8,}/)){
      this.emailInvalid = true;
    }
    (await this.businessSettingService.subscribe(this.email, this.businessId)).subscribe(
      data => {
        if (data?.data?.subscribe != null) {
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'EMAIL_ADDED_SUCCESS' } });
          this.dialogRef.close({ event: 'close'});
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: data.errors[0].errorMessage }
          });
        }
      }
    );
    }
}

--- ./site-themes/four-theme/four-brand-logos-slider/four-brand-logos-slider.component.ts
+++ ./site-themes/four-theme/four-brand-logos-slider/four-brand-logos-slider.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-brand-logos-slider',
  templateUrl: './four-brand-logos-slider.component.html',
  styleUrls: ['./four-brand-logos-slider.component.scss']
})
export class FourBrandLogosSliderComponent implements OnInit {
  @Input() data:any=[];
  awsUrl = environment.awsKey;
  arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
  arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';


  constructor() { }
  customOptions: OwlOptions = {
    loop: true,
    margin: 20,
    nav: true, // Add this option to enable navigation arrows
    dots: true,
    navSpeed: 700,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`, `<img src="${this.arrowright}" alt="RIGHT">`],
    responsive: {
      0: {
        items: 2
      },
      400: {
        items: 3
      },
      740: {
        items: 5
      },
      940: {
        items: 5
      }
    },
  }
  ngOnInit() {

  }

}

--- ./site-themes/four-theme/four-theme-my-account/four-theme-my-account.component.ts
+++ ./site-themes/four-theme/four-theme-my-account/four-theme-my-account.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, ElementRef, OnInit, QueryList, ViewChildren } from '@angular/core';
import { Country } from 'src/app/models/country';
import { firstValueFrom } from 'rxjs/internal/firstValueFrom';
import { AddressService } from 'src/app/service/Address.service';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { AddAddressComponent } from './add-address/add-address.component';
import { AddPaymentComponent } from './add-payment/add-payment.component';
import { UnsubscribedwarningComponent } from './unsubscribedwarning/unsubscribedwarning.component';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';
import { Ng2ImgMaxService } from 'ng2-img-max';
import { AuthService } from 'src/app/service/auth.service';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { Address, CCInfo } from 'src/app/models/user';

\1
  standalone: true,
  selector: 'app-four-theme-my-account',
  templateUrl: './four-theme-my-account.component.html',
  styleUrls: ['./four-theme-my-account.component.css']
})
export class FourThemeMyAccountComponent implements OnInit {

  newImageSrc: string | ArrayBuffer | null = '';
  subdomain!: string;
  phoneCode: string = '1';
  phoneOtpCodeVerified: boolean = false;
  emailOtpCodeVerified: boolean = false;
  verifyNumber: boolean = false;
  verifyEmail: boolean = false;
  countries: Country[] = [];
  searchText: string = '';
  phoneNumber!: number;
  email: string = ''
  emailOtpCode: string[] = ['', '', '', '', '', ''];
  mobileOtpCode: string[] = ['', '', '', '', '', ''];

  showaddAddress: boolean = false;
  showaddPayment: boolean = false;

  isSubscribed: boolean = false;
  user = this.tokenStorageService.getUser();
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  awsUrl = environment.awsKey;
  profileImage!: File;
  imageSrc!: string | ArrayBuffer;
  uploadImageFile!: File;
  correctOTP = '123456';
  otp = ['', '', '', '', '', ''];
  validateemailshow: boolean = false;
  verifyToken: string = '';
  otpRequired: boolean = false;
  emailRequired: boolean = false;
  resetEmailOtp: boolean = false;
  obsecuredEmail: string = '';
  receivedResponse: boolean = false;
  otpCalled = false;
  otpNotValid: boolean = false;
  emailVerified: boolean = false;
  verifyTokenNotValid: boolean = false;
  emailNotProvided: boolean = false;
  @ViewChildren('otpInput') otpInputs!: QueryList<ElementRef<HTMLInputElement>>;
  verifyButton: boolean = false;
  emailButton: boolean = false;
  private userDataSubscription!: Subscription;
  emailChanged: boolean = false;
  currentEmail = this.user?.email;
  emailNotCorrect:boolean = false;
  addresses: any[] = this.user?.addressList;


  constructor(private cdr: ChangeDetectorRef,public addressService: AddressService,public dialog: MatDialog, private authService: AuthService,
    private businessSettingService: BusinessSettingService, private tokenStorageService: TokenStorageService, private ng2ImgMax: Ng2ImgMaxService,
    private sharedService: SharedService,private router: Router,
    private route: ActivatedRoute,
  ) { }

 async ngOnInit() {
  this.subdomain = this.route.snapshot.params['subdomain'];
  if (environment.env !== 'local') {
    this.subdomain = '';
  }
  if(!this.user){
    this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    return;
  }
   this.getUpdatedUserData();
   this.addresses = this.user?.addressList
   if(this.user && this.user?.userType === 'FAZEAL_REGISTERED') {
    this.loadAddresses(true);
   }
   if(this.user && this.user?.userType === 'STORE_REGISTERED') {
    this.loadAddresses(false);
   }
   await this.loadCountries();
   await this.getSubscribedStatus();
      setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  loadAddresses(fazealUser: boolean) {
    this.addressService.getUserAllAddresses(this.businessId, this.user.id, fazealUser).subscribe(
      data => {
        if(data?.errors){
          return;
        }
        this.addresses = data?.data?.getAddress;
        this.user.addressList = this.addresses;
        this.tokenStorageService.saveUser(this.user, this.tokenStorageService.isRememberMe);
      }
    );
}

  getUpdatedUserData() {
    this.userDataSubscription = this.sharedService.getUserData().subscribe(data => {
      if(data.id){
        this.user = data;
        this.loadAddresses(false);
      }
    });
  }

  ngOnDestroy() {
    if (this.userDataSubscription) {
      this.userDataSubscription.unsubscribe();
    }
  }

  selectCode(code: string) {
    this.phoneCode = code;
    this.phoneOtpCodeVerified = false;
    this.verifyNumber = false;
  }

  async loadCountries() {
    const response = await firstValueFrom(this.addressService.getAllCountriesForBusiness())
    this.countries = response?.data?.getAllCountries;
    this.cdr.detectChanges();
  }

  onMenuItemClick(event: MouseEvent): void {
    event.stopPropagation();
  }
  onMenuClosedCountry() {
    this.searchText = '';
  }
  openVerifyNumber() {
    this.verifyNumber = true;
    this.verifyEmail = false;
  }

  onMobileOtpCodeChange(event: any, index: number) {
    if (event.target instanceof HTMLInputElement) {
      if (event.target.value.length < 2) {
        this.mobileOtpCode[index - 1] = event.target.value;
      }
    }
  }

  onEmailOtpCodeChange(event: Event, index: number) {
    if (event.target instanceof HTMLInputElement) {
      if (event.target.value.length < 2) {
        this.emailOtpCode[index - 1] = event.target.value;
      }
    }
  }

  openAddAddress() {
    this.showaddAddress = true;
  }

  addAddressPopup(){
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(AddAddressComponent,{ panelClass: 'modal-x-medium-width' });
    dialogRef.afterClosed().subscribe((result) => {
      if (result.data) {
        this.user?.addressList.push(result.data);
        this.tokenStorageService.saveUser(this.user, true);
      }
    });
  }

  addPaymentPopup(){
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(AddPaymentComponent,{ panelClass: 'modal-medium-width' });
    dialogRef.afterClosed().subscribe((result) => {
      if (result.result) {
        this.user?.paymentDetails.push(result.result);
        this.tokenStorageService.saveUser(this.user, true);
      }
    });
  }

  onToggleChange(): void {
    if (!this.isSubscribed) {
      const dialogConfig = new MatDialogConfig();
      const dialogRef = this.dialog.open(UnsubscribedwarningComponent,{ panelClass: 'modal-small-width' });
      dialogRef.afterClosed().subscribe((result) => {
        if(result.data && result.data !== undefined){
          this.unSubscribe();
        } else{
          this.isSubscribed = true;
        }
      });
    } else {
      this.subscribe();
    }
  }

  uploadProfileImage(event: any) {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];
      const reader = new FileReader();
      reader.onload = (e: any) => {
        this.imageSrc = e.target.result;
      };
      reader.readAsDataURL(file);
      this.profileImage = file;
      this.uploadUserProfile(this.profileImage);
    }
  }

  uploadUserProfile(image: File){
    this.authService.uploadUserProfilePhoto(image, this.user.id).subscribe(
      (response: any) => {
        if (response?.errors && response?.errors[0]) {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: response?.errors[0]?.errorMessage }
            });
            return;
        } else {
          this.user.profile = response?.data?.uploadProfileImage?.data;
          this.tokenStorageService.saveUser(this.user, true);
          this.sharedService.setUserData(this.user);
          this.dialog.open(SucessmsgPopupComponent, {
            backdropClass: 'notificationmodal-popup-sucess',
             data: { title: 'SUCCESS', message: 'IMAGE_UPLOAD_SUCCESS'
              }
             });
        }
      });
  }

  handleInput(event: Event, index: number, isLast: boolean): void {
    const inputValue = (event.target as HTMLInputElement).value;
    if (/^[0-9]$/.test(inputValue)) {
      this.otp[index] = inputValue;
      if (isLast && this.otp.join('') === this.correctOTP) {

      } else if (inputValue && index < this.otpInputs.length - 1) {
        const nextInput = this.otpInputs.toArray()[index + 1].nativeElement;
        nextInput.focus();
      }
    }
  }
  handleKeydown(event: KeyboardEvent, index: number): void {
    const allowedKeys = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight'];
    if (!/^[0-9]$/.test(event.key) && !allowedKeys.includes(event.key)) {
      event.preventDefault();
    }
  }

  async openVerifyEmail() {
    this.resetEmailOtp = true;
    setTimeout(() => {
      this.resetEmailOtp = false;
    }, 20000);
    const pattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,10}$";
    if (!this.user?.email || !this.user?.email?.match(pattern)) {
      this.emailRequired = true;
      return;
    }
    await this.generateEmailOtp(this.user?.email);

  }

  async generateEmailOtp(email: string) {
    this.emailButton = true;
    await this.authService.generateEmailVerificationOTP(email).toPromise().then(response => {
      if (response?.errors){
        this.emailButton = false;
        return;
      }
      this.dialog.open(SucessmsgPopupComponent, {
        backdropClass: 'notificationmodal-popup-sucess',
        data: { title: 'SUCCESS', message: 'OTP_GENERATED_SUCCESSFULLY'
      }
      });
      this.verifyEmail = true;
      this.emailRequired = false;
      this.emailVerified = false;
      this.validateemailshow = true;
    });
  }

  verifyUserEmail() {
    this.verifyButton = true;
    this.otpCalled = true;
    this.receivedResponse = false;
    let verifyToken = this.otp.join('');
    if (verifyToken?.length < 6) {
      this.verifyTokenNotValid = true;
      return;
    }
    this.verifyTokenNotValid = false;

    let email = this.user?.email;
    if (!this.user?.email) {
      this.emailNotProvided = true;
      return;
    }
    this.authService.verifyUserOTP(verifyToken, email, this.user?.id).subscribe(r => {
      if (r?.errors){
        this.verifyButton = false;
        return;
      }
      this.dialog.open(SucessmsgPopupComponent, {
        backdropClass: 'notificationmodal-popup-sucess',
         data: { title: 'SUCCESS', message: 'EMAIL_VERIFIED_SUCCESSFULLY'
          }
         });
      this.emailChanged = false;
      this.receivedResponse = true;
      this.emailVerified = r?.data?.verifyUserOTP;
      this.user.email = email;
      this.user.emailVerified = true;
      this.tokenStorageService.saveUser(this.user, true);
      this.sharedService.setUserData(this.user);
      this.otp = [""];
      this.validateemailshow = false;
    })
  }

  changingEmail(){
    this.emailNotCorrect = false;
    if (!this.user.email.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,10}$/)) {
      this.emailNotCorrect = true;
    }
    if(this.user.email === this.currentEmail){
      this.emailChanged = false;
    } else{
      this.emailChanged = true;
    }
  }


  async subscribe() {
    (await this.businessSettingService.subscribe(this.user?.email, this.businessId)).subscribe(
      data => {
        if (data?.data?.subscribe != null) {
          this.isSubscribed = true;
          this.user.isSubscribed = true;
          this.tokenStorageService.saveUser(this.user, true);
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'EMAIL_ADDED_SUCCESS' } });
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
    }

  async unSubscribe() {
    (await this.businessSettingService.unSubscribe(this.user?.email, this.businessId)).subscribe(
      data => {
        if (data?.data?.unsubscribe != null) {
          this.isSubscribed = false;
          this.user.isSubscribed = false;
          this.tokenStorageService.saveUser(this.user, true);
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'EMAIL_REMOVED_SUCCESS' } });
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
    }

    onAddressDeleted(addressData: Address){
      const indexToRemove = this.user?.addressList?.indexOf(addressData);
      if (indexToRemove !== -1) {
        this.user.addressList.splice(indexToRemove, 1);
      }
      this.tokenStorageService.saveUser(this.user, true);
      this.sharedService.setUserData(this.user);
    }

    onPaymentDeleted(paymentData: CCInfo){
      const indexToRemove = this.user?.paymentDetails?.indexOf(paymentData);
      if (indexToRemove !== -1) {
        this.user?.paymentDetails.splice(indexToRemove, 1);
      }
      this.tokenStorageService.saveUser(this.user, true);
      this.sharedService.setUserData(this.user);
    }

    getSubscribedStatus() {
      if(this.user){
        this.businessSettingService.getSubscribeStatus(this.businessId, this.user?.email).subscribe(data => {
          this.isSubscribed = data?.data?.getSubscribeStatus;
          this.user.isSubscribed = data?.data?.getSubscribeStatus;
          this.tokenStorageService.saveUser(this.user, true);
        });
      }
    }
}

--- ./site-themes/four-theme/four-theme-my-account/payment-listing/payment-listing.component.ts
+++ ./site-themes/four-theme/four-theme-my-account/payment-listing/payment-listing.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { AddPaymentComponent } from '../add-payment/add-payment.component';
import { CCInfo } from 'src/app/models/user';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { AddressService } from 'src/app/service/Address.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-payment-listing',
  templateUrl: './payment-listing.component.html',
  styleUrls: ['./payment-listing.component.css']
})
export class PaymentListingComponent implements OnInit {

  @Input() payment!: CCInfo;
  @Output() deletePaymentEvent = new EventEmitter<CCInfo>();
  user = this.tokenStorageService.getUser();
  constructor(public dialog: MatDialog, private tokenStorageService: TokenStorageService, private sharedService: SharedService,
    public addressService:AddressService
  ) { }

  ngOnInit() {
  }

  addPaymentPopup(){
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(AddPaymentComponent,{ panelClass: 'modal-medium-width' });
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.result) {
        this.user.paymentDetails.push(result?.result);
        this.tokenStorageService.saveUser(this.user, true);
        this.sharedService.setUserData(this.user);
      }
    });
  }

  deletePayment(ccId: number) {
    this.addressService.deletePayment(ccId, this.user.id).subscribe(
      (response) => {
        if(response?.errors) return;
        this.dialog.open(SucessmsgPopupComponent, {
          backdropClass: 'notificationmodal-popup-sucess',
           data: { title: 'SUCCESS', message: 'PAYMENT_DELETE_SUCCESS_ONLY'
            }
        });
        this.deletePaymentEvent.emit(this.payment);
      });
  }

}

--- ./site-themes/four-theme/four-theme-my-account/edit-address/edit-address.component.ts
+++ ./site-themes/four-theme/four-theme-my-account/edit-address/edit-address.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { Address } from 'src/app/models/user';
import { AddressService } from 'src/app/service/Address.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-edit-address',
  templateUrl: './edit-address.component.html',
  styleUrls: ['./edit-address.component.css']
})
export class EditAddressComponent implements OnInit {

  userInfo: any = this.tokenStorageService.getUser();
  message: any;
  errormessage: any;
  address!: Address;
  addressDesc!: string;
  route!: string;
  addressLine2!: string;
  countryName: any;
  stateName: any;
  cityName: any;
  zipCode!: string;
  streetNumber!: string;
  addressId!:number
  addAddressSuccessful!: boolean;
  addAddressFail!: boolean;
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  addressButton: boolean = false;
  errorMessage: any;
  countries: any[] = [];
  cities: any[] = [];
  states: any[] = [];
  selectedState : any;
  selectedCountry: any;
  selectedCity: any;

  constructor(public addressService:AddressService,
    private tokenStorageService: TokenStorageService,private cdr: ChangeDetectorRef,
    private dialog: MatDialog, public dialogRef: MatDialogRef<EditAddressComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any) { }

   async ngOnInit() {
  this.address = this.data;

  await this.getAllCountries();

  const selectedCountryObj = this.countries.find(e => e.name === this.data?.country);
  this.selectedCountry = selectedCountryObj?.id;

  await this.getAllStatesOfCountry(this.selectedCountry);

  const selectedStateObj = this.states.find(e => e.name === this.data?.state);
  this.selectedState = selectedStateObj?.id;

  await this.getAllCitiesOfState(this.selectedState);

  const selectedCityObj = this.cities.find(e => e.name === this.data?.city);
  this.selectedCity = selectedCityObj?.id; // Only the ID
}

 updateAddress(addressId: number) {
  if (addressId === undefined) {
    addressId = this.address.id;
  }

  const selectedCountryObj = this.countries.find(c => c.id === this.selectedCountry);
  const selectedStateObj = this.states.find(s => s.id === this.selectedState);
  const selectedCityObj = this.cities.find(c => c.id === this.selectedCity);

  this.addressButton = true;

  this.addressService.updateAddress(
    addressId,
    this.address.addressDescription,
    this.address.addressLine1,
    this.address.addressLine2,
    selectedCountryObj?.name,
    selectedStateObj?.name,
    selectedCityObj?.name,
    this.address.zipCode,
    this.address.streetNumber,
    this.userInfo.id,
    this.businessId,
    false,
    null,
    null,
    ''
  ).subscribe(response => {
    this.addressButton = false;

    if (response.errors) {
      return;
    }

    this.addAddressSuccessful = true;
    this.addAddressFail = false;
    this.dialogRef.close({ event: 'close', data: response?.data?.updateAddress?.data });
    this.dialog.open(SucessmsgPopupComponent, {
      backdropClass: 'notificationmodal-popup-sucess',
      data: {
        title: 'SUCCESS',
        message: 'ADDRESS_UPDATE_SUCCESS_ONLY'
      }
    });
  });
}


  public async getAllCountries() {
    await this.addressService.getAllCountriesForBusiness().toPromise().then(
      data => {
        if (data?.data?.getAllCountries == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.countries = data?.data?.getAllCountries;
      }
    )
  }

  private async getAllStatesOfCountry(id : number) {
    await this.addressService.getAllStatesOfCountry(id).toPromise().then(
      data => {
        if (data?.data?.getAllStatesOfCountry == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.states = data?.data?.getAllStatesOfCountry;
      }
    );
  }
  private async getAllCitiesOfState(id : number) {
    await this.addressService.getAllCitiesOfState(id).toPromise().then(
      data => {
        if (data?.data?.getAllCitiesOfState == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.cities = data?.data?.getAllCitiesOfState;
      }
    );
  }

  countrySelected(country: any) {
    if (country && country.id) {
      this.cdr.detectChanges();
      this.getAllStatesOfCountry(country.id);
    }
  }

  stateSelected(state : any){
    if(state && state.id){
      this.selectedState = state;
      this.getAllCitiesOfState(state.id);
      this.cdr.detectChanges();
    }
  }


   onCountryChange(countryId: number) {
     this.selectedCountry = countryId;
     this.selectedState = null;
     this.selectedCity = null;
     this.stateName = '';
     this.cityName = '';
     this.states = [];
     this.cities = [];
     const country = this.countries.find(c => c.id === countryId);
     this.countryName = country ? country.name : '';
     if (countryId) {
       this.getAllStatesOfCountry(countryId);
     }
   }

   onStateChange(stateId: number) {
     this.selectedState = stateId;
     this.selectedCity = null;
     this.cityName = '';
     this.cities = [];
     const state = this.states.find(s => s.id === stateId);
     this.stateName = state ? state.name : '';
     if (stateId) {
       this.getAllCitiesOfState(stateId);
     }
   }

   onCityChange(cityId: number) {
   this.selectedCity = cityId;
  const city = this.cities.find(c => c.id === cityId);
  this.cityName = city ? city.name : '';
   }
}

--- ./site-themes/four-theme/four-theme-my-account/add-address/add-address.component.ts
+++ ./site-themes/four-theme/four-theme-my-account/add-address/add-address.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { City, Country, State } from 'src/app/models/country';
import { Address } from 'src/app/models/user';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { AddressService } from 'src/app/service/Address.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-add-address',
  templateUrl: './add-address.component.html',
  styleUrls: ['./add-address.component.css']
})
export class AddAddressComponent implements OnInit {

  placeName: string = '';
  streetNumber: any;
  route: any;
  cityName: any;
  stateName: any;
  countryName: any;
  languageFileName = 'en';
  addresses: Address[] = [];
  addressSelected: boolean = false;
  country!: Country;
  state!: State;
  city!: City;
  selectedCity: any;
  addressDesc: string = '';
  addressLine1: string = '';
  addressLine2: string = '';
  zipCode: string = '';
  addAddressFail: boolean = false;
  addAddressSuccessful: boolean = false;
  defaultBillingOnCreateAddress: boolean = false;
  defaultShippingOnCreateAddress: boolean = false;
  address!: Address;
  user = this.tokenStorageService.getUser();
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  addressButton: boolean = false;
  countries : any[] = [];
  cities : any[] = [];
  states : any[] = [];
  selectedState : any;
  selectedCountry: any;
  errorMessage: any;

  constructor(private dialog: MatDialog, private addressService: AddressService, private tokenStorageService: TokenStorageService,
    public dialogRef: MatDialogRef<AddAddressComponent>
  ) { }

  ngOnInit() {
    this.getAllCountries();
  }

  saveUserAddress() {
    this.addressButton = true;
    const addressDescription = this.addressDesc ? this.addressDesc.trim() : '';
    const addressLine1 = this.route ? this.route.trim() : '';
    const addressLine2 = this.addressLine2 ? this.addressLine2.trim() : '';
    const country = this.countryName ? this.countryName?.trim() : '';
    const state = this.stateName ? this.stateName?.trim() : '';
    const city =  this.cityName ? this.cityName?.trim() : '';
    const zipCode = this.zipCode ? this.zipCode.trim() : '';
    const streetNumber = this.streetNumber ? this.streetNumber.trim() : '';
    let defaultBilling = this.defaultBillingOnCreateAddress;
    let defaultShipping = this.defaultShippingOnCreateAddress;
    if (
      (country !== 'JO') &&
      (!addressDescription ||
      !addressLine1 ||
      !country ||
      !state ||
      !city ||
      !zipCode ||
      !streetNumber)
    ) {
      this.addAddressFail = true;
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: 'ERROR', message: 'ALL_ADDRESS_INFO_REQUIRED' }
      });
      this.addressButton = false;
      return;
    }
    if(defaultBilling == undefined){
      defaultBilling = false;
    }
    if(defaultShipping == undefined){
      defaultShipping = false;
    }
    this.addressButton = true;
    this.addressService
      .saveAddress(
        addressDescription,
        addressLine1,
        addressLine2,
        country,        // already string
        state,          // already string
        city,
        zipCode,
        streetNumber,
        defaultBilling,
        defaultShipping,
        this.user.id,
        this.businessId, false, null, null, ''
      )
      .subscribe(
        response => {
          if(response?.errors){
            this.addressButton = false;
            return;
          }
          this.address = response?.data?.saveAddress?.data;
          this.addAddressSuccessful = true;
          this.addAddressFail = false;
          this.dialogRef.close({ event: 'close', data: this.address });
          setTimeout(() => {
            this.addAddressSuccessful = false;
            this.addAddressFail = false;
          }, 1000);
          this.dialog.open(SucessmsgPopupComponent, {
            backdropClass: 'notificationmodal-popup-sucess',
             data: { title: 'SUCCESS', message: 'ADDRESS_SUCCESS_ONLY'
              }
          });
        });
  }

  public getAllCountries() {
    this.addressService.getAllCountriesForBusiness().subscribe(
      data => {
        if (data?.data?.getAllCountries == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return null;
        }
        this.countries = data?.data?.getAllCountries;
        return this.countries;
      }
    )
  }

  private getAllStatesOfCountry(id : number) {
    this.addressService.getAllStatesOfCountry(id).subscribe(
      data => {
        if (data?.data?.getAllStatesOfCountry == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.states = data?.data?.getAllStatesOfCountry;
      }
    );
  }
  private getAllCitiesOfState(id : number) {
    this.addressService.getAllCitiesOfState(id).subscribe(
      data => {
        if (data?.data?.getAllCitiesOfState == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.cities = data?.data?.getAllCitiesOfState;
      }
    );
  }


  countrySelected(country: any) {
    if (country && country.id) {
      this.selectedCountry = country;
      this.getAllStatesOfCountry(country.id);
    }
  }

  stateSelected(state : any){
    if(state && state.id){
      this.selectedState = state;
      this.getAllCitiesOfState(state.id);
    }
  }



   onCountryChange(countryId: number) {
     this.selectedCountry = countryId;
     this.selectedState = null;
     this.selectedCity = null;
     this.stateName = '';
     this.cityName = '';
     this.states = [];
     this.cities = [];
     const country = this.countries.find(c => c.id === countryId);
     this.countryName = country ? country.name : '';
     if (countryId) {
       this.getAllStatesOfCountry(countryId);
     }
   }

   onStateChange(stateId: number) {
     this.selectedState = stateId;
     this.selectedCity = null;
     this.cityName = '';
     this.cities = [];
     const state = this.states.find(s => s.id === stateId);
     this.stateName = state ? state.name : '';
     if (stateId) {
       this.getAllCitiesOfState(stateId);
     }
   }

   onCityChange(cityId: any) {
     this.selectedCity = cityId.name;
     const city = this.cities.find(c => c.id === cityId.id);
     this.cityName = city ? city.name : '';
   }


}

--- ./site-themes/four-theme/four-theme-my-account/add-payment/add-payment.component.ts
+++ ./site-themes/four-theme/four-theme-my-account/add-payment/add-payment.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, OnInit } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { Address, CCInfo } from 'src/app/models/user';
import { AddressService } from 'src/app/service/Address.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';

\1
  standalone: true,
  selector: 'app-add-payment',
  templateUrl: './add-payment.component.html',
  styleUrls: ['./add-payment.component.css']
})
export class AddPaymentComponent implements OnInit {

  cardType!: string | undefined;
  cardHolderName!: string;
  cardNumber: string = '';
  expiryDate: string = '';
  isDefault: boolean = false;
  expirationDateNotValid: boolean = true;
  cvvNotValid: boolean = false;
  cvv: string = '';
  ccErrorMessage: string = '';
  cardNameValidation: string = '';
  message: string = '';
  showAddBillingForm: boolean = false;
  addresses: Address[]=[];
  selectedAddressId!: number;
  invalidCardNumber = false;
  user = this.tokenStorageService.getUser();
  businessId = Number(this.tokenStorageService.getBusinessID()!);
  payment!: CCInfo;
  paymentButton: boolean = false;

  constructor(private dialogRef: MatDialogRef<AddPaymentComponent>,private tokenStorageService: TokenStorageService,
    public addressService:AddressService, private translate: TranslateService) { }

    ngOnInit() {
      this.getUsersAllAddress();
    }

    onOptionSelected(event: any) {
      this.selectedAddressId = event.value;
    }

    addPayment() {
      this.ccErrorMessage = '';
      this.cardNameValidation = '';
      if(!this.expirationDateNotValid){
        return;
      }
      this.validateInputs();
      if (this.ccErrorMessage) {
        return;
      }
      if(this.cardNameValidation){
        return
      }
      if (this.invalidCardNumber) {
        return;
      }
      const cardNumberWithoutSpaces = this.cardNumber.replace(/\s+/g, '');
      this.paymentButton = true;
      this.addressService.addPayment(this.cardHolderName, cardNumberWithoutSpaces, this.expiryDate, this.cardType!, this.isDefault == undefined ? false : this.isDefault,
        this.cvv, this.selectedAddressId, this.user.id, this.businessId).subscribe(response => {
        if (response?.errors) {
          this.ccErrorMessage = this.translate.instant(response?.errors[0]?.errorCode);
          this.resetMessages();
          this.paymentButton = false;
          return;
        }
        this.payment = response?.data?.saveCreditCardInfo;
        this.message = this.translate.instant('CC_CREATED_SUCCESS');
        this.user.paymentDetails.push(this.payment);
        this.tokenStorageService.saveUser(this.user, true);
        this.resetMessages();
        setTimeout(() => {
          this.dialogRef.close({ event: 'close', result: response?.data?.saveCreditCardInfo });
        }, 3000);
      });
    }

    hasTwoWords(inputString: string): boolean {
      const pattern = /\b\w+\s\w+\b/;
      return pattern.test(inputString);
    }

    validateInputs() {
      this.ccErrorMessage = '';
      this.cardNameValidation = '';
      if ( !this.cardNumber || !this.expirationDateNotValid || this.cardType == 'no_value' || !this.cvv || !this.selectedAddressId) {
        this.ccErrorMessage = 'PLEASE_FILL_IN_ALL_REQUIRED_FIELDS';
        return;
      }
      if (!this.hasTwoWords(this.cardHolderName) || this.cardHolderName === undefined) {
        this.cardNameValidation = 'CARD_HOLDER_NAME_SHOULD_BE_FULLNAME'
        return;
      }
      if (!this.validateExpirationDate(this.expiryDate)) {
        this.ccErrorMessage = this.translate.instant('EXPIRY_DATE_NOT_VALID')
        return;
      }
      if(this.cardNumber?.length === 0 || this.cardNumber?.length < 13 || this.cardNumber?.length > 19){
        this.invalidCardNumber = true;
        return;
      }
    }

    resetMessages() {
      setTimeout(() => {
        this.ccErrorMessage = '';
        this.message = '';
        this.cardNameValidation = '';
      }, 3000);
    }

    onExpirationDateInputChange(event: any) {
      let inputVal: string = event.target.value;
      inputVal = inputVal?.replace(/\D/g, '');
      if (inputVal.length > 6) {
        inputVal = inputVal?.substring(0, 6);
      }
      if (inputVal.length > 2) {
        inputVal = inputVal?.substring(0, 2) + '/' + inputVal?.substring(2);
      }
      this.expiryDate = inputVal;
      this.expirationDateNotValid = this.validateExpirationDate(inputVal);
    }

    validateExpirationDate(expirationDateString: string): boolean {
      const currentDate = new Date();
      const expirationDateComponents = expirationDateString.split('/');
      if (expirationDateComponents.length !== 2) {
        return false;
      }
      const expMonth = parseInt(expirationDateComponents[0], 10);
      let expYear = parseInt(expirationDateComponents[1], 10);

      if(expYear.toString().length < 4){
        return false;
      }
      if (isNaN(expMonth) || isNaN(expYear)) {
        return false;
      }
      if (expirationDateComponents[1].length === 2) {
        expYear = expYear + 2000;
      }
      if (expYear < currentDate.getFullYear()) {
        return false;
      }
      if (expYear === currentDate.getFullYear() && expMonth <= currentDate.getMonth()) {
        return false;
      }
      return true;
    }

    checkCardType(){
      this.cardType = creditCardType(this.cardNumber);
    }

    formatCardNumber(event: any) {
      let inputVal: string = event.target.value;
      inputVal = inputVal?.replace(/\D/g, '');
      inputVal = inputVal?.slice(0, 19);
      inputVal = inputVal?.replace(/(\d{4})(?=\d)/g, '$1 ');
      this.cardNumber = inputVal;
      this.checkCardType();
    }

    getUsersAllAddress(){
      this.addresses = this.user?.addressList?.filter(address => address?.defaultBilling);
    }
  }

  export function creditCardType(cc: string) {
    cc = cc.replace(/\s/g, '');
    let amex = new RegExp('^3[47][0-9]{13}$');
    let visa = new RegExp('^4[0-9]{12}(?:[0-9]{3})?$');
    let cup = new RegExp('^62[0-9]{14}$');
    let mastercard = new RegExp('^5[1-5][0-9]{14}$');
    let mastercard2 = new RegExp('^2[2-7][0-9]{14}$');
    let disco1 = new RegExp('^6011[0-9]{12}$');
    let disco2 = new RegExp('^64[4-9][0-9]{13}$');
    let disco3 = new RegExp('^65[0-9]{14}$');
    let diners = new RegExp('^3(?:0[0-5]|[68][0-9])[0-9]{11}$');
    let jcb = new RegExp('^35(?:2[89]|[3-8][0-9])[0-9]{12}$');
    let elo = new RegExp('^((636368)|(438935)|(504175)|(451416)|(509048)|(509067)|(509049)|(509069)|(509050)|(509074)|(509068)|(509040)|(509045)|(509060)|(509057)|(509042)|(509046)|(509066)|(509047)|(509062)|(509040)|(509043)|(509064)|(509040))\\d{10,12}$');

    if (visa.test(cc)) {
      return 'VISA';
    }
    if (amex.test(cc)) {
      return 'AMEX';
    }
    if (mastercard.test(cc) || mastercard2.test(cc)) {
      return 'MASTERCARD';
    }
    if (disco1.test(cc) || disco2.test(cc) || disco3.test(cc)) {
      return 'DISCOVER';
    }
    if (diners.test(cc)) {
      return 'DINERS';
    }
    if (jcb.test(cc)) {
      return 'JCB';
    }
    if (cup.test(cc)) {
      return 'CHINA_UNION_PAY';
    }
    if (elo.test(cc)) {
      return 'ELO';
    }
    return undefined;
  }

--- ./site-themes/four-theme/four-theme-my-account/address-listing/address-listing.component.ts
+++ ./site-themes/four-theme/four-theme-my-account/address-listing/address-listing.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { AddAddressComponent } from '../add-address/add-address.component';
import { EditAddressComponent } from '../edit-address/edit-address.component';
import { Address } from 'src/app/models/user';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { AddressService } from 'src/app/service/Address.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';


\1
  standalone: true,
  selector: 'app-address-listing',
  templateUrl: './address-listing.component.html',
  styleUrls: ['./address-listing.component.css']
})
export class AddressListingComponent implements OnInit {

  @Input() address!: any;
  @Output() deleteAddressEvent = new EventEmitter<Address>();
  user = this.tokenStorageService.getUser();
  constructor(public dialog: MatDialog, private tokenStorageService: TokenStorageService, private sharedService: SharedService,
    public addressService:AddressService,
  ) { }

  ngOnInit() {
  }

  addAddressPopup(){
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(AddAddressComponent,{ panelClass: 'modal-x-medium-width' });
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.data) {
        this.sharedService.setUserData(this.user);
      }
    });
  }

  editAddressPopup(address: Address){
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(EditAddressComponent,{ panelClass: 'modal-x-medium-width', data: address });
    dialogRef.afterClosed().subscribe((result) => {
      if (result?.data) {
        this.sharedService.setUserData(this.user);
      }
    });
  }

  deleteUserAddress(addressId: number) {
    if(addressId == undefined){
      addressId = this.address.id;
    }
    this.addressService.deleteAddress(addressId, this.user.id).subscribe(
      (response) => {
        if(response.errors) return;
        this.dialog.open(SucessmsgPopupComponent, {
          backdropClass: 'notificationmodal-popup-sucess',
           data: { title: 'SUCCESS', message: 'ADDRESS_DELETE_SUCCESS_ONLY'
            }
        });
        this.deleteAddressEvent.emit(this.address);
      });
  }

}

--- ./site-themes/four-theme/four-theme-my-account/unsubscribedwarning/unsubscribedwarning.component.ts
+++ ./site-themes/four-theme/four-theme-my-account/unsubscribedwarning/unsubscribedwarning.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';

\1
  standalone: true,
  selector: 'app-unsubscribedwarning',
  templateUrl: './unsubscribedwarning.component.html',
  styleUrls: ['./unsubscribedwarning.component.css']
})
export class UnsubscribedwarningComponent implements OnInit {

  constructor(public dialogRef: MatDialogRef<UnsubscribedwarningComponent>) { }

  ngOnInit() {
  }

  async unsubscribe() {
    this.dialogRef.close({ event: 'close', data: true});
  }
}

--- ./site-themes/four-theme/contact-us/contact-us.component.ts
+++ ./site-themes/four-theme/contact-us/contact-us.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { ChatopenserviceService } from 'src/app/service/chatopenservice.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';

\1
  standalone: true,
  selector: 'app-contact-us',
  templateUrl: './contact-us.component.html',
  styleUrls: ['./contact-us.component.css']
})
export class ContactUsComponent implements OnInit {
  subdomain!: string;
  @Input() data:any;
  businessId = Number(this.tokenStorage.getBusinessID())!;
  contactCountry : string = "";
  contactPhone : string = "";
  contactEmail : string = "";
  businessContacts : any[] = [];

  constructor(
    private tokenStorage: TokenStorageService,
    private chatService: ChatopenserviceService,
    private router: Router, private route: ActivatedRoute,
    private businessSetting : BusinessSettingService) { }

  ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.getContactInfo();
    this.scrollToTop();

     this.router.events.pipe(filter(event => event instanceof NavigationEnd))
    .subscribe(() => {
      if (this.router.url.includes('/contact-us')) {
        this.scrollToTop();
      }
    });
  }

  private scrollToTop() {
  setTimeout(() => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, 50);
}

  getContactInfo(){
    this.businessSetting.getBusinessDetailsById(this.businessId).subscribe(data => {
      if(data?.data?.getBusinessDetailsById){
        this.contactCountry =  data?.data?.getBusinessDetailsById?.country;
        this.contactPhone = data?.data?.getBusinessDetailsById?.contactNo;
        this.contactEmail = data?.data?.getBusinessDetailsById?.email;
        this.businessContacts = data?.data?.getBusinessDetailsById?.businessContacts;
      }
    });
  }

  openChatMenu() {
    this.chatService.triggerChatMenuOpen();
  }

}

--- ./site-themes/four-theme/signup-modal-checkout/signup-modal-checkout.component.ts
+++ ./site-themes/four-theme/signup-modal-checkout/signup-modal-checkout.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { AuthService } from 'src/app/service/auth.service';

import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { firstValueFrom } from 'rxjs/internal/firstValueFrom';
import { Country } from 'src/app/models/country';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { AddressService } from 'src/app/service/Address.service';
import { OtpEmailMobileService } from 'src/app/service/otp-email-mobile.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ActivatedRoute } from '@angular/router';

\1
  standalone: true,
  selector: 'app-signup-modal-checkout',
  templateUrl: './signup-modal-checkout.component.html',
  styleUrls: ['./signup-modal-checkout.component.scss']
})
export class SignupModalCheckoutComponent implements OnInit {
  signUpForm!: FormGroup;
  searchText: string = '';
  phoneCode: string = '1';
  verifyEmail: boolean = false;
  verifyNumber: boolean = false;
  phoneNumber!: number
  email: string = ''
  emailOtpCodeVerified: boolean = false
  phoneOtpCodeVerified: boolean = false
  countries: Country[] = [];
  errormessage: any;
  password: string = '';
  showPassword: boolean = false;
  prevEmail: string = '';
  prevPhoneNumber: string = '';
  prevPhoneCode: string = '';
  prevEmailOtpCodeVerified: boolean = false;
  prevPhoneOtpCodeVerified: boolean = false;
  businessId = Number(this.tokenStorage.getBusinessID());
  hidepasswordfield: boolean = true;
  hideconfirmpasswordfield: boolean = true;
  emailOtpCode: string[] = ['', '', '', '', '', ''];
  mobileOtpCode: string[] = ['', '', '', '', '', ''];

  constructor(
    private formBuilder: FormBuilder,
    public addressService: AddressService,
    private cdr: ChangeDetectorRef,
    private otpService: OtpEmailMobileService,
    public dialog: MatDialog,
    private translate: TranslateService,
    private authService: AuthService,
    private tokenStorage: TokenStorageService,
    private route: ActivatedRoute, private dialogRef: MatDialogRef<SignupModalCheckoutComponent>
  ) { }

  async ngOnInit() {
    this.signUpForm = this.formBuilder.group({
      firstName: ['', [Validators.required, Validators.pattern(/^(?=.*[a-zA-Z])[a-zA-Z0-9]*$/), Validators.minLength(2), Validators.maxLength(12)]],
      lastName: ['', [Validators.required, Validators.pattern(/^(?=.*[a-zA-Z])[a-zA-Z0-9]*$/), Validators.minLength(2), Validators.maxLength(12)]],
      email: ['', [Validators.required, Validators.email]],
      phoneNumber: ['', [
        Validators.required,
        Validators.pattern(/^\d{9,15}$/),
        this.numbersOnlyValidator()
      ]],
      password: ['', [
        Validators.required,
        Validators.minLength(8),
        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/)
      ]],
      confirmPassword: ['', Validators.required],
      emailOtpNumber: ['', Validators.required]
    }, { validator: this.matchPasswords });
    await this.loadCountries();
    this.signUpForm.get('email')?.valueChanges.subscribe(value => {
      this.email = value;
      if (this.email !== this.prevEmail && this.emailOtpCodeVerified) {
        this.emailOtpCodeVerified = false;
        this.verifyEmail = false;
      }
    });
    this.signUpForm.get('phoneNumber')?.valueChanges.subscribe(value => {
      this.phoneNumber = value;
    });
    if(!this.businessId){
      const subdomain = this.route.snapshot.params['subdomain'];
      this.tokenStorage.saveBusinessData(subdomain, subdomain.substring(1));
    }
  }


onEmailOtpCodeChange(event: Event, index: number, otpInput: HTMLInputElement) {
  if (event.target instanceof HTMLInputElement) {
    const value = event.target.value;
    this.emailOtpCode[index] = value;
    if (value.length === 1 && index < 5) {
      const nextInput = document.querySelector(`input[data-index='${index + 1}']`) as HTMLInputElement;
      if (nextInput) {
        nextInput.focus();
      }
    }
  }
}


onEmailOtpCodeKeydown(event: KeyboardEvent, index: number, otpInput: HTMLInputElement) {
  const inputElement = event.target as HTMLInputElement;
  if (event.key === 'Backspace' && inputElement.value === '') {
    const previousInput = document.querySelector(`input[data-index='${index - 1}']`) as HTMLInputElement;
    if (previousInput) {
      previousInput.focus();
    }
  }
}


onMobileOtpCodeChange(event: any, index: number) {
  if (event.target instanceof HTMLInputElement) {
    if (event.target.value.length < 2) {
      this.mobileOtpCode[index - 1] = event.target.value;
    }
  }
}

  numbersOnlyValidator(): (control: AbstractControl) => ValidationErrors | null {
    return (control: AbstractControl): ValidationErrors | null => {
      const valid = /^\d+$/.test(control.value);
      return valid ? null : { numbersOnly: true };
    };
  }

  matchPasswords(group: AbstractControl): ValidationErrors | null {
    const password = group.get('password')?.value;
    const confirmPassword = group.get('confirmPassword')?.value;
    return password === confirmPassword ? null : { passwordMismatch: true };
  }

  onMenuItemClick(event: MouseEvent): void {
    event.stopPropagation();
  }
  onMenuClosedCountry() {
    this.searchText = '';
  }

  onSubmit(): void {
    if (this.signUpForm?.invalid || !this.emailOtpCodeVerified) {
      return;
    }
    const fName = this.signUpForm.get('firstName')?.value
    const lName = this.signUpForm.get('lastName')?.value
    const email = this.signUpForm.get('email')?.value
    const password = this.signUpForm.get('password')?.value
    if (!email || !this.emailOtpCodeVerified) {
      this.popupMessagenotefication(this.translate.instant('ERROR'), this.translate.instant('EMAIL_NOT_VERIFIED'));
      return;
    }
    this.authService.subscribeGuestUser(this.businessId, fName, lName, email,
      `${this.phoneNumber}`, this.phoneCode, password).subscribe(
      r => {
        if (r?.errors) {
          this.popupMessagenotefication('ERROR', r?.errors[0]?.errorCode)
          return;
        }
        this.sucessMessage('SUCCESS', r?.data?.subscribeGuestUser?.message);
        this.dialogRef.close({event: true, email: email, password: password});
      })
  }

  async loadCountries() {
    const response = await firstValueFrom(this.addressService.getAllCountriesForBusiness())
    this.countries = response?.data?.getAllCountries;
    this.cdr.detectChanges();
  }

  selectCode(code: string) {
    this.phoneCode = code;
    this.phoneOtpCodeVerified = false;
    this.verifyNumber = false;
  }

  createEmailOTP() {
    if (this.email.length === 0) {
      this.signUpForm.get('emailOtpNumber')?.setErrors({ 'required': true });
      return
    }
    this.signUpForm.get('emailOtpNumber')?.reset();
    this.signUpForm.get('emailOtpNumber')?.setErrors(null);
    this.otpService.generateStoreEmailVerificationCode(this.email, this.businessId).subscribe(
      data => {
        if (data?.errors) return;
        this.verifyEmail = true;
        this.emailOtpCodeVerified = false;
        this.prevEmail = '' + `${this.email}`;
        this.sucessMessage(this.translate.instant('SUCCESS'), this.translate.instant('PLEASE_CHECK_YOUR_EMAIL_FOR_OTP'));
      }
    )
  }

  verifyEmailOtpCode() {
    const code = this.emailOtpCode.join('');
    if (code || code.trim().length === 6) {
      this.otpService.verifyStoreEmail(this.email, code, this.businessId).subscribe(
        res => {
          if (res?.data?.verifyStoreEmail?.status == 'approved') {
            this.sucessMessage('SUCCESS', this.translate.instant('EMAIL_VERFIED'));
            this.emailOtpCodeVerified = true;
            this.prevEmailOtpCodeVerified = true;
            this.prevEmail = '' + `${this.email}`;
            this.cdr.detectChanges();
          } else {
            this.popupMessagenotefication(this.translate.instant('ERROR'), this.translate.instant('FILL_CORRECT_OTP'));
          }
        });
    }
  }

  createMobileOTP() {
    this.phoneNumber = this.signUpForm.get('phoneNumber')?.value
    if (!this.phoneNumber) {
      this.signUpForm.get('phoneNumber')?.setErrors({ 'required': true });
      return
    }
    let phone = +(this.phoneCode + this.phoneNumber)
    this.otpService.generateVerificationOTP(phone, "whatsapp").subscribe(
      data => {
        if (data?.errors) return;
        this.verifyNumber = true;
        this.phoneOtpCodeVerified = false;
        this.prevPhoneCode = `${this.phoneCode}`;
        this.prevPhoneNumber = `${this.phoneNumber}`;
        this.sucessMessage(this.translate.instant('SUCCESS'), this.translate.instant('CHECK_MOBILE_OTP'));
      }
    )
  }

  verifyPhoneOtpCode() {
    const mobileCode = this.mobileOtpCode.join('');
    if (mobileCode || mobileCode.length === 6) {
      this.otpService.verifyOTP(+(this.phoneCode + this.phoneNumber), mobileCode).subscribe(
        res => {
          if (res?.data?.verifyOTP?.status === 'approved') {
            this.phoneOtpCodeVerified = true;
            this.prevPhoneOtpCodeVerified = true;
            this.prevPhoneCode = `${this.phoneCode}`;
            this.prevPhoneNumber = `${this.phoneNumber}`;
            this.sucessMessage('SUCCESS', this.translate.instant('MOBILE_VERFIED'));
          } else {
            this.popupMessagenotefication('ERROR', this.translate.instant('FILL_CORRECT_OTP'));
          }
        });
    }
  }

  public sucessMessage(title: string, message: string) {
    this.dialog.open(SucessmsgPopupComponent, {
      backdropClass: 'notificationmodal-popup-sucess',
      width: '450px',
      data: { title: title, message: message },
    });
  }

  public popupMessagenotefication(title: string, message: string) {
    this.dialog.open(NotifacationMessageComponent, {
      backdropClass: 'notificationmodal-popup',
      width: '450px',
      data: { title: title, message: message },
    });
  }

  togglePasswordVisibility() {
    this.showPassword = !this.showPassword;
  }
}


export function numbersOnlyValidator(): ValidatorFn {
  return (control: AbstractControl): { [key: string]: any } | null => {
    const numericValue = control.value;
    if (numericValue && isNaN(numericValue)) {
      return { 'numbersOnly': true };
    }
    return null;
  };
}

--- ./site-themes/four-theme/four-theme-my-order/four-theme-my-order.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/four-theme-my-order.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ChangeDetectorRef, Component, HostListener, OnInit } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';
import { ActivatedRoute, Router } from '@angular/router';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { EditReviewModalComponent } from '../edit-review-modal/edit-review-modal.component';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { environment } from 'src/environments/environment';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ReviewResponse } from 'src/app/models/ReviewResponse';
import { ConfirmOrderComponent } from './confirm-order/confirm-order.component';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ViewQrCodeComponent } from './view-qr-code/view-qr-code.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { TrackpackageComponent } from './trackpackage/trackpackage.component';
import { ProofofdeliveryComponent } from './proofofdelivery/proofofdelivery.component';
import { ProofofPickupComponent } from './ProofofPickup/ProofofPickup.component';
import { Subscription } from 'rxjs';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';


\1
  standalone: true,
  selector: 'app-four-theme-my-order',
  templateUrl: './four-theme-my-order.component.html',
  styleUrls: ['./four-theme-my-order.component.scss']
})
export class FourThemeMyOrderComponent implements OnInit {
  selectedStatus: string = 'ALL';
  selectedCheckoutType: string = 'ALL';
  returnStatus: string = null!;
  loadingOrders = false;
  noOrdersAvailable = false;
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  subdomain: string = '';
  businessId = Number(this.tokenStorage.getBusinessID()!);
  orders: OrderResponse[] = [];
  closedOrders: OrderResponse[] = [];
  user = this.tokenStorage.getUser();
  orderPrefix = this.tokenStorage.getOrderFormat()?.prefix;
  orderSuffix = this.tokenStorage.getOrderFormat()?.suffix;
  pageNum = 1;
  pageSize = 5;
  awsUrl = environment.awsKey;
  reviews: ReviewResponse[] = [];
  currency = this.tokenStorage.getCurrency()?.symbol;
  startDate = "";
  currentYear = new Date().getFullYear();
  canLoadMoreData = true;
  noOfPages!: number;
  private orderDataSubscription!: Subscription;
  differenceInDays!: number;
  isDateExceeded: boolean = false;
  updatedDate!: Date;
  endDate = "";
  firstOrderDate: string = '';
  orderYear: string = '';

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    public dialog: MatDialog,
    public tokenStorage: TokenStorageService,
    public shoppingCart: ShoppingCartService,private sharedService: SharedService,
    public catalogService: CatalogServiceService,private cdr: ChangeDetectorRef
    ) {}

  async ngOnInit(): Promise<void> {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    if(!this.user){
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    await this.firstOrderDateTime();
    this.onDateRangeChange('last-30-days');
    await this.getOrdersByCustomerAndBusiness();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  getUpdatedUserData() {
    this.orderDataSubscription = this.sharedService.getOrderData().subscribe(data => {
      if (data?.id) {
        this.orders = this.orders.map(order =>
          order.id === data.id ? { ...order, ...data } : order
        );
      }
    });
  }

  ngOnDestroy() {
    if (this.orderDataSubscription) {
      this.orderDataSubscription.unsubscribe();
    }
  }

  onDateRangeChange(value: string): void {
    const today = new Date();
    if (value === 'last-30-days') {
      const last30Days = new Date();
      last30Days.setDate(today.getDate() - 30);
      this.startDate = this.formatDate(last30Days);
      this.endDate = this.formatDate(today);
    } else if (value === 'last-3-months') {
      const last3Months = new Date();
      last3Months.setMonth(today.getMonth() - 3);
      this.startDate = this.formatDate(last3Months);
      this.endDate = this.formatDate(today);
    } else if (value.startsWith('year-')) {
      const selectedYear = parseInt(value.split('-')[1], 10);
      this.startDate = `${selectedYear}-01-01`;
      this.endDate = `${selectedYear}-12-31`;
    } else {
      this.startDate = '';
      this.endDate = '';
    }
  }

  getToday(): string {
    const today = new Date();
    return this.formatDate(today);
  }

  formatDate(date: Date): string {
    return date.toISOString().split('T')[0];
  }

  filterOrdersByOrderType(orderType: any){
    this.selectedCheckoutType = orderType;
    this.orders = [];
    this.getOrdersByCustomerAndBusiness();
  }

  filterOrdersByOrderStatus(orderStatus: any){
    if(orderStatus === 'RETURNED' || orderStatus === 'REFUNDED'){
      this.selectedStatus = null!;
      this.returnStatus = orderStatus;
    } else {
      this.returnStatus = null!;
      this.selectedStatus = orderStatus;
    }
    this.orders = [];
    this.getOrdersByCustomerAndBusiness();
  }

  filterOrdersByOrderDate(orderDate: any){
    this.onDateRangeChange(orderDate);
    this.orders = [];
    this.getOrdersByCustomerAndBusiness();
  }

  async firstOrderDateTime(){
    if(this.user){
      (await this.shoppingCart.firstOrderDateTime()).subscribe(
        data => {
          if(data?.errors){
            return;
          }
          if(data?.data?.firstOrderDateTime){
            this.firstOrderDate = data?.data?.firstOrderDateTime;
            if(this.firstOrderDate && this.firstOrderDate !== null){
              const dateStr = this.firstOrderDate;
              const year = dateStr.split('-')[0];
              this.orderYear = year;
            }
          }
        }
      );
    }
  }

  async getOrdersByCustomerAndBusiness() {
    if(this.selectedCheckoutType === 'ALL'){
      this.selectedCheckoutType = null!;
    }
    if(this.selectedStatus === 'ALL'){
      this.selectedStatus = null!;
    }
    if (this.user) {
        this.loadingOrders = true;
        this.noOrdersAvailable = false;
        this.pageNum = 1;
        this.canLoadMoreData = true;
        (await this.shoppingCart.getOrdersByBusinessByFilters(this.businessId, 1, 5, this.selectedCheckoutType, this.selectedStatus, this.returnStatus, this.startDate, this.endDate)).subscribe(
            data => {
                if (data?.errors) {
                    this.loadingOrders = false;
                    return;
                }
                if (data?.data?.getOrdersByBusinessByFilters) {
                    this.orders = data?.data?.getOrdersByBusinessByFilters;
                    this.closedOrders = this.orders?.filter(order => order?.status === 'DELIVERED' || order?.status === 'PICKED');
                    this.loadingOrders = false;
                    this.noOrdersAvailable = this.orders?.length === 0;
                } else {
                    this.loadingOrders = false;
                    this.noOrdersAvailable = true;
                }
            },
            error => {
                this.loadingOrders = false;
                this.noOrdersAvailable = true;
            }
        );
    }
}

  getTracks(order: OrderResponse): any[] {
    return order?.orderTracks?.map((track: any) => track?.status);
  }

  getOrderSales(order: OrderResponse): any[] {
    return order?.orderDetails?.filter((sale: any) => sale?.returnPolicyType === 'SALES_RETURN_ALLOWED');
  }

  getItemReturnBlocked(order: OrderResponse): any[] {
    return order?.orderDetails?.filter((item: OrderDetailResponse) => item?.noReturnAgain === true);
  }

  async listReviewsByCustomerIdAndBusiness(){
    if(this.user){
      (await this.catalogService.listReviewsByCustomerIdAndBusiness(this.user.id, this.businessId, this.pageNum, this.pageSize)).subscribe(
        data => {
          if(data?.errors){
            return;
          }
          if(data?.data?.listReviewsByCustomerIdAndBusinessAndUserType){
            this.reviews = data?.data?.listReviewsByCustomerIdAndBusinessAndUserType;
          }
        }
      );
    }
  }

  async actionOnPendingOrder(order: any, itemId: number, status: string){
    (await this.shoppingCart.actionOnPendingOrder(order.id, itemId, status)).subscribe(
      async data => {
        if(data?.data?.actionOnPendingOrder != null){
         this.getOrdersByCustomerAndBusiness();
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async cancelOrder(order: any){
    (await this.shoppingCart.cancelOrder(order.id)).subscribe(
      async data => {
        if(data?.data?.cancelOrder != null){
         this.getOrdersByCustomerAndBusiness();
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  calculateTimePeriodDifference(item: any, order: any): any {
    const deliverDateObj = new Date(order.deliverDate);
    deliverDateObj.setDate(deliverDateObj.getDate() + item.timePeriodReturn);
    const today = new Date();
    const differenceInTime = deliverDateObj.getTime() - today.getTime();
    const differenceInDays = Math.ceil(differenceInTime / (1000 * 60 * 60 * 24));
    this.isDateExceeded = differenceInDays < 0;
    this.updatedDate = deliverDateObj;
    this.differenceInDays = differenceInDays;
    return this.updatedDate;
}

  editreviewmodal(product: ProductResponse){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = {action: 'ADD', item: product};
    this.dialog.open(EditReviewModalComponent, dialogConfig);
  }

  openDialogConfirmOrder(order: OrderResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.disableClose = true;
    dialogConfig.autoFocus = false;
    dialogConfig.data = { 'order': order}
    const dialogRef = this.dialog.open(ConfirmOrderComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if(result == 'ACCEPTED'){
        order.status = 'ACCEPTED'
      }else if(result == 'CANCELLED'){
        order.status = 'CANCELLED';
      }
     });
   }

   openLinkInNewTab(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    this.tokenStorage.saveOrderForPrint(order);
    const url = `/${this.subdomain}/print-order-summary/${orderId}`;
    const fullUrl = this.router.serializeUrl(this.router.createUrlTree([url]));
    window.open(fullUrl, '_blank');
  }

  openOrderDetailsInNewTab(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    const url = `/${this.subdomain}/order-details/${orderId}`;
    this.tokenStorage.saveOrderForOrderDetails(order);
    this.router.navigateByUrl(url, {state: {order: order, orderhistory: false}});
  }

  openReturnOrder(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    const url = `/${this.subdomain}/return-refund/${orderId}`;
    this.router.navigateByUrl(url, {state: {order: order, orderhistory: false}});
  }

  openReturnOrderDetails(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.tokenStorage.saveReturnOrder(order);
    const url = `/${this.subdomain}/return-refund-details`;
    this.router.navigateByUrl(url);
  }

  viewQrCode(order: any) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = { qrCodeImage: order.qrCodeImage };
    this.dialog.open(ViewQrCodeComponent, dialogConfig);
  }

  async loadMoreOrders() {
    if (this.loadingOrders || this.pageNum === this.noOfPages) {
      return;
    }
    this.loadingOrders = true;
    (await this.shoppingCart.getOrdersByBusinessByFilters(this.businessId, this.pageNum + 1, this.pageSize, this.selectedCheckoutType, this.selectedStatus, this.returnStatus, this.startDate, this.endDate)).subscribe(
        (data: any) => {
          if (data && data?.data && data?.data?.getOrdersByBusinessByFilters) {
            const newAudits = data?.data?.getOrdersByBusinessByFilters;
            if (newAudits?.length > 0) {
              for (const audit of newAudits) {
                if (!this.orders?.some((existingAudit) => existingAudit.id === audit.id)) {
                  this.orders.push(audit);
                }
              }
              this.noOfPages = data?.data?.getOrdersByBusinessByFilters[0]?.noOfPages;
              this.pageNum++;
            } else {
              this.canLoadMoreData = false;
            }
            this.loadingOrders = false;
          } else {
            this.loadingOrders = false;
          }
        },
        (error: any) => {
          this.loadingOrders = false;
        }
      );
  }

  @HostListener('window:scroll', ['$event'])
  onScroll(event: any): void {
    const scrollPosition = window.pageYOffset + window.innerHeight;
    const pageHeight = document.documentElement.scrollHeight;
    const distanceToBottom = pageHeight - scrollPosition;
    if (distanceToBottom < 100 && this.canLoadMoreData) {
      this.loadMoreOrders();
    }
  }

  openTrackPackage(order: OrderResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = order;
    const dialogRef = this.dialog.open(TrackpackageComponent, dialogConfig);
  }

  seeProofofDelivery(order: OrderResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = order;
    const dialogRef = this.dialog.open(ProofofdeliveryComponent, dialogConfig);
  }

  seeProofofPickup(order: OrderResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = order;
    const dialogRef = this.dialog.open(ProofofPickupComponent, dialogConfig);
  }

}

--- ./site-themes/four-theme/four-theme-my-order/trackpackage/trackpackage.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/trackpackage/trackpackage.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { environment } from 'src/environments/environment';
import { ActivatedRoute } from '@angular/router';

\1
  standalone: true,
  selector: 'app-trackpackage',
  templateUrl: './trackpackage.component.html',
  styleUrls: ['./trackpackage.component.css']
})
export class TrackpackageComponent implements OnInit {
  order!: OrderResponse;
  awsUrl = environment.awsKey;
  orderTracking: any;
  loadingOrders = false;
  subdomain!: string;
  noOrdersAvailable = false;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public shoppingCart: ShoppingCartService, private route: ActivatedRoute) { }

  ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.order = this.data;
    this.getShipEngineOrderTrackingByTrackingNumberAndBusinessId();
  }

  convertUtcToLocal(utcDate: any): string {
    const date = new Date(utcDate);
    return date.toLocaleString();
  }

  async getShipEngineOrderTrackingByTrackingNumberAndBusinessId(){
    this.loadingOrders = true;
    this.noOrdersAvailable = false;
     (await this.shoppingCart.getShipEngineOrderTrackingByTrackingNumberAndBusinessId(this.order.trackingId)).subscribe(
        data => {
          console.log(data, 'dataaaaaa')
          if(data?.errors){
            this.loadingOrders = false;
            this.noOrdersAvailable = true;
            return;
          }
          if(data?.data?.getShipEngineOrderTrackingByTrackingNumberAndBusinessId){
            this.orderTracking = data?.data?.getShipEngineOrderTrackingByTrackingNumberAndBusinessId;
            this.loadingOrders = false;
            this.noOrdersAvailable = false;
          }
        }
      );
    }
}

--- ./site-themes/four-theme/four-theme-my-order/ProofofPickup/ProofofPickup.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/ProofofPickup/ProofofPickup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-ProofofPickup',
  templateUrl: './ProofofPickup.component.html',
  styleUrls: ['./ProofofPickup.component.css']
})
export class ProofofPickupComponent implements OnInit {

  order!: OrderResponse;
  awsUrl = environment.awsKey;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }

  ngOnInit() {
    this.order = this.data;
  }

  convertUtcToLocal(utcDate: any): string {
    utcDate = utcDate + '.00Z'
    const date = new Date(utcDate);
    return date.toLocaleString();
}

}

--- ./site-themes/four-theme/four-theme-my-order/editordercustomerdetails/editordercustomerdetails.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/editordercustomerdetails/editordercustomerdetails.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-editordercustomerdetails',
  templateUrl: './editordercustomerdetails.component.html',
  styleUrls: ['./editordercustomerdetails.component.css']
})
export class EditordercustomerdetailsComponent implements OnInit {

  order!: OrderResponse;
  addCustomerInfo: boolean = false;
  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog,private translate: TranslateService,
  private shoppingCart: ShoppingCartService, public dialogRef: MatDialogRef<EditordercustomerdetailsComponent>) { }

  ngOnInit() {
    this.order = this.data;
  }

  async updateCustomerInfo() {
    if (
      !this.order.orderAddressResponse.firstName ||
      !this.order.orderAddressResponse.lastName
    ) {
      this.popupMessagenotefication(this.translate.instant('FNAME_LNAME_ERROR'));
      return;
    }
    if(!this.order.orderAddressResponse.email || !this.isValidEmail(this.order.orderAddressResponse.email)){
      this.popupMessagenotefication(this.translate.instant('EMAIL_ERROR'));
      return;
    }
    if(!this.order.orderAddressResponse.phoneNumber || !this.isValidPhoneNumber(this.order.orderAddressResponse.phoneNumber)){
      this.popupMessagenotefication(this.translate.instant('PHONE_ERROR'));
      return;
    }
    this.addCustomerInfo = true;
    (await this.shoppingCart.updateCustomerInfo(
      this.order.id,
      this.order.orderAddressResponse.firstName,
      this.order.orderAddressResponse.lastName,
      this.order.orderAddressResponse.phoneNumber,
      this.order.orderAddressResponse.email
    )).subscribe(
      (data) => {
        if (data?.errors) {
          this.addCustomerInfo = false;
          return;
        }
        if (data?.data?.updateCustomerInfo) {
          this.dialogRef.close({ event: 'close', data: data?.data?.updateCustomerInfo?.data });
          this.dialog.open(SucessmsgPopupComponent, {
            backdropClass: 'notificationmodal-popup-sucess',
            data: {
              title: 'SUCCESS',
              message: data?.data?.updateCustomerInfo?.message,
            },
          });
        }
      },
      (error) => {
        this.addCustomerInfo = false;
      }
    );
  }

  private isValidPhoneNumber(phoneNumber: string): boolean {
    const phoneRegex = /^[0-9]{0,15}$/;
    return phoneRegex.test(phoneNumber);
  }

  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  public popupMessagenotefication(message: string) {
    this.dialog.open(NotifacationMessageComponent, {
      backdropClass: 'notificationmodal-popup',
      width: '450px',
      data: { title: 'ERROR', message: message },
    });
  }
}

--- ./site-themes/four-theme/four-theme-my-order/proofofdelivery/proofofdelivery.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/proofofdelivery/proofofdelivery.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-proofofdelivery',
  templateUrl: './proofofdelivery.component.html',
  styleUrls: ['./proofofdelivery.component.css']
})
export class ProofofdeliveryComponent implements OnInit {
  order!: OrderResponse;
  awsUrl = environment.awsKey;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }

  ngOnInit() {
    this.order = this.data;
  }

}

--- ./site-themes/four-theme/four-theme-my-order/confirm-order/confirm-order.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/confirm-order/confirm-order.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-confirm-order',
  templateUrl: './confirm-order.component.html',
  styleUrls: ['./confirm-order.component.scss']
})
export class ConfirmOrderComponent implements OnInit {

  order!: OrderResponse;
  message!: string;
  errorMessage!: string;

  constructor(@Inject(MAT_DIALOG_DATA) public data: {order: any},
              private dialogRef: MatDialogRef<ConfirmOrderComponent>,
              public dialog: MatDialog,
              public shoppingCart: ShoppingCartService) { }

  ngOnInit() {
    this.order = this.data.order;
  }

  onClickAvailable(id: number){
    this.order.orderDetails.forEach(details => {
      if(details.id == id){
        if(details.available){
          details.available = false;
        }else{
          details.available = true;
        }
      }
    });
  }

  confirmOrder(status: string){
    this.shoppingCart.updateOrderStatus(this.order.id, status).subscribe(data => {
      console.log(data)
      if(data.data.updateOrderStatus != null){
        this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess', data:{title:'', message: 'Order Status Changed To ' + status}});
        setTimeout(() => {
          this.dialogRef.close(status);
           }, 2000);
      }
    });
  }


}

--- ./site-themes/four-theme/four-theme-my-order/editordershippingaddress/editordershippingaddress.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/editordershippingaddress/editordershippingaddress.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { AddressService } from 'src/app/service/Address.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-editordershippingaddress',
  templateUrl: './editordershippingaddress.component.html',
  styleUrls: ['./editordershippingaddress.component.css']
})

export class EditordershippingaddressComponent implements OnInit {

  AddressInstructions: boolean = false;
  order!: OrderResponse;
  errorMessage: any;
  countries: any[] = [];
  cities: any[] = [];
  states: any[] = [];
  selectedState : any;
  selectedCountry: any;
  selectedCity: any;
  addAddressSuccessful: boolean = false;
  isShippingEnabled: boolean = false;
  validateAddressMessages: any[] = [];

  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog, private cdr: ChangeDetectorRef,
  private addressService: AddressService,
  private shoppingCart: ShoppingCartService, public dialogRef: MatDialogRef<EditordershippingaddressComponent>) { }

  async ngOnInit() {
    this.order = this.data;
    this.isShipEngineEnabled();
    await this.getAllCountries();
    this.selectedCountry = this.countries?.filter((e) => {
      return e.name == this.order?.orderAddressResponse?.country || e.shortName == this.order?.orderAddressResponse?.country;
    })[0];
    await this.getAllStatesOfCountry(this.selectedCountry?.id);
    this.selectedState = this.states?.filter((e) => {
      return e.name == this.order?.orderAddressResponse?.state || e.shortName == this.order?.orderAddressResponse?.state;
    })[0];
    await this.getAllCitiesOfState(this.selectedState?.id);
    this.selectedCity = this.cities?.filter((e) => {
      return e.name == this.order?.orderAddressResponse?.city || e.name?.toUpperCase() == this.order?.orderAddressResponse?.city;
    })[0];
  }

  async isShipEngineEnabled(){
    (await this.shoppingCart.isShipEngineEnabled()).subscribe(
      data => {
        if(data?.data?.isShipEngineEnabled != null){
          this.isShippingEnabled = data?.data?.isShipEngineEnabled;
        }
      }
    );
   }


   async validateShipEngineAddress(shippingAddress: any): Promise<boolean> {
    this.validateAddressMessages = [];
    try {
        const response = await (await this.shoppingCart.validateShipEngineAddressForCst(
          `${shippingAddress.firstName} ${shippingAddress.lastName}`,
          shippingAddress.phoneNumber,
          shippingAddress.addressLine1,
          shippingAddress.addressLine2,
          this.selectedCity.name,
          this.selectedState.name,
          shippingAddress.postalCode,
          this.selectedCountry.name
        )).toPromise();
        if (response?.errors) {
          this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: response?.errors[0]?.errorMessage }
            });
            this.addAddressSuccessful = false;
            return false;
        }
        const validationResult = response?.data?.validateShipEngineAddressForCst[0];
        if (validationResult?.messages?.length > 0) {
            this.validateAddressMessages = validationResult.messages;
            this.addAddressSuccessful = false;
            return false;
        }
        if (validationResult?.matched_address) {
            const matchedAddress = validationResult.matched_address;
            this.order.orderAddressResponse.addressLine1 = matchedAddress.address_line1 || '';
            this.order.orderAddressResponse.addressLine2 = matchedAddress.address_line2 || '';
            this.selectedCity.name = matchedAddress.city_locality;
            this.selectedState.name = matchedAddress.state_province;
            this.selectedCountry.name = matchedAddress.country_code;
            this.order.orderAddressResponse.postalCode = matchedAddress.postal_code;
            this.order.orderAddressResponse.phoneNumber = matchedAddress.phone;
        }
        return true;
    } catch (error) {
        console.error('Validation error:', error);
        this.addAddressSuccessful = false;
        return false;
    }
}

async updateAddress() {
    this.addAddressSuccessful = true;
    this.order.orderAddressResponse.addressLine1 = this.order?.orderAddressResponse?.addressLine1 ?? '';
    this.order.orderAddressResponse.addressLine2 = this.order?.orderAddressResponse?.addressLine2 ?? '';
    try {
        if (this.isShippingEnabled) {
            const isValid = await this.validateShipEngineAddress(this.order.orderAddressResponse);
            if (!isValid || this.validateAddressMessages.length > 0) {
                return;
            }
        }
        const response = await (await this.shoppingCart.updateShippingAddress(
          this.order.id,
          this.order.orderAddressResponse.addressLine1,
          this.order.orderAddressResponse.addressLine2,
          this.selectedCountry.name,
          this.selectedCity.name,
          this.selectedState.name,
          this.order.orderAddressResponse.postalCode,
          this.order.orderAddressResponse.phoneNumber
        )).toPromise();
        if (response?.errors) {
            this.addAddressSuccessful = false;
            return;
        }
        if (response?.data?.updateShippingAddress) {
            this.dialogRef.close({ event: 'close', data: response?.data?.updateShippingAddress?.data });
            this.dialog.open(SucessmsgPopupComponent, {
                backdropClass: 'notificationmodal-popup-success',
                data: {
                    title: 'SUCCESS',
                    message: response?.data?.updateShippingAddress?.message
                }
            });
        }
    } catch (error) {
        console.error('Update error:', error);
        this.addAddressSuccessful = false;
    }
}

  public async getAllCountries() {
    await this.addressService.getAllCountriesForBusiness().toPromise().then(
      data => {
        if (data?.data?.getAllCountries == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.countries = data?.data?.getAllCountries;
      }
    )
  }

  private async getAllStatesOfCountry(id : number) {
    await this.addressService.getAllStatesOfCountry(id).toPromise().then(
      data => {
        if (data?.data?.getAllStatesOfCountry == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.states = data?.data?.getAllStatesOfCountry;
      }
    );
  }
  private async getAllCitiesOfState(id : number) {
    await this.addressService.getAllCitiesOfState(id).toPromise().then(
      data => {
        if (data?.data?.getAllCitiesOfState == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.cities = data?.data?.getAllCitiesOfState;
      }
    );
  }

  countrySelected(country: any) {
    if (country && country.id) {
      this.cdr.detectChanges();
      this.getAllStatesOfCountry(country.id);
    }
  }

  stateSelected(state : any){
    if(state && state.id){
      this.selectedState = state;
      this.getAllCitiesOfState(state.id);
      this.cdr.detectChanges();
    }
  }

}

--- ./site-themes/four-theme/four-theme-my-order/return-refund-details/return-refund-details.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/return-refund-details/return-refund-details.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-return-refund-details',
  templateUrl: './return-refund-details.component.html',
  styleUrls: ['./return-refund-details.component.css']
})
export class ReturnRefundDetailsComponent implements OnInit {
  subdomain: string = '';
  order!: OrderResponse;
  qrCodeImage: string = '';
  awsURL = environment.awsKey;
  businessDetail :any;
  currency = this.tokenService.getCurrency().symbol;
  returnOrderTracks: any[] = [];
  currentStatus: string = '';
  refundSubTotal: number = 0.0;
  shippingAndHandling: number = 0.0;
  totalEstimatedRefund: number = 0.0;
  taxRefund: number = 0.0;
  restockingFee: number = 0.0;

  constructor( private route: ActivatedRoute,
    private router: Router,private tokenService: TokenStorageService) { }


  ngOnInit() {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.order = this.tokenService.getReturnOrder();
    if(!this.order){
      this.router.navigate([this.subdomain+'/home']);
    }
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.returnPolicyType?.toString() !== 'SALES_ARE_FINAL');
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.returnQuantity > 0);
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.quantity > 0);
    this.returnOrderTracks = this.order?.returnOrderTracks?.map((track: any) => track?.status);
    this.currentStatus = this.returnOrderTracks[this.returnOrderTracks?.length - 1];
    this.order?.orderDetails?.forEach(order => this.calculateSummary(order));
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }


  calculateSummary(prod: OrderDetailResponse){
      let totalQuantity = prod.acceptedQuantity + prod.quantityDifference;
      if(prod.returnOrderStatus !== 'ITEM_REJECTED'){
        let returnQuantity = prod.returnQuantity;
        if(prod.acceptedReturnQuantity !== null){
           returnQuantity = prod.acceptedReturnQuantity;
        }
        prod.shippingAndHandling = (prod.surcharge / totalQuantity) * returnQuantity;
        if(this.order.orderType !== 'ORDER_ONLINE_SHIP_TO_HOME'){
          prod.shippingAndHandling = 0.0;
        }
        prod.refundSubTotal = (prod.salePrice * returnQuantity);
        if (prod.returnFeeType === 'FIXED'){
          prod.restockingFee = prod.returnFee * returnQuantity;
        }
        if (prod.returnFeeType === 'PERCENTAGE'){
          prod.restockingFee = (prod.returnFee/100.00) * prod.refundSubTotal;
        }
        const promoRefund = (prod.promotionDiscount / totalQuantity) * returnQuantity;
        prod.refundSubTotal -= promoRefund;
        const salesTax = (prod.tax / totalQuantity) * returnQuantity;
        const shippingCost = this.order.shippingCost;
        const newShippingCost = this.order.shippingCost - prod.shippingAndHandling;
        let shippingTaxRefund = 0.0;
        if(shippingCost && shippingCost !== null){
          const shippingDifference = shippingCost- newShippingCost;
          if(shippingDifference > 0) {
            shippingTaxRefund = (this.order.shippingTax / shippingCost) * shippingDifference;
          }
        }
        prod.taxRefund = shippingTaxRefund + salesTax;

        if(this.order.orderPromotionDiscounts !== null && this.order.orderPromotionDiscounts > 0) {
          const orderTotalWithoutPromotionApplied = this.order.total + this.order.orderPromotionDiscounts;
          const totalOrderPromotionRefund = ((this.order.orderPromotionDiscounts * (prod.refundSubTotal + salesTax)) / orderTotalWithoutPromotionApplied);
          prod.refundSubTotal = prod.refundSubTotal - totalOrderPromotionRefund;
        }

        prod.totalEstimatedRefund = prod.shippingAndHandling + shippingTaxRefund + salesTax + prod.refundSubTotal - prod.restockingFee;
        this.refundSubTotal += prod.refundSubTotal;
        this.shippingAndHandling += prod.shippingAndHandling;
        this.totalEstimatedRefund += prod.totalEstimatedRefund;
        this.taxRefund += prod.taxRefund;
        this.restockingFee += prod.restockingFee;
      }
  }

  openLinkInNewTab() {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.tokenService.saveReturnOrder(this.order);
    const url = `/${this.subdomain}/return-refund-slip`;
    const fullUrl = this.router.serializeUrl(this.router.createUrlTree([url]));
    window.open(fullUrl, '_blank');
  }

  openLabel() {
    const fullUrl = this.awsURL + this.order?.returnLabelUrl;
    window.open(fullUrl, '_blank');
  }


  getLabelUrl(): string {
    return this.awsURL + this.order?.returnLabelUrl; // Construct the URL
  }

  onOrderUpdated(orderData: OrderResponse){
    this.order = orderData;
    this.order.orderDetails = this.order?.orderDetails.filter(order => order?.returnPolicyType?.toString() !== 'SALES_ARE_FINAL');
    this.returnOrderTracks = this.order?.returnOrderTracks?.map((track: any) => track?.status);
    this.currentStatus = this.returnOrderTracks[this.returnOrderTracks?.length - 1];
    this.tokenService.saveReturnOrder(this.order);
  }


  viewAndDownloadFile(): void {
    const fileUrl = `${this.awsURL}${this.order?.returnLabelUrl}`; // Dynamic URL
    const fileName = 'return-label.png'; // Desired filename for download

    // Fetch the file
    fetch(fileUrl)
      .then(response => {
        if (!response.ok) {
          throw new Error('File fetch failed');
        }
        return response.blob();
      })
      .then(blob => {
        // Trigger file download
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click(); // Trigger the download
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url); // Clean up

        // Open the file in a new tab
        window.open(fileUrl, '_blank');
      })
      .catch(error => console.error('Error handling file:', error));
  }



}

--- ./site-themes/four-theme/four-theme-my-order/return-refund-details/return-reasons-box/return-reasons-box.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/return-refund-details/return-reasons-box/return-reasons-box.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { ViewReturnImagesComponent } from '../view-return-images/view-return-images.component';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';
import { environment } from 'src/environments/environment';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { OrderResponse } from 'src/app/models/OrderResponse';

\1
  standalone: true,
  selector: 'app-return-reasons-box',
  templateUrl: './return-reasons-box.component.html',
  styleUrls: ['./return-reasons-box.component.css']
})
export class ReturnReasonsBoxComponent implements OnInit {

  @Input() prod!: OrderDetailResponse;
  @Input() order!: OrderResponse;
  @Input() orderId!: number;
  @Output() updatedOrder = new EventEmitter<OrderResponse>();
  awsURL = environment.awsKey;
  returnOrderTracks: any[] = [];
  firstTimeCalled: boolean = false;
  constructor(public dialog: MatDialog, private shoppingCart: ShoppingCartService) { }

  ngOnInit() {
    this.returnOrderTracks = this.order?.returnOrderTracks?.map((track: any) => track?.status);
  }

  async cancelItemReturn(){
    this.firstTimeCalled = true;
    (await this.shoppingCart.cancelItemReturn(this.orderId, this.prod.id)).subscribe(
      result => {
        if(result?.data?.cancelItemReturn == null){
          this.firstTimeCalled = false;
          return;
        }
        this.prod.returnOrderStatus = 'RETURN_CANCELLED';
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess',
          data: { title: '', message: result?.data?.cancelItemReturn?.message } });
          this.updatedOrder.emit(result?.data?.cancelItemReturn?.data);
          this.firstTimeCalled = false;
      }
    );
  }

  viewReturnImages(prod: OrderDetailResponse) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    dialogConfig.data = prod;
    const dialogRef = this.dialog.open(ViewReturnImagesComponent, dialogConfig);
  }

}

--- ./site-themes/four-theme/four-theme-my-order/return-refund-details/return-refund-slip/return-refund-slip.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/return-refund-details/return-refund-slip/return-refund-slip.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Address } from 'src/app/models/address';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-return-refund-slip',
  templateUrl: './return-refund-slip.component.html',
  styleUrls: ['./return-refund-slip.component.css']
})
export class ReturnRefundSlipComponent implements OnInit {

  order!: OrderResponse;
  businessAddresses: Address[] = [];
  qrCodeImage!: string;
  currency = this.tokenService.getCurrency()?.symbol;
  businessDetails: any;
  awsURL = environment.awsKey;
  constructor(private tokenService: TokenStorageService, private businessSettingService: BusinessSettingService) { }

  ngOnInit() {
    this.order = this.tokenService.getReturnOrder();
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.returnPolicyType?.toString() !== 'SALES_ARE_FINAL');
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.returnQuantity > 0);
    this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.quantity > 0);
    this.qrCodeImage = this.generateQRCode(this.order.returnQrCode);
    this.getBusinessDetails();
    this.listBusinessAddresses();
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  getBusinessDetails(){
    this.businessSettingService.getBusinessDetailsById(Number(this.tokenService.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessDetailsById){
        this.businessDetails = data?.data?.getBusinessDetailsById;
      }
    });
   }
  listBusinessAddresses(){
    this.businessSettingService.getBusinessAddressesByBusinessId(Number(this.tokenService.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
      }
    });
   }

   generateQRCode(qrCodebase64: any): string {
    return `data:image/png;base64,${qrCodebase64}`;
  }

  print_slip() {
    window.print();
  }

}

--- ./site-themes/four-theme/four-theme-my-order/return-refund-details/view-return-images/view-return-images.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/return-refund-details/view-return-images/view-return-images.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-view-return-images',
  templateUrl: './view-return-images.component.html',
  styleUrls: ['./view-return-images.component.css']
})
export class ViewReturnImagesComponent implements OnInit {


  customOptions: OwlOptions = {
    loop: true,
    margin: 20,
    nav: false, // Add this option to enable navigation arrows
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 1
      },
      400: {
        items: 1
      },
      740: {
        items:1
      },
      940: {
        items: 1
      }
    },
  }

  awsURL = environment.awsKey;
  constructor(@Inject(MAT_DIALOG_DATA) public data: any,) { }

  ngOnInit() {
  }

}

--- ./site-themes/four-theme/four-theme-my-order/view-qr-code/view-qr-code.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/view-qr-code/view-qr-code.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit, Inject } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-view-qr-code',
  templateUrl: './view-qr-code.component.html',
  styleUrls: ['./view-qr-code.component.css']
})
export class ViewQrCodeComponent implements OnInit {
  qrCodeImage!: string;
  awsUrl = environment.awsKey;
  constructor( public dialogRef: MatDialogRef<ViewQrCodeComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any) { }

  ngOnInit() {
    this.qrCodeImage = this.generateQRCode(this.data.qrCodeImage);
  }


  generateQRCode(qrCodebase64: any): string {
    return `data:image/png;base64,${qrCodebase64}`;
  }
}

--- ./site-themes/four-theme/four-theme-my-order/return-refund-process/return-refund-process.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/return-refund-process/return-refund-process.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { ReturnReasonsDetailsComponent } from '../return-reasons-details/return-reasons-details.component';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ActivatedRoute, Router } from '@angular/router';
import { environment } from 'src/environments/environment';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { Address } from 'src/app/models/address';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { StorehoursComponent } from '../../four-theme-checkout/storehours/storehours.component';

\1
  standalone: true,
  selector: 'app-return-refund-process',
  templateUrl: './return-refund-process.component.html',
  styleUrls: ['./return-refund-process.component.css']
})
export class ReturnRefundProcessComponent implements OnInit {

  selectedImages: { file: File; url: string }[] = [];
  selectedReason: string = '';
  returnQuantity: string = ''
  packagingCondition: string = '';
  DeliveryOptions: string = '';
  RefundOptions: string = '';
  subdomain: string = '';
  order!: OrderResponse;
  awsUrl = environment.awsKey;
  currency = this.tokenStorage.getCurrency()?.symbol;
  returnReason: string = '';
  businessAddresses: Address[] = [];
  businessHours: any[] = [];
  updatedDate!: Date;
  imagesObject: any[] = [];
  refundSubTotal: number = 0.0;
  shippingAndHandling: number = 0.0;
  totalEstimatedRefund: number = 0.0;
  taxRefund: number = 0.0;
  restockingFee: number = 0.0;
  disableButton: boolean = false;
  returnResolutionTypes: any[] = [];
  isReturning: boolean = false;
  loadingOrders = false;
  noOrdersAvailable = false;
  orderId!: number;
  businessId = Number(this.tokenStorage.getBusinessID()!);
  user = this.tokenStorage.getUser();

  constructor(private router: Router, private route: ActivatedRoute,public dialog: MatDialog,private shoppingCart: ShoppingCartService,
     private tokenStorage: TokenStorageService, private businessSettings: BusinessSettingService,) { }


  async ngOnInit() {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.orderId = this.route.snapshot.params['id'];
    await this.getByOrderId();
    if(!this.user){
      if(environment.env !== 'local'){
        this.subdomain = '';
      }
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
      return;
    }
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  async getByOrderId() {
    this.loadingOrders = true;
    this.noOrdersAvailable = false;
      (await this.shoppingCart.getByOrderId(this.orderId, this.businessId)).subscribe(
          data => {
              if (data?.errors) {
                  this.loadingOrders = false;
                  return;
              }
              if (data?.data?.getOrdersByCustomerAndBusinessAndOrderId) {
                  this.order = data?.data?.getOrdersByCustomerAndBusinessAndOrderId;
                  this.loadingOrders = false;
                  this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.returnPolicyType?.toString() !== 'SALES_ARE_FINAL');
                  this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.noReturnAgain === false);
                  this.order.orderDetails = this.order?.orderDetails?.filter(order => order?.quantity > 0);
                  this.order.orderDetails = this.order?.orderDetails?.filter(order => {
                    if (order.returnQuantity > 0) {
                      order.quantity = order.quantity - order.returnQuantity;
                      return order.quantity > 0;
                    }
                    return true;
                  });
                  if (this.order.orderDetails.length == 0) {
                    this.popupError('There are no items for return!');
                    return;
                  }
                  if (this.order?.orderDetails) {
                    this.order?.orderDetails?.forEach(prod => {
                      prod.returnReasonType = '';
                      prod.returnPackagingType = '';
                      prod.returnReason = '';
                      prod.returnImages = [];
                      prod.refundSubTotal = 0.0;
                      prod.shippingAndHandling = 0.0;
                      prod.totalEstimatedRefund = 0.0;
                      prod.taxRefund = 0.0;
                      prod.restockingFee = 0.0;
                    });
                  }
                  this.getReturnResolutionTypes();
                  this.listBusinessAddresses();
                  this.getBusinessHoursOfOperation();
              } else {
                  this.loadingOrders = false;
                  this.noOrdersAvailable = true;
              }
          },
          error => {
              this.loadingOrders = false;
              this.noOrdersAvailable = true;
          }
      );
}

  getQuantityOptions(quantity: number): number[] {
    return Array.from({ length: quantity }, (_, i) => i + 1);
  }

  returnReasonsDetails(){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = this.order;
    const dialogRef = this.dialog.open(ReturnReasonsDetailsComponent, dialogConfig);
  }


  onFileSelected(event: Event, prod: OrderDetailResponse): void {
    const input = event.target as HTMLInputElement;
    if (input.files) {
      const files = Array.from(input.files);
      files.forEach((file) => {
        const reader = new FileReader();
        reader.onload = (e: ProgressEvent<FileReader>) => {
          if (e.target?.result) {
            prod.returnSelectedImages = Array.from(files);
            prod.returnImages.push(e.target.result as string);
            this.selectedImages.push({
              file,
              url: e.target.result as string
            });
          }
        };
        reader.readAsDataURL(file);
      });
    }
  }

  removeImage(prod: OrderDetailResponse, index: number): void {
    this.selectedImages?.splice(index, 1);
    prod?.returnImages?.splice(index, 1);
    prod?.returnSelectedImages?.splice(index, 1);
  }

  listBusinessAddresses(){
    this.businessSettings.getBusinessAddressesByBusinessId(Number(this.tokenStorage.getBusinessID()))
    .subscribe(data => {
      if(data?.data?.getBusinessAddressesByBusinessId){
        this.businessAddresses = data?.data?.getBusinessAddressesByBusinessId;
        this.businessAddresses = this.businessAddresses?.filter(address => address?.addressType == 'STORE');
      }
    });
   }

   getBusinessHoursOfOperation(){
    this.businessSettings.getBusinessHoursOfOperation(Number(this.tokenStorage.getBusinessID())).subscribe(
      data => {
        if(data?.data?.getBusinessHoursOfOperation != null){
          this.businessHours = data?.data?.getBusinessHoursOfOperation;
        }
      }
    );
   }

   async getReturnResolutionTypes(){
    (await this.shoppingCart.getReturnResolutionTypes(this.order.id)).subscribe(
      data => {
        if(data?.data?.getReturnResolutionTypes != null){
          this.returnResolutionTypes = data?.data?.getReturnResolutionTypes;
        }
      }
    );
   }

   getOpenCloseMessage(): string {
    const daysOfWeek = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
    const todayIndex = new Date().getDay();
    const todayInfo = this.businessHours?.find(day => day?.days === daysOfWeek[todayIndex]);
    if (todayInfo?.isOpen === 'YES') {
      if (todayInfo?.allDay) {
        return `<p class='font-weight-500 text-black m-0'>Today <span class="text-success-lighter font-weight-600">Open</span> 24 hours</p>`;
      } else {
        const currentTime = new Date();
        const closingTime = this.getTimeFromHours(
          todayInfo?.endingHours,
          todayInfo?.endingMinute,
          todayInfo?.amORPmEndingHours
        );
        if (currentTime < closingTime) {
          return `<p class='font-weight-500 text-black m-0'>Today <span class="text-success-lighter font-weight-600">Open</span> until ${todayInfo?.endingHours}:${todayInfo?.endingMinute} ${todayInfo?.amORPmEndingHours}</p>`;
        } else {
          const nextOpenDayInfo = this.findNextOpenDayInfo(todayIndex + 1);
          if (nextOpenDayInfo.dayInfo) {
            return `<p class='font-weight-500 text-black m-0'>Today <span class="text-danger font-weight-600">Closed</span>, next <span class="text-success">Open</span> ${nextOpenDayInfo.daysUntilOpen} from ${this.formatHours(nextOpenDayInfo.dayInfo)}</p>`;
          } else {
            return `<p class='font-weight-500 text-black m-0'><span class="text-danger font-weight-600">Closed</span> for the week</p>`;
          }
        }
      }
    }
    for (let i = 1; i < daysOfWeek.length; i++) {
      const index = (todayIndex + i) % 7;
      const dayInfo = this.businessHours?.find(day => day?.days === daysOfWeek[index]);
      if (dayInfo?.isOpen === 'YES') {
        const daysUntilOpen = i === 1 ? 'Tomorrow' : daysOfWeek[index];
        if (dayInfo?.allDay) {
          return `<p class='font-weight-500 text-black m-0'>${daysUntilOpen} <span class="text-success-lighter font-weight-600">Open</span> 24 hours</p>`;
        } else {
          return `<p class='font-weight-500 text-black m-0'>${daysUntilOpen} <span class="text-success-lighter font-weight-600">Open</span> from ${this.formatHours(dayInfo)}</p>`;
        }
      }
    }
    return `<p class='font-weight-500 text-black m-0'><span class="text-danger font-weight-600">Closed</span> for the week</p>`;
  }

  getTimeFromHours(hours: string, minutes: string, period: string): Date {
    const time = new Date();
    const hours24 = period === 'PM' && +hours !== 12 ? +hours + 12 : +hours;
    time.setHours(hours24);
    time.setMinutes(+minutes);
    time.setSeconds(0);
    return time;
  }

  findNextOpenDayInfo(startIndex: number): { daysUntilOpen: string, dayInfo: any } {
    for (let i = 0; i < 7; i++) {
      const nextIndex = (startIndex + i) % 7;
      const nextDayInfo = this.businessHours?.find(day => day.days === ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'][nextIndex]);
      if (nextDayInfo && nextDayInfo.isOpen === 'YES') {
        const daysUntilOpen = i === 0 ? 'Tomorrow' : nextDayInfo.days;
        return { daysUntilOpen, dayInfo: nextDayInfo };
      }
    }
    return { daysUntilOpen: 'later this week', dayInfo: null };
  }

  formatHours(dayInfo: any): string {
    return `${dayInfo?.startingHours}:${dayInfo?.startingMinute} ${dayInfo?.amORPmStartingHours} - ${dayInfo?.endingHours}:${dayInfo?.endingMinute} ${dayInfo?.amORPmEndingHours}`;
  }

  calculateTimePeriodDifference(item: any, order: any): boolean {
    const deliverDateObj = new Date(order.deliverDate);
    deliverDateObj.setDate(deliverDateObj.getDate() + item.timePeriodReturn);
    const today = new Date();
    const differenceInTime = deliverDateObj.getTime() - today.getTime();
    const differenceInDays = Math.ceil(differenceInTime / (1000 * 60 * 60 * 24));
    this.updatedDate = deliverDateObj;
    return differenceInDays < 0;
}

  toggleCheckbox(prod: OrderDetailResponse, event: any) {
    if (event.checked) {
      prod.isSelected = true;
      this.onActionChange(prod);
    } else {
      prod.isSelected = false;
      this.refundSubTotal -= prod.refundSubTotal;
      this.shippingAndHandling -= prod.shippingAndHandling;
      this.totalEstimatedRefund -= prod.totalEstimatedRefund;
      this.taxRefund -= prod.taxRefund;
      this.restockingFee -= prod.restockingFee;
      prod.refundSubTotal = 0.0;
      prod.shippingAndHandling = 0.0;
      prod.totalEstimatedRefund = 0.0;
      prod.taxRefund = 0.0;
      prod.restockingFee = 0.0;
      const index = this.imagesObject.findIndex(
        (item) => item.image === prod?.product?.mainImageUrl
      );
      if (index > -1) {
        this.imagesObject.splice(index, 1);
      }
    }
  }

  onActionChange(prod: OrderDetailResponse){
    const index = this.imagesObject.findIndex(
      (item) => item.image === prod?.product?.mainImageUrl
    );
    if (index > -1) {
      this.imagesObject[index].quantity = prod.returnQuantity;
    } else if (prod.returnQuantity) {
      this.imagesObject.push({ image: prod?.product?.mainImageUrl, quantity: prod.returnQuantity });
    }
    if(prod.isSelected){
      this.order?.orderDetails?.forEach(prod => {
        this.refundSubTotal -= prod.refundSubTotal;
        this.shippingAndHandling -= prod.shippingAndHandling;
        this.totalEstimatedRefund -= prod.totalEstimatedRefund;
        this.taxRefund -= prod.taxRefund;
        this.restockingFee -= prod.restockingFee;
      });
      let totalQuantity = prod.acceptedQuantity + prod.quantityDifference;
      prod.shippingAndHandling = (prod.surcharge / totalQuantity) * prod.returnQuantity;
      if(this.order.orderType !== 'ORDER_ONLINE_SHIP_TO_HOME'){
        prod.shippingAndHandling = 0.0;
      }
      prod.refundSubTotal = (prod.salePrice * prod.returnQuantity);
      if (prod.returnFeeType === 'FIXED'){
        prod.restockingFee = prod.returnFee * prod.returnQuantity;
      }
      if (prod.returnFeeType === 'PERCENTAGE'){
        prod.restockingFee = (prod.returnFee/100.00) * prod.refundSubTotal;
      }
      const promoRefund = (prod.promotionDiscount / totalQuantity) * prod.returnQuantity;
      prod.refundSubTotal -= promoRefund;
      const salesTax = (prod.tax / totalQuantity) * prod.returnQuantity;
      const shippingCost = this.order.shippingCost;
      const newShippingCost = this.order.shippingCost - prod.shippingAndHandling;
      let shippingTaxRefund = 0.0;
      if(shippingCost && shippingCost !== null){
        const shippingDifference = shippingCost- newShippingCost;
        if(shippingDifference > 0) {
          shippingTaxRefund = (this.order.shippingTax / shippingCost) * shippingDifference;
        }
      }
      prod.taxRefund = shippingTaxRefund + salesTax;

      if(this.order.orderPromotionDiscounts !== null && this.order.orderPromotionDiscounts > 0) {
          const orderTotalWithoutPromotionApplied = this.order.total + this.order.orderPromotionDiscounts;
          const totalOrderPromotionRefund = ((this.order.orderPromotionDiscounts * (prod.refundSubTotal + salesTax)) / orderTotalWithoutPromotionApplied);
          prod.refundSubTotal = prod.refundSubTotal - totalOrderPromotionRefund;
        }
      prod.totalEstimatedRefund = prod.shippingAndHandling + shippingTaxRefund + salesTax + prod.refundSubTotal - prod.restockingFee;
    }
    this.order?.orderDetails?.forEach(prod => {
      this.refundSubTotal += prod.refundSubTotal;
      this.shippingAndHandling += prod.shippingAndHandling;
      this.totalEstimatedRefund += prod.totalEstimatedRefund;
      this.taxRefund += prod.taxRefund;
      this.restockingFee += prod.restockingFee;
    });
  }

  async initiateReturn(orderId: number, resolutionType: string, deliveryType: string): Promise<void> {
  this.isReturning = true;

  const selectedProducts = this.order?.orderDetails?.filter((prod: any) => prod.isSelected);
  const invalidProduct = selectedProducts?.find((prod: any) => {
    return (
      prod.returnQuantity == null ||
      (prod.returnReasonType == null || !prod.returnReasonType) ||
      (prod.returnPackagingType == null || !prod.returnPackagingType) ||
      (!prod.returnReason || prod.returnReason == null) ||
      (!prod.returnSelectedImages || prod.returnSelectedImages.length === 0)
    );
  });

  if (invalidProduct) {
    this.popupError('All selected products must have valid quantity, reason, packaging, detailed information, and at least one image.');
    this.isReturning = false;
    return;
  }

  if (selectedProducts?.length === 0) {
    this.popupError('Please select at least one item for return');
    this.isReturning = false;
    return;
  }

  if (!resolutionType || resolutionType === '') {
    this.popupError('Please Select Preferred Resolution');
    this.isReturning = false;
    return;
  }

  if (!deliveryType || deliveryType === '') {
    this.popupError('Please Select Options for Delivery');
    this.isReturning = false;
    return;
  }

  const returnProducts = selectedProducts?.map((prod: any) => ({
    id: prod.id,
    quantity: prod.returnQuantity,
    reason: prod.returnReasonType,
    packaging: prod.returnPackagingType,
    detailedInfo: prod.returnReason,
    images: prod.returnSelectedImages,
  }));

  try {
    this.disableButton = true;
    const response = await (await this.shoppingCart.initiateReturnRequest(orderId, returnProducts, resolutionType, deliveryType)).toPromise();
    if (response?.errors) {
      this.disableButton = false;
      this.popupError(response?.errors[0]?.errorMessage);
      this.isReturning = false;
      return;
    }

    if (environment.env !== 'local') {
      this.subdomain = '';
    }

    this.tokenStorage.saveReturnOrder(response?.data?.initiateReturnRequest?.data);
    this.router.navigateByUrl(`/${this.subdomain}/return-refund-details`);
  } catch (error) {
    this.popupError('Something went wrong. Please try again later.');
  } finally {
    this.isReturning = false;
    this.disableButton = false;
  }
}


  private popupError(message: string) {
    this.dialog.open(NotifacationMessageComponent, {
      backdropClass: 'notificationmodal-popup',
      width: '450px',
      data: { title: 'ERROR', message: message }
    });
  }


   viewStoreHours(){
      const dialogConfig = new MatDialogConfig();
      dialogConfig.panelClass = 'modal-medium-width';
      dialogConfig.data = this.businessHours;
      this.dialog.open( StorehoursComponent, dialogConfig);
    }

    viewRequestStatus() {
        this.router.navigateByUrl(`/${this.subdomain}/return-refund-details`);
    }

}

--- ./site-themes/four-theme/four-theme-my-order/editpickupinfoforreserve/editpickupinfoforreserve.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/editpickupinfoforreserve/editpickupinfoforreserve.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { formatDate } from '@angular/common';
import { Component, Inject, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { lastValueFrom } from 'rxjs';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-editpickupinfoforreserve',
  templateUrl: './editpickupinfoforreserve.component.html',
  styleUrls: ['./editpickupinfoforreserve.component.css']
})
export class EditpickupinfoforreserveComponent implements OnInit {
  pickupPerson: string = '';
  order!: OrderResponse;
  addCustomerInfo: boolean = false;
  pickupDetails!: FormGroup;
  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog,private fb: FormBuilder,
  private translate: TranslateService,
  private shoppingCart: ShoppingCartService, public dialogRef: MatDialogRef<EditpickupinfoforreserveComponent>) { }

  ngOnInit() {
    this.order = this.data;
    const pickupTime = new Date(this.order.pickupTime);
    if (isNaN(pickupTime.getTime())) {
      throw new Error('Invalid pickupTime format');
    }
    const pickupDate = pickupTime.toISOString().split('T')[0];
    const pickupTimeFormatted = pickupTime.toTimeString().split(' ')[0].slice(0, 5);
    this.pickupDetails = this.fb.group({
      pickupDate: [pickupDate, Validators.required],
      pickupTime: [pickupTimeFormatted, Validators.required],
    });
  }

  get getControl(): { [key: string]: AbstractControl; } {
    return this.pickupDetails.controls;
  }

  filterDates = (date: Date | null): boolean => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return date ? date >= today : false;
  };

  async updatePickupInfo() {
    const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
    const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
    if (!pickupDateValue || !pickupTimeValue) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'Please update correct details' }
      });
      return;
    }
    this.addCustomerInfo = true;
    try {
      const isTimeAvailable = await this.checkTimeAvailable();
      if (!isTimeAvailable) {
        this.addCustomerInfo = false;
        return;
      }
      const [hours, minutes] = pickupTimeValue.split(':');
      const combinedDateTime = new Date(pickupDateValue);
      combinedDateTime.setHours(Number(hours), Number(minutes));
      const browserLocale = navigator.language || 'en-US';
      const formattedDateTime = formatDate(combinedDateTime, 'yyyy-MM-dd HH:mm:ss', browserLocale);
      (await this.shoppingCart.updatePickUpInfo(
        this.order.id, '', '', '', '', formattedDateTime)).subscribe(
        data => {
          if (data?.errors) {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
            });
            this.addCustomerInfo = false;
            return;
          }
          if (data?.data?.updatePickUpInfo) {
            this.dialogRef.close({ event: 'close', data: data?.data?.updatePickUpInfo?.data });
            this.dialog.open(SucessmsgPopupComponent, {
              backdropClass: 'notificationmodal-popup-sucess',
              data: {
                title: 'SUCCESS',
                message: data?.data?.updatePickUpInfo?.message
              }
            });
          }
        }
      );
    } catch (error) {
      this.addCustomerInfo = false;
    }
}

async checkTimeAvailable(): Promise<boolean> {
    const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
    const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
    if (!pickupDateValue || !pickupTimeValue) {
      return false;
    }
    try {
      const [hours, minutes] = pickupTimeValue.split(':');
      const combinedDateTime = new Date(pickupDateValue);
      combinedDateTime.setHours(Number(hours), Number(minutes));
      const browserLocale = navigator.language || 'en-US';
      const formattedDateTime = formatDate(combinedDateTime, 'yyyy-MM-ddTHH:mm:ss', browserLocale);
      const response = await lastValueFrom(
        await this.shoppingCart.isTimeAvailable(formattedDateTime)
      );
      if (response?.errors) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: response?.errors[0]?.errorMessage }
        });
        return false;
      }
      if (response?.data?.isTimeAvailable?.timeAvailable === false) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.translate.instant('PLEASE_SELECT_BUSINESS_TIME') }
        });
        return false;
      }
      return response?.data?.isTimeAvailable?.timeAvailable === true;
    } catch (error) {
      console.error('Error checking time availability:', error);
      return false;
    }
}

public popupMessagenotefication(message: string) {
  this.dialog.open(NotifacationMessageComponent, {
    backdropClass: 'notificationmodal-popup',
    width: '450px',
    data: { title: 'ERROR', message: message },
  });
}

}

--- ./site-themes/four-theme/four-theme-my-order/order-details/order-details.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/order-details/order-details.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';
import { EditReviewModalComponent } from '../../edit-review-modal/edit-review-modal.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { EditordercustomerdetailsComponent } from '../editordercustomerdetails/editordercustomerdetails.component';
import { EditordershippingaddressComponent } from '../editordershippingaddress/editordershippingaddress.component';
import { EditorderpaymentmethodComponent } from '../editorderpaymentmethod/editorderpaymentmethod.component';
import { SharedService } from 'src/app/service/shared-service/shared.service';
import { EditorderpickupinfoComponent } from '../editorderpickupinfo/editorderpickupinfo.component';
import { ProofofdeliveryComponent } from '../proofofdelivery/proofofdelivery.component';
import { ProofofPickupComponent } from '../ProofofPickup/ProofofPickup.component';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { OrderDetailResponse } from 'src/app/models/OrderDetailResponse';
import { EditpickupinfoforreserveComponent } from '../editpickupinfoforreserve/editpickupinfoforreserve.component';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-order-details',
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css']
})
export class OrderDetailsComponent implements OnInit {

  subdomain: string = '';
  businessId = Number(this.tokenStorage.getBusinessID()!);
  order!: OrderResponse;
  user = this.tokenStorage.getUser();
  orderPrefix = this.tokenStorage.getOrderFormat()?.prefix;
  orderSuffix = this.tokenStorage.getOrderFormat()?.suffix;
  awsUrl = environment.awsKey;
  currency = this.tokenStorage.getCurrency()?.symbol;
  orderHistory: boolean = false;
  differenceInDays!: number;
  isDateExceeded: boolean = false;
  updatedDate!: Date;
  sessionResponse!: SessionResponse;
  orderId!: number;
  loadingOrders = false;
  noOrdersAvailable = false;
  paymentId: string = '';
  token: string = '';
  payerId: string = '';

  constructor( private route: ActivatedRoute, public shoppingCart: ShoppingCartService,private router: Router, private sharedService: SharedService,
    public tokenStorage: TokenStorageService, public dialog: MatDialog,private cdr: ChangeDetectorRef,
    private cookieDate: CookieDataServiceService,) {
      if(this.businessId &&  cookieDate.getCookie(this.businessId!.toString()) != ''){
        this.sessionResponse = JSON.parse(cookieDate.getCookie(this.businessId!.toString()));
      }
     }

  async ngOnInit() {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.orderId = this.route.snapshot.params['id'];
    this.route.queryParams.subscribe(async params => {
      console.log(params, 'paramssss')
      if (params && Object.keys(params).length > 0){
          const paymentId = params['paymentId'];
          const token = params['token'];
          const payerId = params['PayerID'];
          await this.getByOrderId();
          if (paymentId && token && payerId) {
            this.paymentId = paymentId;
            this.token = token;
            this.payerId = payerId;
            await this.updatePaymentValidation();
          } else{
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: 'Payment have declined!' }
            });
          }
      }
    })

    if(!this.user && (this.sessionResponse?.userType !== 'GUEST' || this.tokenStorage.getOrderForOrderDetails() == null)){
      if (environment.env !== 'local') {
        this.subdomain = '';
      }
      this.router.navigate([this.subdomain ? `/${this.subdomain}/home` : '/home']);
    }
    if(this.user){
      this.getByOrderId();
    } else {
      this.order = this.tokenStorage.getOrderForOrderDetails();
      this.getOrderTracking();
    }
    this.orderHistory = window.history.state.orderhistory;
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  async updatePaymentValidation(){
    (await this.shoppingCart.updatePaymentValidation(this.orderId, this.paymentId, this.token, this.payerId, 'PAYPAL')).subscribe(
      data => {
        if(data?.errors){
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: {
                title: 'ERROR',
                message: data?.errors[0]?.errorMessage
            }
            });
          return;
        }
        if(data?.data?.updatePaymentValidation){
          console.log(data, 'updatePaymentValidation')
          this.dialog.open(SucessmsgPopupComponent, {
            backdropClass: 'notificationmodal-popup-sucess',
            data: {
                title: 'SUCCESS',
                message: data?.data?.updatePaymentValidation?.message
            }
        });
          this.order = data?.data?.updatePaymentValidation?.data;
          this.router.navigate([], {
            relativeTo: this.route,
            queryParams: {},
            replaceUrl: true
          });
        }
      }
    );
  }

  async getOrderTracking(){
      (await this.shoppingCart.getOrderTracking(this.order?.businessOrderId.trim(), this.order?.orderAddressResponse?.email.trim())).subscribe(
        data => {
          if(data?.errors){
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: '', message: data?.errors[0]?.errorMessage}
            });
            return;
          }
          if(data?.data?.getOrderTracking){
            const order = data?.data?.getOrderTracking;
            this.order = order;
            this.tokenStorage.saveOrderForOrderDetails(order);
          }
        }
      )
  }

  async getByOrderId() {
    if (this.user) {
      this.loadingOrders = true;
      this.noOrdersAvailable = false;
        (await this.shoppingCart.getByOrderId(this.orderId, this.businessId)).subscribe(
            data => {
                if (data?.errors) {
                    this.loadingOrders = false;
                    return;
                }
                if (data?.data?.getOrdersByCustomerAndBusinessAndOrderId) {
                    this.order = data?.data?.getOrdersByCustomerAndBusinessAndOrderId;
                    this.loadingOrders = false;
                } else {
                    this.loadingOrders = false;
                    this.noOrdersAvailable = true;
                }
            },
            error => {
                this.loadingOrders = false;
                this.noOrdersAvailable = true;
            }
        );
    }
}

  async actionOnPendingOrder(itemId: number, status: string){
    (await this.shoppingCart.actionOnPendingOrder(this.order.id, itemId, status)).subscribe(
      async data => {
        if(data?.data?.actionOnPendingOrder != null){
         this.order = data?.data?.actionOnPendingOrder;
         this.cdr.detectChanges();
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  async cancelOrder(order: any){
    (await this.shoppingCart.cancelOrder(order.id)).subscribe(
      async data => {
        if(data?.data?.cancelOrder != null){
          this.order = data?.data?.cancelOrder?.data;
          this.cdr.detectChanges();
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage}
          });
        }
      }
    );
  }

  getTracks(order: OrderResponse): any[] {
    return order?.orderTracks?.map((track: any) => track?.status);
  }

  calculateTimePeriodDifference(item: any, order: any): any {
    const deliverDateObj = new Date(order.deliverDate);
    deliverDateObj.setDate(deliverDateObj.getDate() + item.timePeriodReturn);
    const today = new Date();
    const differenceInTime = deliverDateObj.getTime() - today.getTime();
    const differenceInDays = Math.ceil(differenceInTime / (1000 * 60 * 60 * 24));
    this.isDateExceeded = differenceInDays < 0;
    this.updatedDate = deliverDateObj;
    this.differenceInDays = differenceInDays;
    return this.updatedDate;
}

  openPrintOrderSummary(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    this.tokenStorage.saveOrderForPrint(order);
    const url = `/${this.subdomain}/print-order-summary/${orderId}`;
    const fullUrl = this.router.serializeUrl(this.router.createUrlTree([url]));
    window.open(fullUrl, '_blank');
  }

  editreviewmodal(product: ProductResponse){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = {action: 'ADD', item: product};
    this.dialog.open(EditReviewModalComponent, dialogConfig);
  }

  openLinkInNewTab(order: any) {
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    const orderId = order.id;
    this.tokenStorage.saveOrderForPrint(order);
    const url = `/${this.subdomain}/print-order-summary/${orderId}`;
    const fullUrl = this.router.serializeUrl(this.router.createUrlTree([url]));
    window.open(fullUrl, '_blank');
  }

  editOrderCustomerDetails() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = this.order;
    const dialogRef = this.dialog.open( EditordercustomerdetailsComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if(result.data){
        this.order = result.data;
        this.tokenStorage.saveOrderForOrderDetails(this.order);
        this.sharedService.setOrderData(this.order);
      }
     });
  }

  editOrderShippingDetails(){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = this.order;
    const dialogRef = this.dialog.open( EditordershippingaddressComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if(result.data){
        this.order = result.data;
        this.tokenStorage.saveOrderForOrderDetails(this.order);
        this.sharedService.setOrderData(this.order);
      }
     });
  }

  editOrderPaymentMethod() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-x-medium-width';
    dialogConfig.data = this.order;
    const dialogRef = this.dialog.open( EditorderpaymentmethodComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if(result.data){
        this.order = result.data;
        this.tokenStorage.saveOrderForOrderDetails(this.order);
        this.sharedService.setOrderData(this.order);
      }
     });
  }


  editPickupInformation() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'modal-medium-width';
    dialogConfig.data = this.order;
    const dialogRef = this.dialog.open( EditorderpickupinfoComponent, dialogConfig);
    dialogRef.afterClosed().subscribe((result) => {
      if(result.data){
        this.order = result.data;
        this.tokenStorage.saveOrderForOrderDetails(this.order);
        this.sharedService.setOrderData(this.order);
      }
     });
}


editPickupInformationReserve() {
  const dialogConfig = new MatDialogConfig();
  dialogConfig.panelClass = 'modal-medium-width';
  dialogConfig.data = this.order;
  const dialogRef = this.dialog.open( EditpickupinfoforreserveComponent, dialogConfig);
  dialogRef.afterClosed().subscribe((result) => {
    if(result.data){
      this.order = result.data;
      this.tokenStorage.saveOrderForOrderDetails(this.order);
      this.sharedService.setOrderData(this.order);
    }
   });
}


seeProofofDelivery(order: OrderResponse) {
  const dialogConfig = new MatDialogConfig();
  dialogConfig.panelClass = 'modal-medium-width';
  dialogConfig.data = order;
  const dialogRef = this.dialog.open(ProofofdeliveryComponent, dialogConfig);
}

seeProofofPickup(order: OrderResponse) {
  const dialogConfig = new MatDialogConfig();
  dialogConfig.panelClass = 'modal-medium-width';
  dialogConfig.data = order;
  const dialogRef = this.dialog.open(ProofofPickupComponent, dialogConfig);
}
openReturnOrder(order: any) {
  if (environment.env !== 'local') {
    this.subdomain = '';
  }
  const orderId = order.id;
  const url = `/${this.subdomain}/return-refund/${orderId}`;
  this.router.navigateByUrl(url, {state: {order: order, orderhistory: false}});
}

convertUtcToLocal(utcDate: any): string {
  utcDate = utcDate + '.00Z'
  const date = new Date(utcDate);
  return date.toLocaleString();
}

openReturnOrderDetails(order: any) {
  if (environment.env !== 'local') {
    this.subdomain = '';
  }
  this.tokenStorage.saveReturnOrder(order);
  const url = `/${this.subdomain}/return-refund-details`;
  this.router.navigateByUrl(url);
}

getOrderSales(order: OrderResponse): any[] {
  return order?.orderDetails?.filter((sale: any) => sale?.returnPolicyType === 'SALES_RETURN_ALLOWED');
}

getItemReturnBlocked(order: OrderResponse): any[] {
  return order?.orderDetails?.filter((item: OrderDetailResponse) => item?.noReturnAgain === true);
}


}

--- ./site-themes/four-theme/four-theme-my-order/editorderpickupinfo/editorderpickupinfo.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/editorderpickupinfo/editorderpickupinfo.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { formatDate } from '@angular/common';
import { Component, Inject, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { lastValueFrom } from 'rxjs';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-editorderpickupinfo',
  templateUrl: './editorderpickupinfo.component.html',
  styleUrls: ['./editorderpickupinfo.component.css']
})
export class EditorderpickupinfoComponent implements OnInit {
  filterDates = (date: Date | null): boolean => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return date ? date >= today : false;
  };

  pickupPerson: string = '';
  order!: OrderResponse;
  addCustomerInfo: boolean = false;
  pickupDetails!: FormGroup;
  isTimeCorrect: boolean = false;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog,private fb: FormBuilder,
  private translate: TranslateService,
  private shoppingCart: ShoppingCartService, public dialogRef: MatDialogRef<EditorderpickupinfoComponent>) { }

  ngOnInit() {
    this.order = this.data;
    const pickupTime = new Date(this.order.pickupTime);
    if (isNaN(pickupTime.getTime())) {
      throw new Error('Invalid pickupTime format');
    }
    const pickupDate = pickupTime.toISOString().split('T')[0];
    const pickupTimeFormatted = pickupTime.toTimeString().split(' ')[0].slice(0, 5);
    this.pickupDetails = this.fb.group({
      pickupDate: [pickupDate, Validators.required],
      pickupTime: [pickupTimeFormatted, Validators.required],
    });
  }

  get getControl(): { [key: string]: AbstractControl; } {
    return this.pickupDetails.controls;
  }


  async updatePickupInfo() {
    if (!this.order.pickUpPersonResponse.firstName || !this.order.pickUpPersonResponse.lastName) {
      this.popupMessagenotefication(this.translate.instant('FNAME_LNAME_ERROR'));
      return;
    }
    if (!this.order.pickUpPersonResponse.email || !this.isValidEmail(this.order.pickUpPersonResponse.email)) {
      this.popupMessagenotefication(this.translate.instant('EMAIL_ERROR'));
      return;
    }
    if (!this.order.pickUpPersonResponse.phoneNumber || !this.isValidPhoneNumber(this.order.pickUpPersonResponse.phoneNumber)) {
      this.popupMessagenotefication(this.translate.instant('PHONE_ERROR'));
      return;
    }
    const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
    const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
    if (!pickupDateValue || !pickupTimeValue) {
      this.dialog.open(NotifacationMessageComponent, {
        backdropClass: 'notificationmodal-popup',
        width: '450px',
        data: { title: '', message: 'Please update correct details' }
      });
      return;
    }
    this.addCustomerInfo = true;
    try {
      const isTimeAvailable = await this.checkTimeAvailable();
      if (!isTimeAvailable) {
        this.addCustomerInfo = false;
        return;
      }
      const [hours, minutes] = pickupTimeValue.split(':');
      const combinedDateTime = new Date(pickupDateValue);
      combinedDateTime.setHours(Number(hours), Number(minutes));
      const browserLocale = navigator.language || 'en-US';
      const formattedDateTime = formatDate(combinedDateTime, 'yyyy-MM-dd HH:mm:ss', browserLocale);
      (await this.shoppingCart.updatePickUpInfo(
        this.order.id,
        this.order?.pickUpPersonResponse?.firstName,
        this.order?.pickUpPersonResponse?.lastName,
        this.order?.pickUpPersonResponse?.phoneNumber,
        this.order?.pickUpPersonResponse?.email,
        formattedDateTime
      )).subscribe(
        data => {
          if (data?.errors) {
            this.dialog.open(NotifacationMessageComponent, {
              backdropClass: 'notificationmodal-popup',
              width: '450px',
              data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
            });
            this.addCustomerInfo = false;
            return;
          }
          if (data?.data?.updatePickUpInfo) {
            this.dialogRef.close({ event: 'close', data: data?.data?.updatePickUpInfo?.data });
            this.dialog.open(SucessmsgPopupComponent, {
              backdropClass: 'notificationmodal-popup-sucess',
              data: {
                title: 'SUCCESS',
                message: data?.data?.updatePickUpInfo?.message
              }
            });
          }
        }
      );
    } catch (error) {
      this.addCustomerInfo = false;
    }
}

async checkTimeAvailable(): Promise<boolean> {
    const pickupDateValue = this.pickupDetails.get('pickupDate')?.value;
    const pickupTimeValue = this.pickupDetails.get('pickupTime')?.value;
    if (!pickupDateValue || !pickupTimeValue) {
      return false;
    }
    try {
      const [hours, minutes] = pickupTimeValue.split(':');
      const combinedDateTime = new Date(pickupDateValue);
      combinedDateTime.setHours(Number(hours), Number(minutes));
      const browserLocale = navigator.language || 'en-US';
      const formattedDateTime = formatDate(combinedDateTime, 'yyyy-MM-ddTHH:mm:ss', browserLocale);
      const response = await lastValueFrom(
        await this.shoppingCart.isTimeAvailable(formattedDateTime)
      );
      if (response?.errors) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: response?.errors[0]?.errorMessage }
        });
        return false;
      }
      if (response?.data?.isTimeAvailable?.timeAvailable === false) {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: this.translate.instant('PLEASE_SELECT_BUSINESS_TIME') }
        });
        return false;
      }
      return response?.data?.isTimeAvailable?.timeAvailable === true;
    } catch (error) {
      console.error('Error checking time availability:', error);
      return false;
    }
}

private isValidPhoneNumber(phoneNumber: string): boolean {
  const phoneRegex = /^[0-9]{0,15}$/;
  return phoneRegex.test(phoneNumber);
}

private isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

public popupMessagenotefication(message: string) {
  this.dialog.open(NotifacationMessageComponent, {
    backdropClass: 'notificationmodal-popup',
    width: '450px',
    data: { title: 'ERROR', message: message },
  });
}
}

--- ./site-themes/four-theme/four-theme-my-order/editorderpaymentmethod/editorderpaymentmethod.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/editorderpaymentmethod/editorderpaymentmethod.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, ElementRef, Inject, OnInit, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

declare var Finix: any;

\1
  standalone: true,
  selector: 'app-editorderpaymentmethod',
  templateUrl: './editorderpaymentmethod.component.html',
  styleUrls: ['./editorderpaymentmethod.component.css']
})
export class EditorderpaymentmethodComponent implements OnInit {
  paymentMethod: string = '';
  order!: OrderResponse;
  mode: string = '';
  @ViewChild('finixFormContainer', { static: false }) finixFormContainer!: ElementRef;
  getOnBoardingForm: any;
  finixApplicationId: string = '';
  createdFinixIdentity: any;
  createdPaymentInstrument: any;
  createdAuthorization: any;
  captureAmount!: number;
  finixSessionKey: string = '';
  isFinixPay: boolean = false;
  businessID = Number(this.tokenStorage.getBusinessID());
  user = this.tokenStorage.getUser();
  businessPayments: string[] = [];
  isFazealPayEnabled = false;
  isPayPalEnabled = false;
  isCODEnabled: boolean = false;
  paypalUrl: string = '';
  paypalLoading: boolean = false;
  isPaymentLoading: boolean = false;
  firstTimeCalled: boolean = false;
  isLoading: boolean = false;


  constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialog: MatDialog,private translate: TranslateService,
  private tokenStorage: TokenStorageService,private businessSettingService: BusinessSettingService,
  private shoppingCart: ShoppingCartService, public dialogRef: MatDialogRef<EditorderpaymentmethodComponent>) { }

  async ngOnInit() {
    this.order = this.data;
    await this.getOnboardingFormLink();
    await this.getPaymentMethods();
    await this.createPaymentIntentForUpdatePayment();
  }

  getPaymentMethods() {
    this.businessSettingService.getBusinessPaymentMethodsForCustomerSide(this.businessID).subscribe(
      data => {
        console.log(data);
        this.businessPayments = data?.data?.getBusinessPaymentMethodsForCustomerSide;
        if (this.businessPayments?.length > 0 && this.businessPayments?.includes('FAZEAL_PAY')) {
          this.isFazealPayEnabled = true;
        }
        if (this.businessPayments?.length > 0 && this.businessPayments?.includes('PAYPAL')) {
          this.isPayPalEnabled = true;
        }
        if (this.businessPayments?.length > 0 && this.businessPayments?.includes('CASH_ON_DELIVERY')) {
          this.isCODEnabled = true;
        }
      }
    );
  }

  async getOnboardingFormLink(){
    this.isLoading = true;
    (await this.shoppingCart.getOnboardingFormLink()).subscribe(
      data => {
        if(data?.errors){
          this.isLoading = false;
          return;
        }
        if(data?.data?.getOnboardingFormLinkForCustomer){
          this.getOnBoardingForm = data?.data?.getOnboardingFormLinkForCustomer;
          if (this.getOnBoardingForm?.merchantId && this.getOnBoardingForm?.merchantId !== null && this.getOnBoardingForm?.status === 'APPROVED') {
            this.isFinixPay = true;
            this.finixApplicationId = this.getOnBoardingForm?.applicationId;
            this.initializeFinix();
            this.isLoading = false;
          }
        }
      }
    );
  }

  private initializeFinix() {
    if (typeof Finix === 'undefined') {
        console.error('Finix SDK not loaded');
        return;
    }

    if (!this.getOnBoardingForm?.merchantId) {
        console.error('Merchant ID not available');
        return;
    }

    if(environment.env === 'prod') {
        this.mode = 'live';
    } else {
        this.mode = 'sandbox';
    }

    const FinixAuth = Finix.Auth(this.mode, this.getOnBoardingForm.merchantId);
    console.log(this.getOnBoardingForm.merchantId, 'this.getOnBoardingForm.merchantId')
    console.log(Finix.Auth(this.mode, this.getOnBoardingForm.merchantId), 'Finix.Auth(this.mode, this.getOnBoardingForm.merchantId)')
    console.log(FinixAuth.getSessionKey(), 'FinixAuth.getSessionKey()')
    const form = Finix.CardTokenForm('finix-form', {
        showAddress: true,
        onSubmit: () => {
            this.isPaymentLoading = true;
            form.submit(this.mode, this.finixApplicationId, (err: any, res: any) => {
                if (err) {
                    console.error('Error:', err);
                    this.isPaymentLoading = false;
                    return;
                }
                const token = res?.data?.id;
                this.finixSessionKey = FinixAuth.getSessionKey();
                this.createFinixIdentity(token);
            });
        }
    });
}

    async createFinixIdentity(token: string){
      this.isPaymentLoading = true;
        (await this.shoppingCart.createFinixIdentity('', '', '', '', '', '', '', '', '')).subscribe(
          data => {
            if(data?.errors){
              this.isPaymentLoading = false;
              return;
            }
            if(data?.data?.createFinixIdentity){
              console.log(data, 'createFinixIdentity')
              this.createdFinixIdentity = data?.data?.createFinixIdentity;
              this.createFinixPaymentInstruments(token, this.createdFinixIdentity.id);
            }
          }
        );
       }

       async createFinixPaymentInstruments(token: string, identityId: string){
        this.isPaymentLoading = true;
        (await this.shoppingCart.createPaymentInstruments(token, "TOKEN", identityId)).subscribe(
          data => {
            if(data?.errors){
              this.isPaymentLoading = false;
              return;
            }
            if(data?.data?.createPaymentInstruments){
              console.log(data, 'createPaymentInstruments')
              this.createdPaymentInstrument = data?.data?.createPaymentInstruments;
              this.createAuthorization();
            }
          }
        );
       }

       async createAuthorization() {
        const amount = (this.order.total * 100).toFixed(0);
        this.captureAmount = Number(amount);
        this.isPaymentLoading = true;
        (await this.shoppingCart.createAuthorization(
            this.captureAmount,
            this.createdPaymentInstrument.currency,
            this.getOnBoardingForm?.merchantId,
            this.createdPaymentInstrument.id,
            this.finixSessionKey != undefined ?  this.finixSessionKey : ''
        )).subscribe(
          (data) => {
            if(data?.errors){
              const errorMessage = data?.errors[0]?.errorMessage;
              let failureMessage = 'The transaction was declined';
              let failureCode = 'GENERIC_DECLINE';
              if (errorMessage) {
                try {
                    const embeddedErrorMatch = errorMessage.match(/"failure_message"\s*:\s*"([^"]+)"/);
                    const codeMatch = errorMessage.match(/"failure_code"\s*:\s*"([^"]+)"/);
                    if (embeddedErrorMatch && embeddedErrorMatch[1]) {
                        failureMessage = embeddedErrorMatch[1];
                    }
                    if (codeMatch && codeMatch[1]) {
                        failureCode = codeMatch[1];
                    }
                } catch (e) {
                    console.error('Error parsing error message:', e);
                }
              }
              this.showErrorDialog(
                  this.translate.instant(failureCode),
                  failureMessage
              );
              this.isPaymentLoading = false;
              return;
            }
            if (data?.data?.createAuthorization?.id) {
                console.log(data, 'createAuthorization');
                this.createdAuthorization = data?.data?.createAuthorization;
                this.updatePaymentValidation("FINIX");
            }
          });
    }


    async updatePaymentValidation(paymentType: string){
      this.firstTimeCalled = true;
      (await this.shoppingCart.updatePaymentValidation(this.order.id, '', this.createdAuthorization != undefined ? this.createdAuthorization?.id : '', '', paymentType)).subscribe(
        data => {
          if(data?.errors){
            this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: {
                title: 'ERROR',
                message: data?.errors[0]?.errorMessage
            }
            });
            this.isPaymentLoading = false;
            this.firstTimeCalled = false;
            return;
          }
          if(data?.data?.updatePaymentValidation){
            console.log(data, 'updatePaymentValidation')
            this.dialogRef.close({ event: 'close', data: data?.data?.updatePaymentValidation?.data });
            this.dialog.open(SucessmsgPopupComponent, {
              backdropClass: 'notificationmodal-popup-sucess',
              data: {
                  title: 'SUCCESS',
                  message: data?.data?.updatePaymentValidation?.message
              }
          });
          this.firstTimeCalled = false;
          }
        }
      );
    }


    async createPaymentIntentForUpdatePayment(){
      this.paypalLoading = true;
      (await this.shoppingCart.createPaymentIntentForUpdatePayment(this.order.id, 'PAYPAL', this.user?.firstName + ' ' + this.user?.lastName, this.user?.email,
        '', '', '', '', this.user?.country ? this.user?.country?.name : '',
        this.order.subtotal, this.order.tax, this.order.shippingCost)).subscribe(data => {
          if(data.errors){
            this.paypalLoading = false;
            return;
          }
          console.log(data)
          this.paypalLoading = false;
          this.paypalUrl = data?.data?.createPaymentIntentForUpdatePayment?.paypalRedirectUrl;
        })
    }

    async redirectToPaypal(){
      window.location.href = this.paypalUrl;
    }

    private showErrorDialog(title: string, message: string) {
        this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: {
                title: title,
                message: message
            }
        });
    }

}

--- ./site-themes/four-theme/four-theme-my-order/return-reasons-details/return-reasons-details.component.ts
+++ ./site-themes/four-theme/four-theme-my-order/return-reasons-details/return-reasons-details.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-return-reasons-details',
  templateUrl: './return-reasons-details.component.html',
  styleUrls: ['./return-reasons-details.component.css']
})
export class ReturnReasonsDetailsComponent implements OnInit {

  order!: OrderResponse;
  awsUrl = environment.awsKey;
  constructor(@Inject(MAT_DIALOG_DATA) public data: any,) { }

  ngOnInit() {
    this.order = this.data;
  }

}

--- ./site-themes/four-theme/redeem-points/redeem-points.component.ts
+++ ./site-themes/four-theme/redeem-points/redeem-points.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';

\1
  standalone: true,
  selector: 'app-redeem-points',
  templateUrl: './redeem-points.component.html',
  styleUrls: ['./redeem-points.component.css']
})
export class RedeemPointsComponent implements OnInit {

  constructor() { }

  ngOnInit() {
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }




}

--- ./site-themes/four-theme/redeem-points/redeem-voucher-box/redeem-voucher-box.component.ts
+++ ./site-themes/four-theme/redeem-points/redeem-voucher-box/redeem-voucher-box.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { RedeemPointValidationPopupComponent } from '../redeem-point-validation-popup/redeem-point-validation-popup.component';

\1
  standalone: true,
  selector: 'app-redeem-voucher-box',
  templateUrl: './redeem-voucher-box.component.html',
  styleUrls: ['./redeem-voucher-box.component.css']
})
export class RedeemVoucherBoxComponent implements OnInit {

  constructor(public dialog: MatDialog) { }

  ngOnInit() {
  }


  redeemPoints() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(RedeemPointValidationPopupComponent, { panelClass: 'modal-medium-width' });
  }

}

--- ./site-themes/four-theme/redeem-points/redeem-products-popup/redeem-products-popup.component.ts
+++ ./site-themes/four-theme/redeem-points/redeem-products-popup/redeem-products-popup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';

\1
  standalone: true,
  selector: 'app-redeem-products-popup',
  templateUrl: './redeem-products-popup.component.html',
  styleUrls: ['./redeem-products-popup.component.css']
})
export class RedeemProductsPopupComponent implements OnInit {

  showQuickView: boolean = true;
  showDelivery: boolean = false;
  showRedeemGift: boolean = false;
  quantity = 1;
  selectAddress: string = "";
  RedeemGiftValidation: boolean = false;
  RedeemGiftSuccessfull: boolean = false;
  mobileOtpCode: string[] = ['', '', '', '', '', ''];


  constructor() { }

  ngOnInit() {
  }


  redeemtoDelivery() {
    this.showQuickView = false;
    this.showRedeemGift = false;
    this.showDelivery = true;
    this.RedeemGiftValidation = false;
  }

  backtoQuickView(){
    this.showQuickView = true;
    this.showRedeemGift = false;
    this.showDelivery = false;
    this.RedeemGiftValidation = false;
  }

  redeemtoGiftProduct(){
    this.showQuickView = false;
    this.showDelivery = false;
    this.showRedeemGift = true;
    this.RedeemGiftValidation = false;
  }

  redeemtoGiftValidate() {
    this.showQuickView = false;
    this.showDelivery = false;
    this.showRedeemGift = false;
    this.RedeemGiftValidation = true;
  }

  redeemGiftotpValidate(){
    this.showQuickView = false;
    this.showDelivery = false;
    this.showRedeemGift = false;
    this.RedeemGiftValidation = false;
    this.RedeemGiftSuccessfull = true;
  }

  backtoGiftProduct() {
    this.showRedeemGift = true;
    this.showQuickView = false;
    this.showDelivery = false;
    this.RedeemGiftValidation = false;
    this.RedeemGiftSuccessfull = false;
  }


  onMobileOtpCodeChange(event: any, index: number) {
    if (event.target instanceof HTMLInputElement) {
      if (event.target.value.length < 2) {
        this.mobileOtpCode[index - 1] = event.target.value;
      }
    }
  }

}

--- ./site-themes/four-theme/redeem-points/redeem-point-product/redeem-point-product.component.ts
+++ ./site-themes/four-theme/redeem-points/redeem-point-product/redeem-point-product.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { RedeemProductsPopupComponent } from '../redeem-products-popup/redeem-products-popup.component';

\1
  standalone: true,
  selector: 'app-redeem-point-product',
  templateUrl: './redeem-point-product.component.html',
  styleUrls: ['./redeem-point-product.component.css']
})
export class RedeemPointProductComponent implements OnInit {

  constructor(public dialog: MatDialog) { }

  ngOnInit() {
  }


  redeemProduct() {
    const dialogConfig = new MatDialogConfig();
    const dialogRef = this.dialog.open(RedeemProductsPopupComponent, { panelClass: 'modal-redeem-product' });
  }

}

--- ./site-themes/four-theme/redeem-points/redeem-point-validation-popup/redeem-point-validation-popup.component.ts
+++ ./site-themes/four-theme/redeem-points/redeem-point-validation-popup/redeem-point-validation-popup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';

\1
  standalone: true,
  selector: 'app-redeem-point-validation-popup',
  templateUrl: './redeem-point-validation-popup.component.html',
  styleUrls: ['./redeem-point-validation-popup.component.css']
})
export class RedeemPointValidationPopupComponent implements OnInit {


  mobileOtpCode: string[] = ['', '', '', '', '', ''];


  constructor() { }

  ngOnInit() {
  }

  onMobileOtpCodeChange(event: any, index: number) {
    if (event.target instanceof HTMLInputElement) {
      if (event.target.value.length < 2) {
        this.mobileOtpCode[index - 1] = event.target.value;
      }
    }
  }

}

--- ./site-themes/four-theme/return-detail/return-detail.component.ts
+++ ./site-themes/four-theme/return-detail/return-detail.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { Options } from '@angular-slider/ngx-slider';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { OrderDetailPrintModalComponent } from '../order-detail-print-modal/order-detail-print-modal.component';
\1
  standalone: true,
  selector: 'app-return-detail',
  templateUrl: './return-detail.component.html',
  styleUrls: ['./return-detail.component.scss']
})
export class ReturnDetailComponent implements OnInit {
  showalerttop:boolean = true;
  minValue: number = 50;
  maxValue: number = 200;
  options: Options = {
    floor: 0,
    ceil: 250
  };
  constructor(public dialog: MatDialog,) { }

  ngOnInit(): void {
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  printmodal(){
    const dialogConfig = new MatDialogConfig();
    dialogConfig.panelClass = 'print_modal_parent';
    const dialogRef = this.dialog.open(OrderDetailPrintModalComponent,dialogConfig);
  }

}

--- ./site-themes/four-theme/print-order-summary/print-order-summary.component.ts
+++ ./site-themes/four-theme/print-order-summary/print-order-summary.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, OnInit ,  Renderer2} from '@angular/core';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { ActivatedRoute,  Router, NavigationStart } from '@angular/router';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { environment } from 'src/environments/environment';
import { OrderTrackResponse } from 'src/app/models/OrderTrackResponse';
import { DOCUMENT } from '@angular/common';
import { Subject, Subscription, firstValueFrom, take} from 'rxjs';

\1
  standalone: true,
  selector: 'app-print-order-summary',
  templateUrl: './print-order-summary.component.html',
  styleUrls: ['./print-order-summary.component.css']
})
export class PrintOrderSummaryComponent implements OnInit {

  private routerSubscription!: Subscription;
  reloadSubscription!: Subscription;
  errorMessage = '';
  logoImage = '';
  subdomain: string = '';
  businessId = Number(this.tokenStorage.getBusinessID()!);
  order!: OrderResponse;
  user = this.tokenStorage.getUser();
  orderId!: number;
  orderPrefix = this.tokenStorage.getOrderFormat()?.prefix;
  orderSuffix = this.tokenStorage.getOrderFormat()?.suffix;
  awsUrl = environment.awsKey;
  assetsAwsKey = environment.assetsAwsKey;
  currency = this.tokenStorage.getCurrency()?.symbol;
  shippingTracks!: OrderTrackResponse;
  qrCodeImage!: string;

  constructor(private businessSetting: BusinessSettingService, private route: ActivatedRoute,
    @Inject(DOCUMENT) private document: Document, private renderernew: Renderer2,
    public shoppingCart: ShoppingCartService,private router: Router,
    public tokenStorage: TokenStorageService,
  ) { }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    this.order = this.tokenStorage.getOrderForPrint();
    if(!this.order){
      this.router.navigate([this.subdomain+'/home']);
    }
    this.orderId = this.route.snapshot.params['id'];
    this.getStoreLogo();
    this.qrCodeImage = this.generateQRCode(this.order.qrCodeImage);
    this.shippingTracks = this.order?.orderTracks?.filter(track => track?.status === 'SHIPPING')[0];
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);

     this.renderernew.addClass(this.document.body, 'printorder-optimized');
        this.routerSubscription = this.router.events.subscribe((event) => {
          if (event instanceof NavigationStart) {
            this.renderernew.removeClass(this.document.body, 'printorder-optimized');
          }
        });
  }

   ngOnDestroy(): void {
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
    this.renderernew.removeClass(this.document.body, 'checkout-optimized');
  }


  printInvoice(): void {
    window.print();
  }

  getStoreLogo() {
    this.businessSetting.getStoreLogoBySiteUrl(this.subdomain).subscribe(
      data => {
        if (data.data?.getStoreLogoBySiteUrl == null) {
          this.errorMessage = data?.errors[0]?.errorMessage;
          return;
        }
        this.logoImage = data.data?.getStoreLogoBySiteUrl
      }
    );
  }

  generateQRCode(qrCodebase64: any): string {
    return `data:image/png;base64,${qrCodebase64}`;
  }

}

--- ./site-themes/four-theme/theme-product-carousel/theme-product-carousel.component.ts
+++ ./site-themes/four-theme/theme-product-carousel/theme-product-carousel.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { environment } from 'src/environments/environment';
import { PdpQuickViewComponent } from '../pdp-quick-view/pdp-quick-view.component';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { DataService } from 'src/app/service/data.service';
import { WishListResponse } from 'src/app/models/WishListResponse';

\1
  standalone: true,
  selector: 'app-theme-product-carousel',
  templateUrl: './theme-product-carousel.component.html',
  styleUrls: ['./theme-product-carousel.component.scss']
})
export class ThemeProductCarouselComponent implements OnInit {

@Input() data:any=[];
@Input() activeTheme!: string;
subdomain: string = '';
awsUrl = environment.awsKey;
currency = this.tokenStorage.getCurrency()?.symbol;
userWishlists: WishListResponse[] = [];
businessId = Number(this.tokenStorage.getBusinessID());
arrowleft:any = '../../../../../../assets/img/slider-icon-left.svg';
arrowright:any = '../../../../../../assets/img/slider-icon-right.svg';
AlwaysShow: boolean = true;

constructor(
  private route: ActivatedRoute,
  private tokenStorage: TokenStorageService,
  public dialog: MatDialog, private wishlistService: WhishlistService,private dataService: DataService,
  ) { }

ngOnInit() {
  this.subdomain = this.route.snapshot.params['subdomain'];

  console.log(this.data.data,"checking theme carousel")
  console.log(this.data,"checking theme carousel mina")
}

replaceSpecialChars(str: string) {
  // Replace spaces and special characters with underscores
  return str.replace(/[\s~`!@#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?()\._]/g, '_');
}

  customOptions: OwlOptions = {
    loop: true,
    margin: 0,
    nav: true, // Add this option to enable navigation arrows
    dots: true,
    navSpeed: 700,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`,`<img src="${this.arrowright}" alt="RIGHT">`],
    responsive: {
      0: {
        items: 2
      },
      400: {
        items: 2
      },
      740: {
        items: 3
      },
      940: {
        items: 4
      }
    },
  }


  customOptions3: OwlOptions = {
    loop: true,
    margin: 0,
    nav: true,
    dots: true,
    autoplayHoverPause: true,
    navSpeed: 700,
    autoplay: false,
    navText: [`<img src="${this.arrowleft}" alt="LEFT">`,`<img src="${this.arrowright}" alt="RIGHT">`],
    autoplayTimeout: 3000,
    responsive: {
      0: {
        items: 2
      },
      400: {
        items: 2
      },
      740: {
        items: 3
      },
      940: {
        items: 4
      }
    },
  }

  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
        id: id,
        subdomain: this.subdomain
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
}

  async setFavItems() {
    (await this.wishlistService.getCustomerWishList()).subscribe(
      data => {
        this.userWishlists = data.data.getCustomerWishList;
        this.data?.data?.forEach((product: any) => {
          if (this.userWishlists.map(fav => fav.itemId).includes(product.id)) {
            product.addedToWishlist = true;
          }
        });
      }
    );
  }

  async addItemToFovarite(product: ProductResponse) {
    try {
      const response = await (await this.wishlistService.addItemToWishList(this.businessId, product.productId || product.id)).toPromise();

      if (response?.data?.addItemToWishList != null) {
        product.addedToWishlist = true;
        this.dataService.reset();
        this.dataService.changeCount(1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_ADDED_TO_WISHLIST' } });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: response.errors[0].errorMessage }
        });
      }
    } catch (error) {
    }
  }


  async removeItemFromFovarite(product: ProductResponse) {
    try {
      const response = await (await this.wishlistService.removeItemFromWishList(this.businessId, product.productId || product.id)).toPromise();

      if (response?.data?.removeItemFromWishList != null) {
        product.addedToWishlist = false;
        this.dataService.reset();
        this.dataService.changeCount(-1);
        this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
      } else {
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: '', message: response.errors[0].errorMessage }
        });
      }
    } catch (error) {
    }
  }


}

--- ./site-themes/four-theme/four-new-home/four-new-home.component.ts
+++ ./site-themes/four-theme/four-new-home/four-new-home.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Inject, Input, OnInit, Renderer2 } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { SiteOptionResponse } from 'src/app/models/SiteOptionResponse';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import {  NavigationStart } from '@angular/router';
import { Subscription } from 'rxjs';
import { DOCUMENT } from '@angular/common';
import { environment } from 'src/environments/environment';


\1
  standalone: true,
  selector: 'app-four-new-home',
  templateUrl: './four-new-home.component.html',
  styleUrls: ['./four-new-home.component.scss']
})
export class FourNewHomeComponent implements OnInit {
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  private routerSubscription!: Subscription;
  customData!: any;
  customerReviews: any[] = [];
  errorMessage:string='';

  footerMenuItems:  { text: string; item: string; list: string[] }[]=
  [{ text: "Logo Section", item: "logo",list:["../../../assets/img/items/footerlogo.svg","simply dummy text of the printing and typesetting industry."]},
  { text: "Useful Links", item: "links",list:["About Us", "Faq", "Location", "Unsubscribe", "Contact Us"] },
  { text: "Category", item: "category",list:["Men", "Women", "Kids", "Special Offer", "Best Seller"] },
  { text: "My Account", item: "account",list:["My Account", "Discount", "Return", "Orders History", "Order Tracking"] },
  { text: "Contact Info", item: "contact",list:["abc street, london, uk", "example@email.com", "+123456789"] }];
  testimonials: string[] = ["I had to attend a premier...", "These items were a perfect..."];
  footer:any={
    copyright:{
      text:'©Copyright 2023 Fazealbusiness',
      style:'LEFT_TO_RIGHT'
    },
    menu:this.footerMenuItems,
    textColor:'',
    bgColor:'',
    design:''
  }




  products = [
    {
      imgSrc: '../../assets/img/111.jpg',
      title: 'Product 1',
      price: '$50.00'
    },
    {
      imgSrc: '../../assets/img/222.jpg',
      title: 'Product 2',
      price: '$45.00'
    },
    {
      imgSrc: '../../assets/img/322.jpg',
      title: 'Product 3',
      price: '$60.00'
    },{
      imgSrc: '../../assets/img/222.jpg',
      title: 'Product 2',
      price: '$45.00'
    },
    {
      imgSrc: '../../assets/img/322.jpg',
      title: 'Product 3',
      price: '$60.00'
    },
    {
      imgSrc: '../../assets/img/444.jpg',
      title: 'Product 4',
      price: '$55.00'
    },{
      imgSrc: '../../assets/img/222.jpg',
      title: 'Product 1',
      price: '$50.00'
    },
    {
      imgSrc: '../../assets/img/111.jpg',
      title: 'Product 2',
      price: '$45.00'
    },
  ];

  subdomain = '';


@Input() productDashboredResponse: any = {
  recentlyViewedEnabled: false,
  recentlyViewedProducts : [],
};
  optionsList: string[] = [];


  constructor(private route: ActivatedRoute,
    @Inject(DOCUMENT) private document: Document,
    private renderer: Renderer2,
    private tokenStorage: TokenStorageService,
    private router: Router,
    private themeService:ThemeService
    ) { }

  ngOnInit(): void {
    if(environment.env !== 'local'){
      this.subdomain = window.location.hostname;
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.optionsList = this.dashboardContent?.siteOptionsResponses?.map(siteOption => siteOption?.optionName);
    console.log(this.dashboardContent,'checking all dashboard')
    if(this.subdomain && !this.tokenStorage.getBusinessURL()){
      this.tokenStorage.saveBusinessData(this.subdomain , this.router.url.substring(1));
    }
    this.loadDashboard(this.subdomain);
    this.loadCstReview();


    // Add the class to the <body> tag
    // this.renderer.addClass(this.document.body, 'home-cst-layout-page');

    // Listen for route changes and remove the class when navigating away
    // this.routerSubscription = this.router.events.subscribe(event => {
    //   if (event instanceof NavigationStart) {
    //     this.renderer.removeClass(this.document.body, 'home-cst-layout-page');
    //   }
    // });

    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);

  }

  loadDashboard(subdomain: string){
    if(this.dashboardContent){
      this.loadThemeColors();
      this.customData = [
        {
          label: 'MENU_MAIN_HEADER',
          section: 'mainHeader',
          img:'./assets/img/site_opt_0.svg',
          data:this.dashboardContent.mainBannersEspot,
          isShow:true
        },
        {
          label: 'THREE_IN_ONE_ESPOT',
          section: 'threein1',
          img:'./assets/img/site_opt_1.svg',
          data:this.dashboardContent.threeInOneBannersEspot,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('THREE_IN_ONE_ESPOT')
        },
        {
          label: 'FLASH_SALE',
          section: 'flashSale',
          img:'./assets/img/site_opt_2.svg',
          data:this.dashboardContent.flashSaleProducts,
          sliderTitle:this.dashboardContent.flashSaleSliderHeading,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('FLASH_SALE'),
          sliderStyle: this.dashboardContent.flashProductSliderStyle ? this.dashboardContent.flashProductSliderStyle : 'DOTS'
        },
        {
          label: 'BEST_SELLER',
          section: 'bestSeller',
          img:'./assets/img/site_opt_3.svg',
          data:this.dashboardContent.bestSellerProducts,
          sliderTitle:this.dashboardContent.bestSellerSliderHeading,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('BEST_SELLER'),
          sliderStyle: this.dashboardContent.bestSellerSliderStyle ? this.dashboardContent.bestSellerSliderStyle : 'DOTS'
        },
        {
          label: 'EXCLUSIVE_PRODUCTS',
          section: 'exclusiveProducts',
          img:'./assets/img/site_opt_4.svg',
          data:this.dashboardContent.newlyAddedProducts,
          sliderTitle:this.dashboardContent.newlyAddedSliderHeading,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('EXCLUSIVE_PRODUCTS'),
          sliderStyle: this.dashboardContent.newlyAddedSliderStyle ? this.dashboardContent.newlyAddedSliderStyle : 'DOTS'
        },
        {
          label: 'ESPOT_BANNER',
          section: 'espotBanner',
          img:'./assets/img/site_opt_7.svg',
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('ESPOT_BANNER'),
          data:this.dashboardContent.espotBanners
        },
        {
          label: 'ESPOT_TEXT_SLIDER',
          section: 'espotTextSlider',
          img:'./assets/img/site_opt_10.svg',
          data:this.dashboardContent.eSpotTextSlider,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('ESPOT_TEXT_SLIDER')
        },
        {
          label: 'TESTIMONIALS',
          section: 'testimonials',
          img:'./assets/img/site_opt_9.svg',
          data: this.dashboardContent.customerReviews,
          sliderTitle: this.dashboardContent.customerReviewSliderHeading,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('TESTIMONIALS')
        },
        {
          label: 'BRAND_LOGOS_SLIDER',
          section: 'brandLogos',
          img:'./assets/img/site_opt_4.svg',
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('BRAND_LOGOS_SLIDER'),
          data:this.dashboardContent.brandsSlider,
          sliderHeading: this.dashboardContent.brandSliderHeading,
          sliderShow: this.dashboardContent.brandShowHeading,
          sliderStyle: this.dashboardContent.brandSliderStyle ? this.dashboardContent.brandSliderStyle : 'DOTS'
        },
        {
          label: 'RECENTLY_VIEWED',
          section: 'recentlyViewed',
          img:'./assets/img/site_opt_6.svg',
          products:this.dashboardContent.recentlyViewedProducts,
          isShow:this.dashboardContent.siteOptionsResponses.map(option => option.optionName).includes('RECENTLY_VIEWED'),
          sliderStyle: this.dashboardContent.recentlyViewedSliderStyle ? this.dashboardContent.recentlyViewedSliderStyle : 'DOTS'
        }
      ];
      this.footer.copyright.text = this.dashboardContent.copyrights?.text;
      this.footer.copyright.style = this.dashboardContent.copyrights?.textDirection;
      this.footerMenuItems[0].list = [this.dashboardContent.footer.logoImage, this.dashboardContent.footer.description]
      this.footer.menu = this.footerMenuItems;
      this.footer.textColor = this.dashboardContent.footer.textColor;
      this.footer.bgColor = this.dashboardContent.footer.backgroundColor;
      this.footer.design = this.dashboardContent.footer.footerDesign;
    }

  }

  loadThemeColors(){
    if(this.dashboardContent.themeName == 'FourthTheme'){
      this.renderer.addClass(document.body, `four-${this.dashboardContent.themeColorsResponse.name}-theme`);
    }else if(this.dashboardContent.themeName == 'ClassicTheme'){
      this.renderer.addClass(document.body, `classic-${this.dashboardContent.themeColorsResponse.name}-theme`);
    }else if(this.dashboardContent.themeName == 'DefaultTheme'){
      this.renderer.addClass(document.body, `default-${this.dashboardContent.themeColorsResponse.name}-theme`);
    }
  }


  private handleDataError(errors: any[]) {
    if (errors && errors[0] && errors[0].errorMessage) {
      this.errorMessage = errors[0].errorMessage;
    } else {
      this.errorMessage = "An unknown error occurred.";
    }
  }



  loadCstReview() {
    this.customerReviews = this.dashboardContent.customerReviews;
  }
}

--- ./site-themes/four-theme/delete-guest-contact-info/delete-guest-contact-info.component.ts
+++ ./site-themes/four-theme/delete-guest-contact-info/delete-guest-contact-info.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, OnInit } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';

\1
  standalone: true,
  selector: 'app-delete-guest-contact-info',
  templateUrl: './delete-guest-contact-info.component.html',
  styleUrls: ['./delete-guest-contact-info.component.scss']
})
export class DeleteGuestContactInfoComponent implements OnInit {

  constructor( public translate: TranslateService,
    private dialogRef: MatDialogRef<DeleteGuestContactInfoComponent>) { }

  ngOnInit(): void {
  }

  close(){
    this.dialogRef.close(true);

  }

}

--- ./site-themes/four-theme/four-theme-textslider-espot/four-theme-textslider-espot.component.ts
+++ ./site-themes/four-theme/four-theme-textslider-espot/four-theme-textslider-espot.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';

\1
  standalone: true,
  selector: 'app-four-theme-textslider-espot',
  templateUrl: './four-theme-textslider-espot.component.html',
  styleUrls: ['./four-theme-textslider-espot.component.scss']
})
export class FourThemeTextsliderEspotComponent implements OnInit {
  @Input() data:any=[];
  @Input() activeTheme!: string;
  constructor() { }

  ngOnInit() {
    console.log(this.data,"text slider data")
  }

}

--- ./site-themes/four-theme/unsubscribe-marketing/unsubscribe-marketing.component.ts
+++ ./site-themes/four-theme/unsubscribe-marketing/unsubscribe-marketing.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { BusinessSettingService } from 'src/app/service/business-setting.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-unsubscribe-marketing',
  templateUrl: './unsubscribe-marketing.component.html',
  styleUrls: ['./unsubscribe-marketing.component.css']
})
export class UnsubscribeMarketingComponent implements OnInit {
  email: string = '';
  emailInvalid: boolean = false;
  businessId = Number(this.tokenStorageService.getBusinessID()!);

  constructor(public dialog: MatDialog, public dialogRef: MatDialogRef<UnsubscribeMarketingComponent>,
    private businessSettingService: BusinessSettingService, private tokenStorageService: TokenStorageService) { }

  ngOnInit() {
  }

  async unSubscribe() {
    if(!this.email || this.email.match(/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&]).{8,}/)){
      this.emailInvalid = true;
    }
    (await this.businessSettingService.unSubscribe(this.email, this.businessId)).subscribe(
      data => {
        if (data?.data?.unsubscribe != null) {
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess', data: { title: 'SUCCESS', message: 'EMAIL_REMOVED_SUCCESS' } });
          this.dialogRef.close({ event: 'close'});
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: data.errors[0].errorMessage }
          });
        }
      }
    );
    }

}

--- ./site-themes/four-theme/four-theme-shopping-cart/four-theme-shopping-cart.component.ts
+++ ./site-themes/four-theme/four-theme-shopping-cart/four-theme-shopping-cart.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { Component, OnInit, OnDestroy } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { Subscription } from 'rxjs';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { ShoppingCartResponse } from 'src/app/models/ShoppingCartResponse';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { DataService } from 'src/app/service/data.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-theme-shopping-cart',
  templateUrl: './four-theme-shopping-cart.component.html',
  styleUrls: ['./four-theme-shopping-cart.component.scss']
})
export class FourThemeShoppingCartComponent implements OnInit, OnDestroy {

  shoppingCart!: ShoppingCartResponse;
  awsURL = environment.awsKey;
  totalPrice: number = 0;
  totalDiscount: number = 0;
  totalDiscounrPrice: number = 0;
  total : number = 0;
  subdomain!: string;
  currencySymbol = '$';
  isDiscountPrice: boolean = true;
  isTotalPrice: boolean = false;
  promocode! : string;
  promoCodeErrorMessage! : string;
  isFailed = false;
  isPromoExist: boolean = false;
  isSuccess = false;
  successMessage! :string;
  discountPrice! : number;
  promotionResponse! : any;
  businessId: any;
  isShowCatalogPromotions = false;
  isLoggedIn = false;
  private cartSubscription: Subscription | undefined;
  sessionResponse!: SessionResponse;
  businessID = Number(this.tokenStorage.getBusinessID());
  cartMessages: any[] = [];
  loadingItems: boolean = true;
  noItemsAvailable: boolean = false;
  user = this.tokenStorage.getUser();
  quantityLoading: boolean = false;
  allPromotionResponses: any[] = [];


  constructor(private tokenStorage: TokenStorageService,
  private shoppingCartService: ShoppingCartService,
  private route: ActivatedRoute,
  private translate: TranslateService,
  public dialog: MatDialog,private cookieService: CookieDataServiceService,
  private router: Router,private dataService: DataService,
  ) {
    if (this.tokenStorage.getUser()) {
      this.isLoggedIn = true;
    }
    if(this.businessID &&  cookieService.getCookie(this.businessID!.toString()) != ''){
      this.sessionResponse = JSON.parse(cookieService.getCookie(this.businessID!.toString()));
    }
  }

  async ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    if (environment.env !== 'local') {
      this.subdomain = '';
    }
    if(!this.user && this.sessionResponse.userType !== 'GUEST'){
      this.router.navigate([this.subdomain+'/home']);
    }
    if(this.subdomain){
      await this.tokenStorage.saveBusinessData(this.subdomain, this.router.url.substring(1));
    }
    this.currencySymbol = this.tokenStorage.getCurrency()?.symbol;
    this.dataService.notifyRemoveItemsObservable$.subscribe(async itemId => {
      if (itemId) {
        const index = this.shoppingCart?.cartItemResponseList?.findIndex(item => item.id === itemId);
        if (index !== -1) {
          this.shoppingCart?.cartItemResponseList.splice(index, 1);
          this.noItemsAvailable = this.shoppingCart?.cartItemResponseList?.length === 0;
        }
      }
    });
    if(this.sessionResponse.userType !== "GENERIC"){
      this.listUserCartItems(true);
    }
       setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }

  ngOnDestroy() {
    this.cartSubscription?.unsubscribe();
  }

  async listUserCartItems(showLoader: boolean = true){
    if (showLoader) {
      this.loadingItems = true;
    }
    this.noItemsAvailable = false;

    (await this.shoppingCartService.listUserCartItems(Number(this.tokenStorage.getBusinessID()))).subscribe(
      data => {
        if (data?.errors) {
          this.loadingItems = false;
          return;
        }

        this.isShowCatalogPromotions = false;
        if(data?.data?.listUserCartItems){
          this.shoppingCart = data?.data?.listUserCartItems;
          this.shoppingCart?.cartItemResponseList?.forEach(cartItem => {
            if(cartItem?.cartItemPromotionResponses?.length > 0){
              this.isShowCatalogPromotions = true;
            }
          });
          this.getCartMessages();
          this.allPromotionResponses = [
            ...(this.shoppingCart?.appliedOrderPromotions || []),
            ...(this.shoppingCart?.appliedShippingPromotions || [])
          ];
          this.noItemsAvailable = this.shoppingCart?.cartItemResponseList?.length === 0;
        } else {
          this.noItemsAvailable = true;
        }

        this.loadingItems = false;
      },
      error => {
        this.loadingItems = false;
        this.noItemsAvailable = true;
      }
    );
  }


  async getCartMessages(){
    (await this.shoppingCartService.getCartMessages()).subscribe(
      data => {
        if(data?.data?.getCartMessages){
          this.cartMessages = data?.data?.getCartMessages;
        }
      }
    );
  }

  async removeItemFromCart(itemId: any, cartId: any, item: any){
    (await this.shoppingCartService.removeItemFromCart(itemId, cartId)).subscribe(
      data => {
        if(data?.data?.removeItemFromCart){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
            data:{title:'', message: data?.data?.removeItemFromCart?.message}});
            this.dataService.notifyOther({refresh: true});
          if(this.sessionResponse.userType !== "GENERIC"){
            this.listUserCartItems(false);
          }
        }
      }
    );
  }

  async removeAllItemsFromCart(){
    this.shoppingCart?.cartItemResponseList?.forEach(async item => {
      (await this.shoppingCartService.removeItemFromCart(item.id, this.shoppingCart.id)).subscribe(
        data => {
          if(data?.data?.removeItemFromCart){
            this.dataService.notifyOther({ refresh: true });
            this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
              data:{title:'', message: data?.data?.removeItemFromCart?.message}});
              this.dataService.notifyOther({refresh: true});
            if(this.sessionResponse.userType !== "GENERIC"){
              this.listUserCartItems(false);
            }
          }
        }
      );
    })
  }

  onChangesQuantity(event: Event, item: any) {
    const input = event.target as HTMLInputElement;
    if (parseFloat(input.value) <= 0) {
      input.value = '1';
      item.quantity = 1;
    }
  }

  async updateQuantity(item: any, cartId: any) {
    if (item.promotionItem) {
      return;
    }

    const quantity = item.quantity;
    this.quantityLoading = true;

    (await this.shoppingCartService.updateItemQuantity(item.id, cartId, quantity)).subscribe(
      data => {
        if (data?.data?.updateItemQuantity != null) {
          this.dialog.open(SucessmsgPopupComponent, {
            backdropClass: 'notificationmodal-popup-sucess',
            data: {
              title: '',
              message: data?.data?.updateItemQuantity?.message
            }
          });

          this.dataService.notifyOther({ refresh: true });

          if (this.sessionResponse.userType !== "GENERIC") {
            this.listUserCartItems(false);
          }
        } else {
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage }
          });
        }

        this.quantityLoading = false;
      },
      error => {
        this.quantityLoading = false;
      }
    );
  }



  applyPromocode(promocode : string){
    if(promocode){
      this.shoppingCartService.applyOrderAndShippingPromocodeOnCart(this.shoppingCart.businessId,this.shoppingCart.id,promocode, false).subscribe(
        data => {
          console.log(data)
          if(data?.data?.applyOrderAndShippingPromocodeOnCart == null){
            this.promoCodeErrorMessage= data?.errors[0]?.errorMessage;
            this.promocode = '';
            this.isPromoExist = false;
            this.isFailed= true;
            setTimeout(() => {
              this.isFailed= false;
              this.promoCodeErrorMessage='';
            }, 3000);
            return;
          }
          this.isSuccess=true;
          this.isShowCatalogPromotions = true;
          this.successMessage=data?.data?.applyOrderAndShippingPromocodeOnCart?.message;
          if(this.sessionResponse.userType !== "GENERIC"){
            this.listUserCartItems(true);
          }
          this.promocode = '';
          setTimeout(() => {
            this.isSuccess= false;
            this.successMessage='';
          }, 3000);

        }
      );

    }
  }

  removeAppliedPromocodeOnCart(promocode : string){
    this.shoppingCartService.removeAppliedPromocodeOnCart(promocode).subscribe(
      data => {
        if(data?.data?.removeAppliedPromocodeOnCart){
          this.dialog.open(SucessmsgPopupComponent,{backdropClass: 'notificationmodal-popup-sucess',
            data:{title:'', message: data?.data?.removeAppliedPromocodeOnCart?.message}});
          if(this.sessionResponse.userType !== "GENERIC"){
            this.listUserCartItems(false);
          }
        }
      }
    );
  }

}

--- ./site-themes/four-theme/four-theme-popular-categories/four-theme-popular-categories.component.ts
+++ ./site-themes/four-theme/four-theme-popular-categories/four-theme-popular-categories.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { OwlOptions } from 'ngx-owl-carousel-o';
import { CategoryResponse } from 'src/app/models/CategoryResponse';
import { ThemeDashboardContent } from 'src/app/models/ThemeDashboardContent';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { ThemeService } from 'src/app/service/theme.service';
import { environment } from 'src/environments/environment';

\1
  standalone: true,
  selector: 'app-four-theme-popular-categories',
  templateUrl: './four-theme-popular-categories.component.html',
  styleUrls: ['./four-theme-popular-categories.component.scss']
})
export class FourThemePopularCategoriesComponent implements OnInit {
  dashboardContent: ThemeDashboardContent = this.tokenStorage.getThemeDashboard()!;
  customData!: any;
  customerReviews: any[] = [];
  dashboredListResponse!:ThemeDashboardContent;
  errorMessage:string='';
  threeInOneEnableHeadline!: boolean;
  threeInOneSliderHeadline!: string;
  @Input() data:any=[];
  @Input() activeTheme!: string;
  currency = '';
  categories: CategoryResponse[] = [];
  awsUrl = environment.awsKey;
  subdomain = '';
  itemsToShow = 3;
  isShowLikeDiv: boolean[] = [];

  constructor(
    private route: ActivatedRoute,
    private catalogService: CatalogServiceService,
    private tokenStorage: TokenStorageService,
    private themeService:ThemeService
    ) { }

  ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    this.loadCategories();
    this.loadData();
    console.log(this.data.data,"checking data length")
  }

  loadCategories(){
    this.catalogService.findAllCategoryBySiteUrl(this.tokenStorage.getBusinessURL()!).subscribe(
      data => {
        this.categories = data?.data?.findAllCategoryBySiteUrl;
        if(this.activeTheme === 'FourthTheme'){
          if (data && data.data && data.data.length == 2) {
            this.itemsToShow = 2;
          }
          if (data && data.data && data.data.length == 1) {
            this.itemsToShow = 1;
          }
        }
        if(this.activeTheme === 'RetailTheme2'){
          this.categories?.forEach(category => this.isShowLikeDiv.push(false));
        }
      }
    );
  }
  customOptions: OwlOptions = {
    items:this.itemsToShow,
    loop: false,
    margin: 0,
    nav: false,
    dots: true,
    navSpeed: 700,
    navText: ['', ''],
    responsive: {
      0: {
        items: 1,
      },
      600: {
        items: 2,
      },
      768: {
        items: this.itemsToShow,
      },
      1200: {
        items: this.itemsToShow,
      }
    },
  }

  private handleDataError(errors: any[]) {
    if (errors && errors[0] && errors[0].errorMessage) {
      this.errorMessage = errors[0].errorMessage;
    } else {
      this.errorMessage = "An unknown error occurred.";
    }
  }


  updateThreeInOneEnableHeadline(newValue: boolean) {
    this.dashboredListResponse.threeInOneEnableHeadline = newValue;
  }

  loadData() {
    this.dashboredListResponse = this.dashboardContent;
    this.threeInOneEnableHeadline = this.dashboredListResponse?.threeInOneEnableHeadline;
    this.threeInOneSliderHeadline = this.dashboredListResponse?.threeInOneSliderHeadline;
    console.log(this.dashboardContent,"checking complete data")
    // this.themeService.getThemeDashboardContentBySiteUrl(this.subdomain).subscribe(
    //   ({ data, errors }) => {
    //     if (!data || !data.getThemeDashboardContentBySiteUrl) {
    //       this.handleDataError(errors);
    //       return;
    //     }
    //     if (data.getThemeDashboardContentBySiteUrl) {

    //     }
    //   }
    // );
  }

}

--- ./site-themes/four-theme/product-box/product-box.component.ts
+++ ./site-themes/four-theme/product-box/product-box.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { ProductResponse } from 'src/app/models/ProductResponse';
import { ActivatedRoute, Router } from '@angular/router';
import { environment } from 'src/environments/environment';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PdpQuickViewComponent } from '../pdp-quick-view/pdp-quick-view.component';
import { WhishlistService } from 'src/app/service/whishlist.service';
import { DataService } from 'src/app/service/data.service';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { StoreUsersSessionsService } from 'src/app/service/store-users-sessions.service';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';


\1
  standalone: true,
  selector: 'app-product-box',
  templateUrl: './product-box.component.html',
  styleUrls: ['./product-box.component.css']
})
export class ProductBoxComponent implements OnInit {

  @Input() attrValues!: string[];
  @Input() product: any;
  @Input() activeTheme!: string;
  @Input() isQuickView!: boolean | undefined;
  subdomain = '';
  awsUrl = environment.awsKey;
  businessId = Number(this.tokenStorage.getBusinessID());
  currency = this.tokenStorage.getCurrency()?.symbol;
  ratingValue : number = 0;
  sessionResponse!: SessionResponse;
  firstTimeCalled = false;
  constructor(private catalogService: CatalogServiceService,
    private route: ActivatedRoute,private router: Router,
    private tokenStorage: TokenStorageService,private stoeSession: StoreUsersSessionsService,
    private cookieDate: CookieDataServiceService,
    public dialog: MatDialog, private wishlistService: WhishlistService,private dataService: DataService ) { }

  ngOnInit() {
    this.subdomain = this.route.snapshot.params['subdomain'];
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = '/'+this.subdomain;
    }
    this.ratingValue = this.roundOffReview(this.product?.averageReview);
    this.getReviewValidation();
  }

  navigateTOProduct(){
    localStorage.setItem('filter-attrs', JSON.stringify(this.attrValues));
    if(environment.env !== 'local'){
      this.router.navigateByUrl('product/' +  this.product.url + '/' + this.product?.id || this.product?.productId);
    } else {
      this.router.navigateByUrl(this.subdomain, '/product/' + this.product.url + '/' + this.product?.id || this.product?.productId);
    }
  }

  // Validations Configurations & Null Pointers
  getProductName(): string {
    return this.product?.name || this.product?.productName;
  }
  getReviewCount(): number {
    return isNaN(this.product?.reviewCount) || this.product?.reviewCount === null ? 0 : this.product?.reviewCount;
  }
  getReviewValidation() {
    if (isNaN(this.product?.averageReview) || this.product?.averageReview === null) {
      this.product.averageReview = 0;
    }
  }

  pdppopup(id: number) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.data = {
      id: id,
      subdomain: this.subdomain,
      attrValues: this.attrValues
    };
    dialogConfig.panelClass = 'modal-quickview-width';
    dialogConfig.backdropClass = 'no-bg-scroll'; // Adding backdrop class
    this.dialog.open(PdpQuickViewComponent, dialogConfig);
  }


  async addItemToFovarite(product: ProductResponse) {
    this.firstTimeCalled = true;
    (await this.wishlistService.addItemToWishList(this.businessId, product.id || product.productId)).subscribe(
      data => {
        if (data?.data?.addItemToWishList != null) {
          product.addedToWishlist = true;
          this.firstTimeCalled = false;
          this.dataService.reset();
          this.dataService.changeCount(1);
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess',
             data: { title: 'SUCCESS',
               message: 'PRODUCT_ADDED_TO_WISHLIST' } });
          this.dataService.notifyOther({ refresh: true });

          this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.tokenStorage.getBusinessID()!));
          if(this.sessionResponse.userType == 'GENERIC'){
            this.stoeSession.getUserIpAddress().then(async ip => {
              (await this.stoeSession.setUserSession(ip, Number(this.tokenStorage.getBusinessID()))).subscribe(async data =>{
                this.sessionResponse = await data?.data?.setUserSession;
                await this.cookieDate.setCookie(this.tokenStorage.getBusinessID()!,JSON.stringify(this.sessionResponse),1);
                this.dataService.notifyOther({refresh: true});
              });
            });
          }else{
            this.dataService.notifyOther({refresh: true});
          }

        } else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
    }

    async removeItemFromFovarite(product: ProductResponse) {
    this.firstTimeCalled = true;
    (await this.wishlistService.removeItemFromWishList(this.businessId, product.id || product.productId)).subscribe(
      data => {
        if (data?.data?.removeItemFromWishList != null) {
          product.addedToWishlist = false;
          this.firstTimeCalled = false;
          this.dataService.reset();
          this.dataService.changeCount(-1);
          this.dataService.notifyProductId(product.id);
          this.dialog.open(SucessmsgPopupComponent, { backdropClass: 'notificationmodal-popup-sucess',
            data: { title: 'SUCCESS',
            message: 'PRODUCT_REMOVED_FROM_WISHLIST' } });
        } else {
          this.firstTimeCalled = false;
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: '', message: data?.errors[0]?.errorMessage }
          });
        }
      }
    );
    }

    roundOffReview(review: number): number {
      return isNaN(review) || review === null ? 0 : Math.round(review);
    }

}

--- ./site-themes/four-theme/four-espot-banner/four-espot-banner.component.ts
+++ ./site-themes/four-theme/four-espot-banner/four-espot-banner.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Component, Input, OnInit } from '@angular/core';
import { environment } from 'src/environments/environment';
import { ActivatedRoute, Router } from '@angular/router';

\1
  standalone: true,
  selector: 'app-four-espot-banner',
  templateUrl: './four-espot-banner.component.html',
  styleUrls: ['./four-espot-banner.component.scss']
})
export class FourEspotBannerComponent implements OnInit {
  @Input() data:any;
  @Input() design:any;
  @Input() activeTheme!: string;
  @Input() subdomain!: string;
  awsUrl = environment.awsKey;

  constructor(private route: ActivatedRoute) { }

  ngOnInit() {

    this.subdomain = this.route.snapshot.params['subdomain'];
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = '/'+this.subdomain;
    }

    if(this.data){
      for(let slide of this.data.data){
        if(!slide.imageUrl.includes('http')){
          slide.imageUrl = this.awsUrl + slide.imageUrl;
        }
      }
    }
  }


  navigateTODetail(){
    // if(environment.env !== 'local'){
    //   this.router.navigateByUrl('product/' +  this.product.url + '/' + this.product?.id || this.product?.productId);
    // } else {
    //   this.router.navigateByUrl(this.subdomain, '/product/' + this.product.url + '/' + this.product?.id || this.product?.productId);
    // }
  }

}

--- ./site-themes/four-theme/process-payment/process-payment.component.ts
+++ ./site-themes/four-theme/process-payment/process-payment.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit } from '@angular/core';
import { TokenStorageService } from 'src/app/service/TokenStorgeService.service';
import { PlaceOrderDto } from 'src/app/models/PlaceOrderDto';
import { ShoppingCartService } from 'src/app/service/ShoppingCart.service';
import { SessionResponse } from 'src/app/models/SessionResponse';
import { CookieDataServiceService } from 'src/app/service/cookie-data-service.service';
import { OrderIdFormatResponse } from 'src/app/models/OrderIdFormatResponse';
import { environment } from 'src/environments/environment';
import { CatalogServiceService } from 'src/app/service/CatalogService.service';
import { OrderResponse } from 'src/app/models/OrderResponse';
import { DataService } from 'src/app/service/data.service';
import { NotifacationMessageComponent } from 'src/app/notifacation-message/notifacation-message.component';
import { MatDialog } from '@angular/material/dialog';
import { SucessmsgPopupComponent } from 'src/app/sucessmsg-popup/sucessmsg-popup.component';

\1
  standalone: true,
  selector: 'app-process-payment',
  templateUrl: './process-payment.component.html',
  styleUrls: ['./process-payment.component.css']
})
export class ProcessPaymentComponent implements OnInit {

  placeOrderDto!: PlaceOrderDto;
  sessionResponse!: SessionResponse;
  orderIdFormat!: OrderIdFormatResponse;
  order!: OrderResponse;
  subdomain: string = '';
  placeOrderRequest: any;
  orderResponse!: OrderResponse;
  paymentId: string = '';
  token: string = '';
  payerId: string = '';

  constructor(private route: ActivatedRoute,
    private router: Router,
    private tokenStorage: TokenStorageService,public dialog: MatDialog,
    private shoppingCartService: ShoppingCartService,private dataService: DataService,
    private cookieDate: CookieDataServiceService,private catalogService: CatalogServiceService) { }

  async ngOnInit() {
    if(environment.env !== 'local'){
      this.subdomain = '';
    } else {
      this.subdomain = this.route.snapshot.params['subdomain'];
    }
    this.placeOrderDto = this.tokenStorage.getUserOrderInfo()!;
    this.placeOrderRequest = this.tokenStorage.getPlaceOrderRequest()!;
    this.route.queryParams.subscribe(async params => {
      const paymentId = params['paymentId'];
      const token = params['token'];
      const payerId = params['payerId'];

      if (paymentId && token && payerId) {
        this.paymentId = paymentId;
        this.token = token;
        this.payerId = payerId;
        this.sessionResponse = JSON.parse(this.cookieDate.getCookie(this.placeOrderDto.businessId!.toString()));
        await this.placeOrder();
      } else{
        this.dialog.open(NotifacationMessageComponent, {
          backdropClass: 'notificationmodal-popup',
          width: '450px',
          data: { title: 'ERROR', message: 'Payment have declined!' }
        });
        if (environment.env !== 'local') {
          this.subdomain = '';
        }
        this.router.navigate([this.subdomain ? `/${this.subdomain}/checkout` : '/checkout']);
      }
  })
     setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 50);
  }


  placeOrder(){
   if (environment.env !== 'local') {
    this.subdomain = '';
   }
   this.shoppingCartService.completePaypalPayment(this.payerId, this.paymentId, this.token, this.placeOrderDto.businessId, this.placeOrderDto.orderId,
    this.sessionResponse.id).subscribe(
      async data => {
        if(data?.errors){
          this.dialog.open(NotifacationMessageComponent, {
            backdropClass: 'notificationmodal-popup',
            width: '450px',
            data: { title: 'ERROR', message: 'Payment didnt go through!' }
          });
          this.router.navigate([this.subdomain ? `/${this.subdomain}/checkout` : '/checkout']);
          return;
        }
        if(data?.data?.completePaypalPayment){
            this.shoppingCartService.placeOrder(Number(this.tokenStorage.getBusinessID()), this.placeOrderRequest.shoppingCartId, this.placeOrderRequest.paymentMethod,
            this.placeOrderRequest.addressId? this.placeOrderRequest.addressId : null, this.placeOrderRequest.orderType, this.placeOrderRequest.paymentToken, this.placeOrderRequest.orderId,
            this.placeOrderRequest.pickupPerson, this.placeOrderRequest.formattedDateTime!, this.placeOrderRequest.firstName, this.placeOrderRequest.lastName, this.placeOrderRequest.email, this.placeOrderRequest.phoneNumber,null,
            this.placeOrderRequest.cardNumber, this.placeOrderRequest.expMonth, this.placeOrderRequest.expYear, this.placeOrderRequest.cvc, this.placeOrderRequest.cardType ? this.placeOrderRequest.cardType : null, this.placeOrderRequest.selectedCardId ? this.placeOrderRequest.selectedCardId : null,
            this.placeOrderRequest.totalApplicableTaxes, this.placeOrderRequest.totalSurchargesTaxes, this.placeOrderRequest.selectedAddress? this.placeOrderRequest.selectedAddress:null,
            this.placeOrderRequest.userType, this.placeOrderRequest.userId, this.placeOrderRequest.billingAddress? this.placeOrderRequest.billingAddress:null, '', 0).subscribe(
              async data => {
                if(data?.errors){
                  this.router.navigate([this.subdomain ? `/${this.subdomain}/checkout` : '/checkout']);
                  return;
                }
                if(data?.data?.placeOrder != null){
                  this.orderResponse = data?.data?.placeOrder?.data;
                  this.catalogService.updateLastOrderId(Number(this.tokenStorage.getBusinessID())).subscribe(
                    data => {});
                  this.dialog.open(SucessmsgPopupComponent,
                    { backdropClass: 'notificationmodal-popup-sucess',
                      data: { title: 'SUCCESS', message: data?.data?.placeOrder?.message
                    }
                    });
                  this.router.navigateByUrl(this.subdomain + '/place-an-order',{state: {order: this.orderResponse, orderFormat: this.orderResponse.businessOrderId }});
                  this.dataService.notifyOther({refresh: true});
                } else {
                  this.dialog.open(NotifacationMessageComponent, {
                    backdropClass: 'notificationmodal-popup',
                    width: '450px',
                    data: { title: 'ERROR', message: data?.errors[0]?.errorMessage }
                  });
                  this.router.navigate([this.subdomain ? `/${this.subdomain}/checkout` : '/checkout']);
                  return;
                }
      }
    );
        }
      }
    );
  }
}

--- ./sucessmsg-popup/sucessmsg-popup.component.ts
+++ ./sucessmsg-popup/sucessmsg-popup.component.ts
import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n
import { Component, Inject, OnInit } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';

\1
  standalone: true,
  selector: 'app-sucessmsg-popup',
  templateUrl: './sucessmsg-popup.component.html',
  styleUrls: ['./sucessmsg-popup.component.scss']
})
export class SucessmsgPopupComponent implements OnInit {
  errormessage!: string;
  constructor(
    private  dialogRef:  MatDialogRef<SucessmsgPopupComponent>,
    @Inject(MAT_DIALOG_DATA) public  data:  any,
    public translate: TranslateService,
    ) { }

  ngOnInit(): void {
    if(!this.data.title){
      this.data.title = this.translate.instant('SUCCESS')
    }
    setTimeout(() => {
      this.dialogRef.close();
    },7000);

  }

}
